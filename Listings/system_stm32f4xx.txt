; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\system_stm32f4xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\STM_Lib\inc -I.\USER -I.\CMSIS -I.\BoardHardware -I.\FATFS\src -I.\FATFS\exfuns -I.\MALLOC -I.\RTE\_407 -Ie:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Ie:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\system_stm32f4xx.crf CMSIS\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;571      */
;;;572    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;573    {
;;;574    #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx) || defined (STM32F401xx)
;;;575    /******************************************************************************/
;;;576    /*            PLL (clocked by HSE) used as System clock source                */
;;;577    /******************************************************************************/
;;;578      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;579      
;;;580      /* Enable HSE */
;;;581      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  4834              LDR      r0,|L1.220|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  4932              LDR      r1,|L1.220|
000012  6008              STR      r0,[r1,#0]
;;;582     
;;;583      /* Wait till HSE is ready and if Time out is reached exit */
;;;584      do
000014  bf00              NOP      
                  |L1.22|
;;;585      {
;;;586        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  4831              LDR      r0,|L1.220|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;587        StartUpCounter++;
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;588      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L1.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b04fa0          CMP      r0,#0x5000
000030  d1f1              BNE      |L1.22|
                  |L1.50|
;;;589    
;;;590      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  482a              LDR      r0,|L1.220|
000034  6800              LDR      r0,[r0,#0]
000036  f4003000          AND      r0,r0,#0x20000
00003a  b110              CBZ      r0,|L1.66|
;;;591      {
;;;592        HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L1.70|
                  |L1.66|
;;;593      }
;;;594      else
;;;595      {
;;;596        HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L1.70|
;;;597      }
;;;598    
;;;599      if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d146              BNE      |L1.218|
;;;600      {
;;;601        /* Select regulator voltage output Scale 1 mode */
;;;602        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
00004c  4823              LDR      r0,|L1.220|
00004e  3040              ADDS     r0,r0,#0x40
000050  6800              LDR      r0,[r0,#0]
000052  f0405080          ORR      r0,r0,#0x10000000
000056  4921              LDR      r1,|L1.220|
000058  3140              ADDS     r1,r1,#0x40
00005a  6008              STR      r0,[r1,#0]
;;;603        PWR->CR |= PWR_CR_VOS;
00005c  4820              LDR      r0,|L1.224|
00005e  6800              LDR      r0,[r0,#0]
000060  f4404040          ORR      r0,r0,#0xc000
000064  491e              LDR      r1,|L1.224|
000066  6008              STR      r0,[r1,#0]
;;;604    
;;;605        /* HCLK = SYSCLK / 1*/
;;;606        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000068  481c              LDR      r0,|L1.220|
00006a  3008              ADDS     r0,r0,#8
00006c  6800              LDR      r0,[r0,#0]
00006e  491b              LDR      r1,|L1.220|
000070  3108              ADDS     r1,r1,#8
000072  6008              STR      r0,[r1,#0]
;;;607    
;;;608    #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
;;;609        /* PCLK2 = HCLK / 2*/
;;;610        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]
000078  f4404000          ORR      r0,r0,#0x8000
00007c  6008              STR      r0,[r1,#0]
;;;611        
;;;612        /* PCLK1 = HCLK / 4*/
;;;613        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00007e  4608              MOV      r0,r1
000080  6800              LDR      r0,[r0,#0]
000082  f44050a0          ORR      r0,r0,#0x1400
000086  6008              STR      r0,[r1,#0]
;;;614    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx */
;;;615    
;;;616    #if defined (STM32F401xx)
;;;617        /* PCLK2 = HCLK / 2*/
;;;618        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;619        
;;;620        /* PCLK1 = HCLK / 4*/
;;;621        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;622    #endif /* STM32F401xx */
;;;623       
;;;624        /* Configure the main PLL */
;;;625        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000088  4816              LDR      r0,|L1.228|
00008a  1f09              SUBS     r1,r1,#4
00008c  6008              STR      r0,[r1,#0]
;;;626                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;627    
;;;628        /* Enable the main PLL */
;;;629        RCC->CR |= RCC_CR_PLLON;
00008e  1f08              SUBS     r0,r1,#4
000090  6800              LDR      r0,[r0,#0]
000092  f0407080          ORR      r0,r0,#0x1000000
000096  1f09              SUBS     r1,r1,#4
000098  6008              STR      r0,[r1,#0]
;;;630    
;;;631        /* Wait till the main PLL is ready */
;;;632        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00009a  bf00              NOP      
                  |L1.156|
00009c  480f              LDR      r0,|L1.220|
00009e  6800              LDR      r0,[r0,#0]
0000a0  f0007000          AND      r0,r0,#0x2000000
0000a4  2800              CMP      r0,#0
0000a6  d0f9              BEQ      |L1.156|
;;;633        {
;;;634        }
;;;635       
;;;636    #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
;;;637        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;638        PWR->CR |= PWR_CR_ODEN;
;;;639        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;640        {
;;;641        }
;;;642        PWR->CR |= PWR_CR_ODSWEN;
;;;643        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;644        {
;;;645        }      
;;;646        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;647        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;648    #endif /* STM32F427_437x || STM32F429_439xx  */
;;;649    
;;;650    #if defined (STM32F40_41xxx)     
;;;651        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;652        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
0000a8  f2407005          MOV      r0,#0x705
0000ac  490e              LDR      r1,|L1.232|
0000ae  6008              STR      r0,[r1,#0]
;;;653    #endif /* STM32F40_41xxx  */
;;;654    
;;;655    #if defined (STM32F401xx)
;;;656        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;657        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;658    #endif /* STM32F401xx */
;;;659    
;;;660        /* Select the main PLL as system clock source */
;;;661        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000b0  480a              LDR      r0,|L1.220|
0000b2  3008              ADDS     r0,r0,#8
0000b4  6800              LDR      r0,[r0,#0]
0000b6  f0200003          BIC      r0,r0,#3
0000ba  4908              LDR      r1,|L1.220|
0000bc  3108              ADDS     r1,r1,#8
0000be  6008              STR      r0,[r1,#0]
;;;662        RCC->CFGR |= RCC_CFGR_SW_PLL;
0000c0  4608              MOV      r0,r1
0000c2  6800              LDR      r0,[r0,#0]
0000c4  f0400002          ORR      r0,r0,#2
0000c8  6008              STR      r0,[r1,#0]
;;;663    
;;;664        /* Wait till the main PLL is used as system clock source */
;;;665        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
0000ca  bf00              NOP      
                  |L1.204|
0000cc  4803              LDR      r0,|L1.220|
0000ce  3008              ADDS     r0,r0,#8
0000d0  6800              LDR      r0,[r0,#0]
0000d2  f000000c          AND      r0,r0,#0xc
0000d6  2808              CMP      r0,#8
0000d8  d1f8              BNE      |L1.204|
                  |L1.218|
;;;666        {
;;;667        }
;;;668      }
;;;669      else
;;;670      { /* If HSE fails to start-up, the application will have wrong clock
;;;671             configuration. User can add here some code to deal with this error */
;;;672      }
;;;673    #elif defined (STM32F411xE)
;;;674    #if defined (USE_HSE_BYPASS) 
;;;675    /******************************************************************************/
;;;676    /*            PLL (clocked by HSE) used as System clock source                */
;;;677    /******************************************************************************/
;;;678      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
;;;679      
;;;680      /* Enable HSE and HSE BYPASS */
;;;681      RCC->CR |= ((uint32_t)RCC_CR_HSEON | RCC_CR_HSEBYP);
;;;682     
;;;683      /* Wait till HSE is ready and if Time out is reached exit */
;;;684      do
;;;685      {
;;;686        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;687        StartUpCounter++;
;;;688      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
;;;689    
;;;690      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
;;;691      {
;;;692        HSEStatus = (uint32_t)0x01;
;;;693      }
;;;694      else
;;;695      {
;;;696        HSEStatus = (uint32_t)0x00;
;;;697      }
;;;698    
;;;699      if (HSEStatus == (uint32_t)0x01)
;;;700      {
;;;701        /* Select regulator voltage output Scale 1 mode */
;;;702        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;703        PWR->CR |= PWR_CR_VOS;
;;;704    
;;;705        /* HCLK = SYSCLK / 1*/
;;;706        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;707    
;;;708        /* PCLK2 = HCLK / 2*/
;;;709        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;710        
;;;711        /* PCLK1 = HCLK / 4*/
;;;712        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;713    
;;;714        /* Configure the main PLL */
;;;715        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;716                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;717        
;;;718        /* Enable the main PLL */
;;;719        RCC->CR |= RCC_CR_PLLON;
;;;720    
;;;721        /* Wait till the main PLL is ready */
;;;722        while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;723        {
;;;724        }
;;;725    
;;;726        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;727        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;728    
;;;729        /* Select the main PLL as system clock source */
;;;730        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;731        RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;732    
;;;733        /* Wait till the main PLL is used as system clock source */
;;;734        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;735        {
;;;736        }
;;;737      }
;;;738      else
;;;739      { /* If HSE fails to start-up, the application will have wrong clock
;;;740             configuration. User can add here some code to deal with this error */
;;;741      }
;;;742    #else /* HSI will be used as PLL clock source */
;;;743      /* Select regulator voltage output Scale 1 mode */
;;;744      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;745      PWR->CR |= PWR_CR_VOS;
;;;746      
;;;747      /* HCLK = SYSCLK / 1*/
;;;748      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;749      
;;;750      /* PCLK2 = HCLK / 2*/
;;;751      RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;752      
;;;753      /* PCLK1 = HCLK / 4*/
;;;754      RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;755      
;;;756      /* Configure the main PLL */
;;;757      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (PLL_Q << 24); 
;;;758      
;;;759      /* Enable the main PLL */
;;;760      RCC->CR |= RCC_CR_PLLON;
;;;761      
;;;762      /* Wait till the main PLL is ready */
;;;763      while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;764      {
;;;765      }
;;;766      
;;;767      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;768      FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;769      
;;;770      /* Select the main PLL as system clock source */
;;;771      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;772      RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;773      
;;;774      /* Wait till the main PLL is used as system clock source */
;;;775      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;776      {
;;;777      }
;;;778    #endif /* USE_HSE_BYPASS */  
;;;779    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx */  
;;;780    }
0000da  bd0c              POP      {r2,r3,pc}
;;;781    
                          ENDP

                  |L1.220|
                          DCD      0x40023800
                  |L1.224|
                          DCD      0x40007000
                  |L1.228|
                          DCD      0x07405408
                  |L1.232|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;501      */
;;;502    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;503    {
;;;504      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
000002  2000              MOVS     r0,#0
000004  2200              MOVS     r2,#0
000006  2302              MOVS     r3,#2
000008  2400              MOVS     r4,#0
00000a  2102              MOVS     r1,#2
;;;505      
;;;506      /* Get SYSCLK source -------------------------------------------------------*/
;;;507      tmp = RCC->CFGR & RCC_CFGR_SWS;
00000c  4d27              LDR      r5,|L2.172|
00000e  682d              LDR      r5,[r5,#0]
000010  f005000c          AND      r0,r5,#0xc
;;;508    
;;;509      switch (tmp)
000014  b120              CBZ      r0,|L2.32|
000016  2804              CMP      r0,#4
000018  d006              BEQ      |L2.40|
00001a  2808              CMP      r0,#8
00001c  d134              BNE      |L2.136|
00001e  e007              B        |L2.48|
                  |L2.32|
;;;510      {
;;;511        case 0x00:  /* HSI used as system clock source */
;;;512          SystemCoreClock = HSI_VALUE;
000020  4d23              LDR      r5,|L2.176|
000022  4e24              LDR      r6,|L2.180|
000024  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;513          break;
000026  e033              B        |L2.144|
                  |L2.40|
;;;514        case 0x04:  /* HSE used as system clock source */
;;;515          SystemCoreClock = HSE_VALUE;
000028  4d23              LDR      r5,|L2.184|
00002a  4e22              LDR      r6,|L2.180|
00002c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;516          break;
00002e  e02f              B        |L2.144|
                  |L2.48|
;;;517        case 0x08:  /* PLL used as system clock source */
;;;518           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;519             SYSCLK = PLL_VCO / PLL_P
;;;520             */    
;;;521          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000030  4d1e              LDR      r5,|L2.172|
000032  1f2d              SUBS     r5,r5,#4
000034  682d              LDR      r5,[r5,#0]
000036  f3c55480          UBFX     r4,r5,#22,#1
;;;522          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00003a  4d1c              LDR      r5,|L2.172|
00003c  1f2d              SUBS     r5,r5,#4
00003e  682d              LDR      r5,[r5,#0]
000040  f005013f          AND      r1,r5,#0x3f
;;;523          
;;;524    #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx) || defined (STM32F401xx)
;;;525          if (pllsource != 0)
000044  b154              CBZ      r4,|L2.92|
;;;526          {
;;;527            /* HSE used as PLL clock source */
;;;528            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000046  4d1c              LDR      r5,|L2.184|
000048  fbb5f5f1          UDIV     r5,r5,r1
00004c  4e17              LDR      r6,|L2.172|
00004e  1f36              SUBS     r6,r6,#4
000050  6836              LDR      r6,[r6,#0]
000052  f3c61688          UBFX     r6,r6,#6,#9
000056  fb05f206          MUL      r2,r5,r6
00005a  e009              B        |L2.112|
                  |L2.92|
;;;529          }
;;;530          else
;;;531          {
;;;532            /* HSI used as PLL clock source */
;;;533            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
00005c  4d14              LDR      r5,|L2.176|
00005e  fbb5f5f1          UDIV     r5,r5,r1
000062  4e12              LDR      r6,|L2.172|
000064  1f36              SUBS     r6,r6,#4
000066  6836              LDR      r6,[r6,#0]
000068  f3c61688          UBFX     r6,r6,#6,#9
00006c  fb05f206          MUL      r2,r5,r6
                  |L2.112|
;;;534          }
;;;535    #elif defined (STM32F411xE)
;;;536    #if defined (USE_HSE_BYPASS)
;;;537          if (pllsource != 0)
;;;538          {
;;;539            /* HSE used as PLL clock source */
;;;540            pllvco = (HSE_BYPASS_INPUT_FREQUENCY / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;541          }  
;;;542    #else  
;;;543          if (pllsource == 0)
;;;544          {
;;;545            /* HSI used as PLL clock source */
;;;546            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;547          }  
;;;548    #endif /* USE_HSE_BYPASS */  
;;;549    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx */  
;;;550          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000070  4d0e              LDR      r5,|L2.172|
000072  1f2d              SUBS     r5,r5,#4
000074  682d              LDR      r5,[r5,#0]
000076  f3c54501          UBFX     r5,r5,#16,#2
00007a  1c6d              ADDS     r5,r5,#1
00007c  006b              LSLS     r3,r5,#1
;;;551          SystemCoreClock = pllvco/pllp;      
00007e  fbb2f5f3          UDIV     r5,r2,r3
000082  4e0c              LDR      r6,|L2.180|
000084  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;552          break;
000086  e003              B        |L2.144|
                  |L2.136|
;;;553        default:
;;;554          SystemCoreClock = HSI_VALUE;
000088  4d09              LDR      r5,|L2.176|
00008a  4e0a              LDR      r6,|L2.180|
00008c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;555          break;
00008e  bf00              NOP      
                  |L2.144|
000090  bf00              NOP                            ;513
;;;556      }
;;;557      /* Compute HCLK frequency --------------------------------------------------*/
;;;558      /* Get HCLK prescaler */
;;;559      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000092  4d06              LDR      r5,|L2.172|
000094  682d              LDR      r5,[r5,#0]
000096  f3c51503          UBFX     r5,r5,#4,#4
00009a  4e08              LDR      r6,|L2.188|
00009c  5d70              LDRB     r0,[r6,r5]
;;;560      /* HCLK frequency */
;;;561      SystemCoreClock >>= tmp;
00009e  4d05              LDR      r5,|L2.180|
0000a0  682d              LDR      r5,[r5,#0]  ; SystemCoreClock
0000a2  40c5              LSRS     r5,r5,r0
0000a4  4e03              LDR      r6,|L2.180|
0000a6  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;562    }
0000a8  bd70              POP      {r4-r6,pc}
;;;563    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L2.172|
                          DCD      0x40023808
                  |L2.176|
                          DCD      0x00f42400
                  |L2.180|
                          DCD      SystemCoreClock
                  |L2.184|
                          DCD      0x017d7840
                  |L2.188|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;424      */
;;;425    void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;426    {
;;;427      /* FPU settings ------------------------------------------------------------*/
;;;428      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;429        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000002  4815              LDR      r0,|L3.88|
000004  6800              LDR      r0,[r0,#0]
000006  f4400070          ORR      r0,r0,#0xf00000
00000a  4913              LDR      r1,|L3.88|
00000c  6008              STR      r0,[r1,#0]
;;;430      #endif
;;;431      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;432      /* Set HSION bit */
;;;433      RCC->CR |= (uint32_t)0x00000001;
00000e  4813              LDR      r0,|L3.92|
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  4911              LDR      r1,|L3.92|
000018  6008              STR      r0,[r1,#0]
;;;434    
;;;435      /* Reset CFGR register */
;;;436      RCC->CFGR = 0x00000000;
00001a  2000              MOVS     r0,#0
00001c  490f              LDR      r1,|L3.92|
00001e  3108              ADDS     r1,r1,#8
000020  6008              STR      r0,[r1,#0]
;;;437    
;;;438      /* Reset HSEON, CSSON and PLLON bits */
;;;439      RCC->CR &= (uint32_t)0xFEF6FFFF;
000022  480e              LDR      r0,|L3.92|
000024  6800              LDR      r0,[r0,#0]
000026  490e              LDR      r1,|L3.96|
000028  4008              ANDS     r0,r0,r1
00002a  490c              LDR      r1,|L3.92|
00002c  6008              STR      r0,[r1,#0]
;;;440    
;;;441      /* Reset PLLCFGR register */
;;;442      RCC->PLLCFGR = 0x24003010;
00002e  480d              LDR      r0,|L3.100|
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;443    
;;;444      /* Reset HSEBYP bit */
;;;445      RCC->CR &= (uint32_t)0xFFFBFFFF;
000034  1f08              SUBS     r0,r1,#4
000036  6800              LDR      r0,[r0,#0]
000038  f4202080          BIC      r0,r0,#0x40000
00003c  1f09              SUBS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
;;;446    
;;;447      /* Disable all interrupts */
;;;448      RCC->CIR = 0x00000000;
000040  2000              MOVS     r0,#0
000042  4906              LDR      r1,|L3.92|
000044  310c              ADDS     r1,r1,#0xc
000046  6008              STR      r0,[r1,#0]
;;;449    
;;;450    #if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
;;;451      SystemInit_ExtMemCtl(); 
;;;452    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;453             
;;;454      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;455         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;456      SetSysClock();
000048  f7fffffe          BL       SetSysClock
;;;457    
;;;458      /* Configure the Vector Table location add offset address ------------------*/
;;;459    #ifdef VECT_TAB_SRAM
;;;460      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;461    #else
;;;462      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00004c  f04f6000          MOV      r0,#0x8000000
000050  4901              LDR      r1,|L3.88|
000052  3980              SUBS     r1,r1,#0x80
000054  6008              STR      r0,[r1,#0]
;;;463    #endif
;;;464    }
000056  bd10              POP      {r4,pc}
;;;465    
                          ENDP

                  |L3.88|
                          DCD      0xe000ed88
                  |L3.92|
                          DCD      0x40023800
                  |L3.96|
                          DCD      0xfef6ffff
                  |L3.100|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "CMSIS\\system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 388 "CMSIS\\cmsis_armcc.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 402
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____RRX|
#line 587
|__asm___18_system_stm32f4xx_c_5d646a67____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
