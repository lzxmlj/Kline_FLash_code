; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\sram.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\sram.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\STM_Lib\inc -I.\USER -I.\CMSIS -I.\BoardHardware -I.\FATFS\src -I.\FATFS\exfuns -I.\MALLOC -I.\RTE\_407 -Ie:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Ie:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\sram.crf BoardHardware\sram.c]
                          THUMB

                          AREA ||i.FSMC_SRAM_Init||, CODE, READONLY, ALIGN=2

                  FSMC_SRAM_Init PROC
;;;24     //初始化外部SRAM
;;;25     void FSMC_SRAM_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;26     {
;;;27     	RCC->AHB1ENR|=0XF<<3;    	//使能PD,PE,PF,PG时钟  
000002  4894              LDR      r0,|L1.596|
000004  6800              LDR      r0,[r0,#0]
000006  f0400078          ORR      r0,r0,#0x78
00000a  4992              LDR      r1,|L1.596|
00000c  6008              STR      r0,[r1,#0]
;;;28     	RCC->AHB3ENR|=1<<0;     	//使能FSMC时钟  
00000e  4891              LDR      r0,|L1.596|
000010  3008              ADDS     r0,r0,#8
000012  6800              LDR      r0,[r0,#0]
000014  f0400001          ORR      r0,r0,#1
000018  498e              LDR      r1,|L1.596|
00001a  3108              ADDS     r1,r1,#8
00001c  6008              STR      r0,[r1,#0]
;;;29     	 
;;;30      	GPIO_AF_Set(GPIOG,10,12);	//PG10,AF12(CS放到最前面,防止复位后CS非法变低,破坏原有数据) 
00001e  220c              MOVS     r2,#0xc
000020  210a              MOVS     r1,#0xa
000022  488d              LDR      r0,|L1.600|
000024  f7fffffe          BL       GPIO_AF_Set
;;;31     	
;;;32     	GPIO_Set(GPIOD,(3<<0)|(3<<4)|(0XFF<<8),GPIO_MODE_AF,GPIO_OTYPE_PP,GPIO_SPEED_100M,GPIO_PUPD_PU);	//PD0,1,4,5,8~15 AF OUT
000028  2001              MOVS     r0,#1
00002a  2103              MOVS     r1,#3
00002c  2300              MOVS     r3,#0
00002e  2202              MOVS     r2,#2
000030  e9cd1000          STRD     r1,r0,[sp,#0]
000034  f64f7133          MOV      r1,#0xff33
000038  4888              LDR      r0,|L1.604|
00003a  f7fffffe          BL       GPIO_Set
;;;33      	GPIO_Set(GPIOE,(3<<0)|(0X1FF<<7),GPIO_MODE_AF,GPIO_OTYPE_PP,GPIO_SPEED_100M,GPIO_PUPD_PU);			//PE0,1,7~15,AF OUT
00003e  2001              MOVS     r0,#1
000040  2103              MOVS     r1,#3
000042  2300              MOVS     r3,#0
000044  2202              MOVS     r2,#2
000046  e9cd1000          STRD     r1,r0,[sp,#0]
00004a  f64f7183          MOV      r1,#0xff83
00004e  4884              LDR      r0,|L1.608|
000050  f7fffffe          BL       GPIO_Set
;;;34     	GPIO_Set(GPIOF,(0X3F<<0)|(0XF<<12),GPIO_MODE_AF,GPIO_OTYPE_PP,GPIO_SPEED_100M,GPIO_PUPD_PU); 	 	//PF0~5,12~15
000054  2001              MOVS     r0,#1
000056  2103              MOVS     r1,#3
000058  2300              MOVS     r3,#0
00005a  2202              MOVS     r2,#2
00005c  e9cd1000          STRD     r1,r0,[sp,#0]
000060  f24f013f          MOV      r1,#0xf03f
000064  487f              LDR      r0,|L1.612|
000066  f7fffffe          BL       GPIO_Set
;;;35     	GPIO_Set(GPIOG,(0X3F<<0)|PIN10,GPIO_MODE_AF,GPIO_OTYPE_PP,GPIO_SPEED_100M,GPIO_PUPD_PU);	 		//PG0~5,10
00006a  2001              MOVS     r0,#1
00006c  2103              MOVS     r1,#3
00006e  2300              MOVS     r3,#0
000070  2202              MOVS     r2,#2
000072  e9cd1000          STRD     r1,r0,[sp,#0]
000076  f240413f          MOV      r1,#0x43f
00007a  4877              LDR      r0,|L1.600|
00007c  f7fffffe          BL       GPIO_Set
;;;36      
;;;37     	
;;;38     	GPIO_AF_Set(GPIOD,0,12);	//PD0,AF12
000080  220c              MOVS     r2,#0xc
000082  2100              MOVS     r1,#0
000084  4875              LDR      r0,|L1.604|
000086  f7fffffe          BL       GPIO_AF_Set
;;;39      	GPIO_AF_Set(GPIOD,1,12);	//PD1,AF12
00008a  220c              MOVS     r2,#0xc
00008c  2101              MOVS     r1,#1
00008e  4873              LDR      r0,|L1.604|
000090  f7fffffe          BL       GPIO_AF_Set
;;;40      	GPIO_AF_Set(GPIOD,4,12);	//PD4,AF12
000094  220c              MOVS     r2,#0xc
000096  2104              MOVS     r1,#4
000098  4870              LDR      r0,|L1.604|
00009a  f7fffffe          BL       GPIO_AF_Set
;;;41      	GPIO_AF_Set(GPIOD,5,12);	//PD5,AF12 
00009e  220c              MOVS     r2,#0xc
0000a0  2105              MOVS     r1,#5
0000a2  486e              LDR      r0,|L1.604|
0000a4  f7fffffe          BL       GPIO_AF_Set
;;;42      	GPIO_AF_Set(GPIOD,8,12);	//PD8,AF12
0000a8  220c              MOVS     r2,#0xc
0000aa  2108              MOVS     r1,#8
0000ac  486b              LDR      r0,|L1.604|
0000ae  f7fffffe          BL       GPIO_AF_Set
;;;43      	GPIO_AF_Set(GPIOD,9,12);	//PD9,AF12
0000b2  220c              MOVS     r2,#0xc
0000b4  2109              MOVS     r1,#9
0000b6  4869              LDR      r0,|L1.604|
0000b8  f7fffffe          BL       GPIO_AF_Set
;;;44      	GPIO_AF_Set(GPIOD,10,12);	//PD10,AF12 
0000bc  220c              MOVS     r2,#0xc
0000be  210a              MOVS     r1,#0xa
0000c0  4866              LDR      r0,|L1.604|
0000c2  f7fffffe          BL       GPIO_AF_Set
;;;45      	GPIO_AF_Set(GPIOD,11,12);	//PD11,AF12 
0000c6  220c              MOVS     r2,#0xc
0000c8  210b              MOVS     r1,#0xb
0000ca  4864              LDR      r0,|L1.604|
0000cc  f7fffffe          BL       GPIO_AF_Set
;;;46      	GPIO_AF_Set(GPIOD,12,12);	//PD12,AF12 
0000d0  220c              MOVS     r2,#0xc
0000d2  4611              MOV      r1,r2
0000d4  4861              LDR      r0,|L1.604|
0000d6  f7fffffe          BL       GPIO_AF_Set
;;;47      	GPIO_AF_Set(GPIOD,13,12);	//PD13,AF12 
0000da  220c              MOVS     r2,#0xc
0000dc  210d              MOVS     r1,#0xd
0000de  485f              LDR      r0,|L1.604|
0000e0  f7fffffe          BL       GPIO_AF_Set
;;;48      	GPIO_AF_Set(GPIOD,14,12);	//PD14,AF12
0000e4  220c              MOVS     r2,#0xc
0000e6  210e              MOVS     r1,#0xe
0000e8  485c              LDR      r0,|L1.604|
0000ea  f7fffffe          BL       GPIO_AF_Set
;;;49      	GPIO_AF_Set(GPIOD,15,12);	//PD15,AF12
0000ee  220c              MOVS     r2,#0xc
0000f0  210f              MOVS     r1,#0xf
0000f2  485a              LDR      r0,|L1.604|
0000f4  f7fffffe          BL       GPIO_AF_Set
;;;50     	
;;;51      	GPIO_AF_Set(GPIOE,0,12);	//PE0,AF12
0000f8  220c              MOVS     r2,#0xc
0000fa  2100              MOVS     r1,#0
0000fc  4858              LDR      r0,|L1.608|
0000fe  f7fffffe          BL       GPIO_AF_Set
;;;52      	GPIO_AF_Set(GPIOE,1,12);	//PE1,AF12
000102  220c              MOVS     r2,#0xc
000104  2101              MOVS     r1,#1
000106  4856              LDR      r0,|L1.608|
000108  f7fffffe          BL       GPIO_AF_Set
;;;53      	GPIO_AF_Set(GPIOE,7,12);	//PE7,AF12
00010c  220c              MOVS     r2,#0xc
00010e  2107              MOVS     r1,#7
000110  4853              LDR      r0,|L1.608|
000112  f7fffffe          BL       GPIO_AF_Set
;;;54      	GPIO_AF_Set(GPIOE,8,12);	//PE8,AF12
000116  220c              MOVS     r2,#0xc
000118  2108              MOVS     r1,#8
00011a  4851              LDR      r0,|L1.608|
00011c  f7fffffe          BL       GPIO_AF_Set
;;;55      	GPIO_AF_Set(GPIOE,9,12);	//PE9,AF12
000120  220c              MOVS     r2,#0xc
000122  2109              MOVS     r1,#9
000124  484e              LDR      r0,|L1.608|
000126  f7fffffe          BL       GPIO_AF_Set
;;;56      	GPIO_AF_Set(GPIOE,10,12);	//PE10,AF12
00012a  220c              MOVS     r2,#0xc
00012c  210a              MOVS     r1,#0xa
00012e  484c              LDR      r0,|L1.608|
000130  f7fffffe          BL       GPIO_AF_Set
;;;57      	GPIO_AF_Set(GPIOE,11,12);	//PE11,AF12
000134  220c              MOVS     r2,#0xc
000136  210b              MOVS     r1,#0xb
000138  4849              LDR      r0,|L1.608|
00013a  f7fffffe          BL       GPIO_AF_Set
;;;58      	GPIO_AF_Set(GPIOE,12,12);	//PE12,AF12
00013e  220c              MOVS     r2,#0xc
000140  4611              MOV      r1,r2
000142  4847              LDR      r0,|L1.608|
000144  f7fffffe          BL       GPIO_AF_Set
;;;59      	GPIO_AF_Set(GPIOE,13,12);	//PE13,AF12
000148  220c              MOVS     r2,#0xc
00014a  210d              MOVS     r1,#0xd
00014c  4844              LDR      r0,|L1.608|
00014e  f7fffffe          BL       GPIO_AF_Set
;;;60      	GPIO_AF_Set(GPIOE,14,12);	//PE14,AF12
000152  220c              MOVS     r2,#0xc
000154  210e              MOVS     r1,#0xe
000156  4842              LDR      r0,|L1.608|
000158  f7fffffe          BL       GPIO_AF_Set
;;;61      	GPIO_AF_Set(GPIOE,15,12);	//PE15,AF12
00015c  220c              MOVS     r2,#0xc
00015e  210f              MOVS     r1,#0xf
000160  483f              LDR      r0,|L1.608|
000162  f7fffffe          BL       GPIO_AF_Set
;;;62     	
;;;63      	GPIO_AF_Set(GPIOF,0,12);	//PF0,AF12
000166  220c              MOVS     r2,#0xc
000168  2100              MOVS     r1,#0
00016a  483e              LDR      r0,|L1.612|
00016c  f7fffffe          BL       GPIO_AF_Set
;;;64      	GPIO_AF_Set(GPIOF,1,12);	//PF1,AF12
000170  220c              MOVS     r2,#0xc
000172  2101              MOVS     r1,#1
000174  483b              LDR      r0,|L1.612|
000176  f7fffffe          BL       GPIO_AF_Set
;;;65      	GPIO_AF_Set(GPIOF,2,12);	//PF2,AF12
00017a  220c              MOVS     r2,#0xc
00017c  2102              MOVS     r1,#2
00017e  4839              LDR      r0,|L1.612|
000180  f7fffffe          BL       GPIO_AF_Set
;;;66      	GPIO_AF_Set(GPIOF,3,12);	//PF3,AF12
000184  220c              MOVS     r2,#0xc
000186  2103              MOVS     r1,#3
000188  4836              LDR      r0,|L1.612|
00018a  f7fffffe          BL       GPIO_AF_Set
;;;67      	GPIO_AF_Set(GPIOF,4,12);	//PF4,AF12
00018e  220c              MOVS     r2,#0xc
000190  2104              MOVS     r1,#4
000192  4834              LDR      r0,|L1.612|
000194  f7fffffe          BL       GPIO_AF_Set
;;;68      	GPIO_AF_Set(GPIOF,5,12);	//PF5,AF12
000198  220c              MOVS     r2,#0xc
00019a  2105              MOVS     r1,#5
00019c  4831              LDR      r0,|L1.612|
00019e  f7fffffe          BL       GPIO_AF_Set
;;;69      	GPIO_AF_Set(GPIOF,12,12);	//PF12,AF12
0001a2  220c              MOVS     r2,#0xc
0001a4  4611              MOV      r1,r2
0001a6  482f              LDR      r0,|L1.612|
0001a8  f7fffffe          BL       GPIO_AF_Set
;;;70      	GPIO_AF_Set(GPIOF,13,12);	//PF13,AF12
0001ac  220c              MOVS     r2,#0xc
0001ae  210d              MOVS     r1,#0xd
0001b0  482c              LDR      r0,|L1.612|
0001b2  f7fffffe          BL       GPIO_AF_Set
;;;71      	GPIO_AF_Set(GPIOF,14,12);	//PF14,AF12
0001b6  220c              MOVS     r2,#0xc
0001b8  210e              MOVS     r1,#0xe
0001ba  482a              LDR      r0,|L1.612|
0001bc  f7fffffe          BL       GPIO_AF_Set
;;;72      	GPIO_AF_Set(GPIOF,15,12);	//PF15,AF12
0001c0  220c              MOVS     r2,#0xc
0001c2  210f              MOVS     r1,#0xf
0001c4  4827              LDR      r0,|L1.612|
0001c6  f7fffffe          BL       GPIO_AF_Set
;;;73     	
;;;74      	GPIO_AF_Set(GPIOG,0,12);	//PG0,AF12
0001ca  220c              MOVS     r2,#0xc
0001cc  2100              MOVS     r1,#0
0001ce  4822              LDR      r0,|L1.600|
0001d0  f7fffffe          BL       GPIO_AF_Set
;;;75      	GPIO_AF_Set(GPIOG,1,12);	//PG1,AF12
0001d4  220c              MOVS     r2,#0xc
0001d6  2101              MOVS     r1,#1
0001d8  481f              LDR      r0,|L1.600|
0001da  f7fffffe          BL       GPIO_AF_Set
;;;76      	GPIO_AF_Set(GPIOG,2,12);	//PG2,AF12
0001de  220c              MOVS     r2,#0xc
0001e0  2102              MOVS     r1,#2
0001e2  481d              LDR      r0,|L1.600|
0001e4  f7fffffe          BL       GPIO_AF_Set
;;;77      	GPIO_AF_Set(GPIOG,3,12);	//PG3,AF12
0001e8  220c              MOVS     r2,#0xc
0001ea  2103              MOVS     r1,#3
0001ec  481a              LDR      r0,|L1.600|
0001ee  f7fffffe          BL       GPIO_AF_Set
;;;78      	GPIO_AF_Set(GPIOG,4,12);	//PG4,AF12
0001f2  220c              MOVS     r2,#0xc
0001f4  2104              MOVS     r1,#4
0001f6  4818              LDR      r0,|L1.600|
0001f8  f7fffffe          BL       GPIO_AF_Set
;;;79      	GPIO_AF_Set(GPIOG,5,12);	//PG5,AF12 	
0001fc  220c              MOVS     r2,#0xc
0001fe  2105              MOVS     r1,#5
000200  4815              LDR      r0,|L1.600|
000202  f7fffffe          BL       GPIO_AF_Set
;;;80     	
;;;81     	//寄存器清零
;;;82     	//bank1有NE1~4,每一个有一个BCR+TCR，所以总共八个寄存器。
;;;83     	//这里我们使用NE3 ，也就对应BTCR[4],[5]。				    
;;;84     	FSMC_Bank1->BTCR[4]=0X00000000;
000206  2000              MOVS     r0,#0
000208  f04f4120          MOV      r1,#0xa0000000
00020c  6108              STR      r0,[r1,#0x10]
;;;85     	FSMC_Bank1->BTCR[5]=0X00000000;
00020e  6148              STR      r0,[r1,#0x14]
;;;86     	FSMC_Bank1E->BWTR[4]=0X00000000;
000210  4915              LDR      r1,|L1.616|
000212  6008              STR      r0,[r1,#0]
;;;87     	//操作BCR寄存器	使用异步模式,模式A(读写共用一个时序寄存器)
;;;88     	//BTCR[偶数]:BCR寄存器;BTCR[奇数]:BTR寄存器
;;;89     	FSMC_Bank1->BTCR[4]|=1<<12;//存储器写使能
000214  06c8              LSLS     r0,r1,#27
000216  6900              LDR      r0,[r0,#0x10]
000218  f4405080          ORR      r0,r0,#0x1000
00021c  06c9              LSLS     r1,r1,#27
00021e  6108              STR      r0,[r1,#0x10]
;;;90     	FSMC_Bank1->BTCR[4]|=1<<4; //存储器数据宽度为16bit 	    
000220  4608              MOV      r0,r1
000222  6900              LDR      r0,[r0,#0x10]
000224  f0400010          ORR      r0,r0,#0x10
000228  6108              STR      r0,[r1,#0x10]
;;;91     	//操作BTR寄存器			（HCLK=168M, 1个HCLK=6ns			    
;;;92     	FSMC_Bank1->BTCR[5]|=8<<8; //数据保持时间（DATAST）为9个HCLK 6*9=54ns	 	 
00022a  4608              MOV      r0,r1
00022c  6940              LDR      r0,[r0,#0x14]
00022e  f4406000          ORR      r0,r0,#0x800
000232  6148              STR      r0,[r1,#0x14]
;;;93     	FSMC_Bank1->BTCR[5]|=0<<4; //地址保持时间（ADDHLD）未用到	  	 
000234  4608              MOV      r0,r1
000236  6940              LDR      r0,[r0,#0x14]
000238  6148              STR      r0,[r1,#0x14]
;;;94     	FSMC_Bank1->BTCR[5]|=0<<0; //地址建立时间（ADDSET）为0个HCLK 0ns	 	 
00023a  4608              MOV      r0,r1
00023c  6940              LDR      r0,[r0,#0x14]
00023e  6148              STR      r0,[r1,#0x14]
;;;95     	//闪存写时序寄存器  
;;;96     	FSMC_Bank1E->BWTR[4]=0x0FFFFFFF;//默认值
000240  f06f4070          MVN      r0,#0xf0000000
000244  f8c10114          STR      r0,[r1,#0x114]
;;;97     	//使能BANK1区域3
;;;98     	FSMC_Bank1->BTCR[4]|=1<<0; 	
000248  4608              MOV      r0,r1
00024a  6900              LDR      r0,[r0,#0x10]
00024c  f0400001          ORR      r0,r0,#1
000250  6108              STR      r0,[r1,#0x10]
;;;99     } 														  
000252  bd1c              POP      {r2-r4,pc}
;;;100    //在指定地址(WriteAddr+Bank1_SRAM3_ADDR)开始,连续写入n个字节.
                          ENDP

                  |L1.596|
                          DCD      0x40023830
                  |L1.600|
                          DCD      0x40021800
                  |L1.604|
                          DCD      0x40020c00
                  |L1.608|
                          DCD      0x40021000
                  |L1.612|
                          DCD      0x40021400
                  |L1.616|
                          DCD      0xa0000114

                          AREA ||i.FSMC_SRAM_ReadBuffer||, CODE, READONLY, ALIGN=1

                  FSMC_SRAM_ReadBuffer PROC
;;;116    //n:要写入的字节数
;;;117    void FSMC_SRAM_ReadBuffer(u8* pBuffer,u32 ReadAddr,u32 n)
000000  e006              B        |L2.16|
                  |L2.2|
;;;118    {
;;;119    	for(;n!=0;n--)  
;;;120    	{											    
;;;121    		*pBuffer++=*(vu8*)(Bank1_SRAM3_ADDR+ReadAddr);    
000002  f04f43d0          MOV      r3,#0x68000000
000006  5c5b              LDRB     r3,[r3,r1]
000008  f8003b01          STRB     r3,[r0],#1
;;;122    		ReadAddr++;
00000c  1c49              ADDS     r1,r1,#1
00000e  1e52              SUBS     r2,r2,#1              ;119
                  |L2.16|
000010  2a00              CMP      r2,#0                 ;119
000012  d1f6              BNE      |L2.2|
;;;123    	}  
;;;124    } 
000014  4770              BX       lr
;;;125    ////////////////////////////////////////////////////////////////////////////////////////
                          ENDP


                          AREA ||i.FSMC_SRAM_WriteBuffer||, CODE, READONLY, ALIGN=1

                  FSMC_SRAM_WriteBuffer PROC
;;;103    //n:要写入的字节数
;;;104    void FSMC_SRAM_WriteBuffer(u8* pBuffer,u32 WriteAddr,u32 n)
000000  b510              PUSH     {r4,lr}
;;;105    {
;;;106    	for(;n!=0;n--)  
000002  e006              B        |L3.18|
                  |L3.4|
;;;107    	{										    
;;;108    		*(vu8*)(Bank1_SRAM3_ADDR+WriteAddr)=*pBuffer;	  
000004  7804              LDRB     r4,[r0,#0]
000006  f04f43d0          MOV      r3,#0x68000000
00000a  545c              STRB     r4,[r3,r1]
;;;109    		WriteAddr++;
00000c  1c49              ADDS     r1,r1,#1
;;;110    		pBuffer++;
00000e  1c40              ADDS     r0,r0,#1
000010  1e52              SUBS     r2,r2,#1              ;106
                  |L3.18|
000012  2a00              CMP      r2,#0                 ;106
000014  d1f6              BNE      |L3.4|
;;;111    	}   
;;;112    }																			    
000016  bd10              POP      {r4,pc}
;;;113    //在指定地址((WriteAddr+Bank1_SRAM3_ADDR))开始,连续读出n个字节.
                          ENDP


                          AREA ||i.fsmc_sram_test_read||, CODE, READONLY, ALIGN=1

                  fsmc_sram_test_read PROC
;;;136    //返回值:读取到的数据
;;;137    u8 fsmc_sram_test_read(u32 addr)
000000  b518              PUSH     {r3,r4,lr}
;;;138    {
000002  4604              MOV      r4,r0
;;;139    	u8 data;
;;;140    	FSMC_SRAM_ReadBuffer(&data,addr,1);
000004  2201              MOVS     r2,#1
000006  4621              MOV      r1,r4
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       FSMC_SRAM_ReadBuffer
;;;141    	return data;
00000e  f89d0000          LDRB     r0,[sp,#0]
;;;142    }
000012  bd18              POP      {r3,r4,pc}
;;;143    
                          ENDP


                          AREA ||i.fsmc_sram_test_write||, CODE, READONLY, ALIGN=1

                  fsmc_sram_test_write PROC
;;;129    //data:要写入的数据
;;;130    void fsmc_sram_test_write(u32 addr,u8 data)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;131    {			   
000002  4604              MOV      r4,r0
;;;132    	FSMC_SRAM_WriteBuffer(&data,addr,1);//写入1个字节
000004  2201              MOVS     r2,#1
000006  4621              MOV      r1,r4
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       FSMC_SRAM_WriteBuffer
;;;133    }
00000e  bd1c              POP      {r2-r4,pc}
;;;134    //读取1个字节
                          ENDP


;*** Start embedded assembler ***

#line 1 "BoardHardware\\sram.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_sram_c_85dea831____REV16|
#line 388 ".\\CMSIS\\cmsis_armcc.h"
|__asm___6_sram_c_85dea831____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_sram_c_85dea831____REVSH|
#line 402
|__asm___6_sram_c_85dea831____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_sram_c_85dea831____RRX|
#line 587
|__asm___6_sram_c_85dea831____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
