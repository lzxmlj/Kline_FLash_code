; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\sdio_sdcard.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\sdio_sdcard.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\STM_Lib\inc -I.\USER -I.\CMSIS -I.\BoardHardware -I.\FATFS\src -I.\FATFS\exfuns -I.\MALLOC -I.\RTE\_407 -Ie:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Ie:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\sdio_sdcard.crf USER\sdio_sdcard.c]
                          THUMB

                          AREA ||i.CmdError||, CODE, READONLY, ALIGN=2

                  CmdError PROC
;;;943    //返回值:sd卡错误码
;;;944    SD_Error CmdError(void)
000000  2200              MOVS     r2,#0
;;;945    {
;;;946    	SD_Error errorstatus = SD_OK;
;;;947    	u32 timeout=SDIO_CMD0TIMEOUT;	   
000002  f44f3180          MOV      r1,#0x10000
;;;948    	while(timeout--)
000006  e005              B        |L1.20|
                  |L1.8|
;;;949    	{
;;;950    		if(SDIO->STA&(1<<7))break;	//命令已发送(无需响应)	 
000008  480a              LDR      r0,|L1.52|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0000080          AND      r0,r0,#0x80
000010  b100              CBZ      r0,|L1.20|
000012  e003              B        |L1.28|
                  |L1.20|
000014  1e08              SUBS     r0,r1,#0              ;948
000016  f1a10101          SUB      r1,r1,#1              ;948
00001a  d1f5              BNE      |L1.8|
                  |L1.28|
00001c  bf00              NOP      
;;;951    	}	    
;;;952    	if(timeout==0)return SD_CMD_RSP_TIMEOUT;  
00001e  b909              CBNZ     r1,|L1.36|
000020  2003              MOVS     r0,#3
                  |L1.34|
;;;953    	SDIO->ICR=0X5FF;				//清除标记
;;;954    	return errorstatus;
;;;955    }	 
000022  4770              BX       lr
                  |L1.36|
000024  f24050ff          MOV      r0,#0x5ff             ;953
000028  4b02              LDR      r3,|L1.52|
00002a  1d1b              ADDS     r3,r3,#4              ;953
00002c  6018              STR      r0,[r3,#0]            ;953
00002e  4610              MOV      r0,r2                 ;954
000030  e7f7              B        |L1.34|
;;;956    //检查R7响应的错误状态
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0x40012c34

                          AREA ||i.CmdResp1Error||, CODE, READONLY, ALIGN=2

                  CmdResp1Error PROC
;;;983    //返回值:sd卡错误码
;;;984    SD_Error CmdResp1Error(u8 cmd)
000000  4602              MOV      r2,r0
;;;985    {	  
;;;986       	u32 status; 
;;;987    	while(1)
000002  e005              B        |L2.16|
                  |L2.4|
;;;988    	{
;;;989    		status=SDIO->STA;
000004  4815              LDR      r0,|L2.92|
000006  6801              LDR      r1,[r0,#0]
;;;990    		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)
000008  f0010045          AND      r0,r1,#0x45
00000c  b100              CBZ      r0,|L2.16|
00000e  e000              B        |L2.18|
                  |L2.16|
000010  e7f8              B        |L2.4|
                  |L2.18|
000012  bf00              NOP      
;;;991    	} 
;;;992    	if(status&(1<<2))					//响应超时
000014  f0010004          AND      r0,r1,#4
000018  b128              CBZ      r0,|L2.38|
;;;993    	{																				    
;;;994     		SDIO->ICR=1<<2;					//清除命令响应超时标志
00001a  2004              MOVS     r0,#4
00001c  4b0f              LDR      r3,|L2.92|
00001e  1d1b              ADDS     r3,r3,#4
000020  6018              STR      r0,[r3,#0]
;;;995    		return SD_CMD_RSP_TIMEOUT;
000022  2003              MOVS     r0,#3
                  |L2.36|
;;;996    	}	
;;;997     	if(status&(1<<0))					//CRC错误
;;;998    	{																				    
;;;999     		SDIO->ICR=1<<0;					//清除标志
;;;1000   		return SD_CMD_CRC_FAIL;
;;;1001   	}		
;;;1002   	if(SDIO->RESPCMD!=cmd)return SD_ILLEGAL_CMD;//命令不匹配 
;;;1003     	SDIO->ICR=0X5FF;	 				//清除标记
;;;1004   	return (SD_Error)(SDIO->RESP1&SD_OCR_ERRORBITS);//返回卡响应
;;;1005   }
000024  4770              BX       lr
                  |L2.38|
000026  f0010001          AND      r0,r1,#1              ;997
00002a  b120              CBZ      r0,|L2.54|
00002c  2001              MOVS     r0,#1                 ;999
00002e  4b0b              LDR      r3,|L2.92|
000030  1d1b              ADDS     r3,r3,#4              ;999
000032  6018              STR      r0,[r3,#0]            ;999
000034  e7f6              B        |L2.36|
                  |L2.54|
000036  4809              LDR      r0,|L2.92|
000038  3824              SUBS     r0,r0,#0x24           ;1002
00003a  6800              LDR      r0,[r0,#0]            ;1002
00003c  4290              CMP      r0,r2                 ;1002
00003e  d001              BEQ      |L2.68|
000040  2010              MOVS     r0,#0x10              ;1002
000042  e7ef              B        |L2.36|
                  |L2.68|
000044  f24050ff          MOV      r0,#0x5ff             ;1003
000048  4b04              LDR      r3,|L2.92|
00004a  1d1b              ADDS     r3,r3,#4              ;1003
00004c  6018              STR      r0,[r3,#0]            ;1003
00004e  4803              LDR      r0,|L2.92|
000050  3820              SUBS     r0,r0,#0x20           ;1004
000052  6800              LDR      r0,[r0,#0]            ;1004
000054  2308              MOVS     r3,#8                 ;1004
000056  4018              ANDS     r0,r0,r3              ;1004
000058  b2c0              UXTB     r0,r0                 ;1004
00005a  e7e3              B        |L2.36|
;;;1006   //检查R3响应的错误状态
                          ENDP

                  |L2.92|
                          DCD      0x40012c34

                          AREA ||i.CmdResp2Error||, CODE, READONLY, ALIGN=2

                  CmdResp2Error PROC
;;;1025   //返回值:错误状态
;;;1026   SD_Error CmdResp2Error(void)
000000  b510              PUSH     {r4,lr}
;;;1027   {
;;;1028   	SD_Error errorstatus=SD_OK;
000002  2000              MOVS     r0,#0
;;;1029   	u32 status;
;;;1030   	u32 timeout=SDIO_CMD0TIMEOUT;
000004  f44f3280          MOV      r2,#0x10000
;;;1031    	while(timeout--)
000008  e005              B        |L3.22|
                  |L3.10|
;;;1032   	{
;;;1033   		status=SDIO->STA;
00000a  4b16              LDR      r3,|L3.100|
00000c  6819              LDR      r1,[r3,#0]
;;;1034   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
00000e  f0010345          AND      r3,r1,#0x45
000012  b103              CBZ      r3,|L3.22|
000014  e003              B        |L3.30|
                  |L3.22|
000016  1e13              SUBS     r3,r2,#0              ;1031
000018  f1a20201          SUB      r2,r2,#1              ;1031
00001c  d1f5              BNE      |L3.10|
                  |L3.30|
00001e  bf00              NOP      
;;;1035   	}
;;;1036     	if((timeout==0)||(status&(1<<2)))	//响应超时
000020  b112              CBZ      r2,|L3.40|
000022  f0010304          AND      r3,r1,#4
000026  b14b              CBZ      r3,|L3.60|
                  |L3.40|
;;;1037   	{																				    
;;;1038   		errorstatus=SD_CMD_RSP_TIMEOUT; 
000028  2003              MOVS     r0,#3
;;;1039   		SDIO->ICR|=1<<2;				//清除命令响应超时标志
00002a  4b0e              LDR      r3,|L3.100|
00002c  1d1b              ADDS     r3,r3,#4
00002e  681b              LDR      r3,[r3,#0]
000030  f0430304          ORR      r3,r3,#4
000034  4c0b              LDR      r4,|L3.100|
000036  1d24              ADDS     r4,r4,#4
000038  6023              STR      r3,[r4,#0]
                  |L3.58|
;;;1040   		return errorstatus;
;;;1041   	}	 
;;;1042   	if(status&1<<0)						//CRC错误
;;;1043   	{								   
;;;1044   		errorstatus=SD_CMD_CRC_FAIL;
;;;1045   		SDIO->ICR|=1<<0;				//清除响应标志
;;;1046    	}
;;;1047   	SDIO->ICR=0X5FF;	 				//清除标记
;;;1048    	return errorstatus;								    		 
;;;1049   } 
00003a  bd10              POP      {r4,pc}
                  |L3.60|
00003c  f0010301          AND      r3,r1,#1              ;1042
000040  b143              CBZ      r3,|L3.84|
000042  2001              MOVS     r0,#1                 ;1044
000044  4b07              LDR      r3,|L3.100|
000046  1d1b              ADDS     r3,r3,#4              ;1045
000048  681b              LDR      r3,[r3,#0]            ;1045
00004a  f0430301          ORR      r3,r3,#1              ;1045
00004e  4c05              LDR      r4,|L3.100|
000050  1d24              ADDS     r4,r4,#4              ;1045
000052  6023              STR      r3,[r4,#0]            ;1045
                  |L3.84|
000054  f24053ff          MOV      r3,#0x5ff             ;1047
000058  4c02              LDR      r4,|L3.100|
00005a  1d24              ADDS     r4,r4,#4              ;1047
00005c  6023              STR      r3,[r4,#0]            ;1047
00005e  bf00              NOP                            ;1048
000060  e7eb              B        |L3.58|
;;;1050   //检查R6响应的错误状态
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      0x40012c34

                          AREA ||i.CmdResp3Error||, CODE, READONLY, ALIGN=2

                  CmdResp3Error PROC
;;;1007   //返回值:错误状态
;;;1008   SD_Error CmdResp3Error(void)
000000  e005              B        |L4.14|
                  |L4.2|
;;;1009   {
;;;1010   	u32 status;						 
;;;1011    	while(1)
;;;1012   	{
;;;1013   		status=SDIO->STA;
000002  480e              LDR      r0,|L4.60|
000004  6801              LDR      r1,[r0,#0]
;;;1014   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
000006  f0010045          AND      r0,r1,#0x45
00000a  b100              CBZ      r0,|L4.14|
00000c  e000              B        |L4.16|
                  |L4.14|
00000e  e7f8              B        |L4.2|
                  |L4.16|
000010  bf00              NOP      
;;;1015   	}
;;;1016    	if(status&(1<<2))					//响应超时
000012  f0010004          AND      r0,r1,#4
000016  b148              CBZ      r0,|L4.44|
;;;1017   	{											 
;;;1018   		SDIO->ICR|=1<<2;				//清除命令响应超时标志
000018  4808              LDR      r0,|L4.60|
00001a  1d00              ADDS     r0,r0,#4
00001c  6800              LDR      r0,[r0,#0]
00001e  f0400004          ORR      r0,r0,#4
000022  4a06              LDR      r2,|L4.60|
000024  1d12              ADDS     r2,r2,#4
000026  6010              STR      r0,[r2,#0]
;;;1019   		return SD_CMD_RSP_TIMEOUT;
000028  2003              MOVS     r0,#3
                  |L4.42|
;;;1020   	}	 
;;;1021      	SDIO->ICR=0X5FF;	 				//清除标记
;;;1022    	return SD_OK;								  
;;;1023   }
00002a  4770              BX       lr
                  |L4.44|
00002c  f24050ff          MOV      r0,#0x5ff             ;1021
000030  4a02              LDR      r2,|L4.60|
000032  1d12              ADDS     r2,r2,#4              ;1021
000034  6010              STR      r0,[r2,#0]            ;1021
000036  2000              MOVS     r0,#0                 ;1022
000038  e7f7              B        |L4.42|
;;;1024   //检查R2响应的错误状态
                          ENDP

00003a  0000              DCW      0x0000
                  |L4.60|
                          DCD      0x40012c34

                          AREA ||i.CmdResp6Error||, CODE, READONLY, ALIGN=2

                  CmdResp6Error PROC
;;;1053   //返回值:错误状态
;;;1054   SD_Error CmdResp6Error(u8 cmd,u16*prca)
000000  b570              PUSH     {r4-r6,lr}
;;;1055   {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;1056   	SD_Error errorstatus=SD_OK;
000006  2500              MOVS     r5,#0
;;;1057   	u32 status;					    
;;;1058   	u32 rspr1;
;;;1059    	while(1)
000008  e005              B        |L5.22|
                  |L5.10|
;;;1060   	{
;;;1061   		status=SDIO->STA;
00000a  4824              LDR      r0,|L5.156|
00000c  6802              LDR      r2,[r0,#0]
;;;1062   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
00000e  f0020045          AND      r0,r2,#0x45
000012  b100              CBZ      r0,|L5.22|
000014  e000              B        |L5.24|
                  |L5.22|
000016  e7f8              B        |L5.10|
                  |L5.24|
000018  bf00              NOP      
;;;1063   	}
;;;1064   	if(status&(1<<2))					//响应超时
00001a  f0020004          AND      r0,r2,#4
00001e  b148              CBZ      r0,|L5.52|
;;;1065   	{																				    
;;;1066    		SDIO->ICR|=1<<2;				//清除命令响应超时标志
000020  481e              LDR      r0,|L5.156|
000022  1d00              ADDS     r0,r0,#4
000024  6800              LDR      r0,[r0,#0]
000026  f0400004          ORR      r0,r0,#4
00002a  4e1c              LDR      r6,|L5.156|
00002c  1d36              ADDS     r6,r6,#4
00002e  6030              STR      r0,[r6,#0]
;;;1067   		return SD_CMD_RSP_TIMEOUT;
000030  2003              MOVS     r0,#3
                  |L5.50|
;;;1068   	}	 	 
;;;1069   	if(status&1<<0)						//CRC错误
;;;1070   	{								   
;;;1071   		SDIO->ICR|=1<<0;				//清除响应标志
;;;1072    		return SD_CMD_CRC_FAIL;
;;;1073   	}
;;;1074   	if(SDIO->RESPCMD!=cmd)				//判断是否响应cmd命令
;;;1075   	{
;;;1076    		return SD_ILLEGAL_CMD; 		
;;;1077   	}	    
;;;1078   	SDIO->ICR=0X5FF;	 				//清除所有标记
;;;1079   	rspr1=SDIO->RESP1;					//得到响应 	 
;;;1080   	if(SD_ALLZERO==(rspr1&(SD_R6_GENERAL_UNKNOWN_ERROR|SD_R6_ILLEGAL_CMD|SD_R6_COM_CRC_FAILED)))
;;;1081   	{
;;;1082   		*prca=(u16)(rspr1>>16);			//右移16位得到,rca
;;;1083   		return errorstatus;
;;;1084   	}
;;;1085      	if(rspr1&SD_R6_GENERAL_UNKNOWN_ERROR)return SD_GENERAL_UNKNOWN_ERROR;
;;;1086      	if(rspr1&SD_R6_ILLEGAL_CMD)return SD_ILLEGAL_CMD;
;;;1087      	if(rspr1&SD_R6_COM_CRC_FAILED)return SD_COM_CRC_FAILED;
;;;1088   	return errorstatus;
;;;1089   }
000032  bd70              POP      {r4-r6,pc}
                  |L5.52|
000034  f0020001          AND      r0,r2,#1              ;1069
000038  b148              CBZ      r0,|L5.78|
00003a  4818              LDR      r0,|L5.156|
00003c  1d00              ADDS     r0,r0,#4              ;1071
00003e  6800              LDR      r0,[r0,#0]            ;1071
000040  f0400001          ORR      r0,r0,#1              ;1071
000044  4e15              LDR      r6,|L5.156|
000046  1d36              ADDS     r6,r6,#4              ;1071
000048  6030              STR      r0,[r6,#0]            ;1071
00004a  2001              MOVS     r0,#1                 ;1072
00004c  e7f1              B        |L5.50|
                  |L5.78|
00004e  4813              LDR      r0,|L5.156|
000050  3824              SUBS     r0,r0,#0x24           ;1074
000052  6800              LDR      r0,[r0,#0]            ;1074
000054  4298              CMP      r0,r3                 ;1074
000056  d001              BEQ      |L5.92|
000058  2010              MOVS     r0,#0x10              ;1076
00005a  e7ea              B        |L5.50|
                  |L5.92|
00005c  f24050ff          MOV      r0,#0x5ff             ;1078
000060  4e0e              LDR      r6,|L5.156|
000062  1d36              ADDS     r6,r6,#4              ;1078
000064  6030              STR      r0,[r6,#0]            ;1078
000066  480d              LDR      r0,|L5.156|
000068  3820              SUBS     r0,r0,#0x20           ;1079
00006a  6801              LDR      r1,[r0,#0]            ;1079
00006c  f4014060          AND      r0,r1,#0xe000         ;1080
000070  b918              CBNZ     r0,|L5.122|
000072  0c08              LSRS     r0,r1,#16             ;1082
000074  8020              STRH     r0,[r4,#0]            ;1082
000076  4628              MOV      r0,r5                 ;1083
000078  e7db              B        |L5.50|
                  |L5.122|
00007a  f4015000          AND      r0,r1,#0x2000         ;1085
00007e  b108              CBZ      r0,|L5.132|
000080  2013              MOVS     r0,#0x13              ;1085
000082  e7d6              B        |L5.50|
                  |L5.132|
000084  f4014080          AND      r0,r1,#0x4000         ;1086
000088  b108              CBZ      r0,|L5.142|
00008a  2010              MOVS     r0,#0x10              ;1086
00008c  e7d1              B        |L5.50|
                  |L5.142|
00008e  f4014000          AND      r0,r1,#0x8000         ;1087
000092  b108              CBZ      r0,|L5.152|
000094  200f              MOVS     r0,#0xf               ;1087
000096  e7cc              B        |L5.50|
                  |L5.152|
000098  4628              MOV      r0,r5                 ;1088
00009a  e7ca              B        |L5.50|
;;;1090   
                          ENDP

                  |L5.156|
                          DCD      0x40012c34

                          AREA ||i.CmdResp7Error||, CODE, READONLY, ALIGN=2

                  CmdResp7Error PROC
;;;957    //返回值:sd卡错误码
;;;958    SD_Error CmdResp7Error(void)
000000  b510              PUSH     {r4,lr}
;;;959    {
;;;960    	SD_Error errorstatus=SD_OK;
000002  2000              MOVS     r0,#0
;;;961    	u32 status;
;;;962    	u32 timeout=SDIO_CMD0TIMEOUT;
000004  f44f3280          MOV      r2,#0x10000
;;;963     	while(timeout--)
000008  e005              B        |L6.22|
                  |L6.10|
;;;964    	{
;;;965    		status=SDIO->STA;
00000a  4b13              LDR      r3,|L6.88|
00000c  6819              LDR      r1,[r3,#0]
;;;966    		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
00000e  f0010345          AND      r3,r1,#0x45
000012  b103              CBZ      r3,|L6.22|
000014  e003              B        |L6.30|
                  |L6.22|
000016  1e13              SUBS     r3,r2,#0              ;963
000018  f1a20201          SUB      r2,r2,#1              ;963
00001c  d1f5              BNE      |L6.10|
                  |L6.30|
00001e  bf00              NOP      
;;;967    	}
;;;968     	if((timeout==0)||(status&(1<<2)))	//响应超时
000020  b112              CBZ      r2,|L6.40|
000022  f0010304          AND      r3,r1,#4
000026  b14b              CBZ      r3,|L6.60|
                  |L6.40|
;;;969    	{																				    
;;;970    		errorstatus=SD_CMD_RSP_TIMEOUT;	//当前卡不是2.0兼容卡,或者不支持设定的电压范围
000028  2003              MOVS     r0,#3
;;;971    		SDIO->ICR|=1<<2;				//清除命令响应超时标志
00002a  4b0b              LDR      r3,|L6.88|
00002c  1d1b              ADDS     r3,r3,#4
00002e  681b              LDR      r3,[r3,#0]
000030  f0430304          ORR      r3,r3,#4
000034  4c08              LDR      r4,|L6.88|
000036  1d24              ADDS     r4,r4,#4
000038  6023              STR      r3,[r4,#0]
                  |L6.58|
;;;972    		return errorstatus;
;;;973    	}	 
;;;974    	if(status&1<<6)						//成功接收到响应
;;;975    	{								   
;;;976    		errorstatus=SD_OK;
;;;977    		SDIO->ICR|=1<<6;				//清除响应标志
;;;978     	}
;;;979    	return errorstatus;
;;;980    }	   
00003a  bd10              POP      {r4,pc}
                  |L6.60|
00003c  f0010340          AND      r3,r1,#0x40           ;974
000040  b143              CBZ      r3,|L6.84|
000042  2000              MOVS     r0,#0                 ;976
000044  4b04              LDR      r3,|L6.88|
000046  1d1b              ADDS     r3,r3,#4              ;977
000048  681b              LDR      r3,[r3,#0]            ;977
00004a  f0430340          ORR      r3,r3,#0x40           ;977
00004e  4c02              LDR      r4,|L6.88|
000050  1d24              ADDS     r4,r4,#4              ;977
000052  6023              STR      r3,[r4,#0]            ;977
                  |L6.84|
000054  bf00              NOP                            ;979
000056  e7f0              B        |L6.58|
;;;981    //检查R1响应的错误状态
                          ENDP

                  |L6.88|
                          DCD      0x40012c34

                          AREA ||i.FindSCR||, CODE, READONLY, ALIGN=2

                  FindSCR PROC
;;;1167   //返回值:错误状态		   
;;;1168   SD_Error FindSCR(u16 rca,u32 *pscr)
000000  b5fc              PUSH     {r2-r7,lr}
;;;1169   { 
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
;;;1170   	u32 index = 0; 
000006  2600              MOVS     r6,#0
;;;1171   	SD_Error errorstatus = SD_OK;
000008  2400              MOVS     r4,#0
;;;1172   	u32 tempscr[2]={0,0};  
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
00000e  9001              STR      r0,[sp,#4]
;;;1173    	SDIO_Send_Cmd(SD_CMD_SET_BLOCKLEN,1,8);			//发送CMD16,短响应,设置Block Size为8字节											  
000010  2208              MOVS     r2,#8
000012  2101              MOVS     r1,#1
000014  2010              MOVS     r0,#0x10
000016  f7fffffe          BL       SDIO_Send_Cmd
;;;1174    	errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);
00001a  2010              MOVS     r0,#0x10
00001c  f7fffffe          BL       CmdResp1Error
000020  4604              MOV      r4,r0
;;;1175    	if(errorstatus!=SD_OK)return errorstatus;	    
000022  b10c              CBZ      r4,|L7.40|
000024  4620              MOV      r0,r4
                  |L7.38|
;;;1176     	SDIO_Send_Cmd(SD_CMD_APP_CMD,1,(u32)rca<<16);	//发送CMD55,短响应 									  
;;;1177    	errorstatus=CmdResp1Error(SD_CMD_APP_CMD);
;;;1178    	if(errorstatus!=SD_OK)return errorstatus;
;;;1179   	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,8,3,1);		//8个字节长度,block为8字节,SD卡到SDIO.
;;;1180      	SDIO_Send_Cmd(SD_CMD_SD_APP_SEND_SCR,1,0);		//发送ACMD51,短响应,参数为0											  
;;;1181    	errorstatus=CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
;;;1182    	if(errorstatus!=SD_OK)return errorstatus;							   
;;;1183    	while(!(SDIO->STA&(SDIO_FLAG_RXOVERR|SDIO_FLAG_DCRCFAIL|SDIO_FLAG_DTIMEOUT|SDIO_FLAG_DBCKEND|SDIO_FLAG_STBITERR)))
;;;1184   	{ 
;;;1185   		if(SDIO->STA&(1<<21))//接收FIFO数据可用
;;;1186   		{
;;;1187   			*(tempscr+index)=SDIO->FIFO;	//读取FIFO内容
;;;1188   			index++;
;;;1189   			if(index>=2)break;
;;;1190   		}
;;;1191   	}
;;;1192    	if(SDIO->STA&(1<<3))		//接收数据超时
;;;1193   	{										 
;;;1194    		SDIO->ICR|=1<<3;		//清除标记
;;;1195   		return SD_DATA_TIMEOUT;
;;;1196   	}
;;;1197   	else if(SDIO->STA&(1<<1))	//已发送/接收的数据块CRC校验错误
;;;1198   	{
;;;1199    		SDIO->ICR|=1<<1;		//清除标记
;;;1200   		return SD_DATA_CRC_FAIL;   
;;;1201   	}
;;;1202   	else if(SDIO->STA&(1<<5))	//接收FIFO溢出
;;;1203   	{
;;;1204    		SDIO->ICR|=1<<5;		//清除标记
;;;1205   		return SD_RX_OVERRUN;   	   
;;;1206   	}
;;;1207   	else if(SDIO->STA&(1<<9))	//起始位检测错误
;;;1208   	{
;;;1209    		SDIO->ICR|=1<<9;		//清除标记
;;;1210   		return SD_START_BIT_ERR;    
;;;1211   	}
;;;1212      	SDIO->ICR=0X5FF;	 		//清除标记	 
;;;1213   	//把数据顺序按8位为单位倒过来.   	
;;;1214   	*(pscr+1)=((tempscr[0]&SD_0TO7BITS)<<24)|((tempscr[0]&SD_8TO15BITS)<<8)|((tempscr[0]&SD_16TO23BITS)>>8)|((tempscr[0]&SD_24TO31BITS)>>24);
;;;1215   	*(pscr)=((tempscr[1]&SD_0TO7BITS)<<24)|((tempscr[1]&SD_8TO15BITS)<<8)|((tempscr[1]&SD_16TO23BITS)>>8)|((tempscr[1]&SD_24TO31BITS)>>24);
;;;1216    	return errorstatus;
;;;1217   }
000026  bdfc              POP      {r2-r7,pc}
                  |L7.40|
000028  043a              LSLS     r2,r7,#16             ;1176
00002a  2101              MOVS     r1,#1                 ;1176
00002c  2037              MOVS     r0,#0x37              ;1176
00002e  f7fffffe          BL       SDIO_Send_Cmd
000032  2037              MOVS     r0,#0x37              ;1177
000034  f7fffffe          BL       CmdResp1Error
000038  4604              MOV      r4,r0                 ;1177
00003a  b10c              CBZ      r4,|L7.64|
00003c  4620              MOV      r0,r4                 ;1178
00003e  e7f2              B        |L7.38|
                  |L7.64|
000040  2301              MOVS     r3,#1                 ;1179
000042  2203              MOVS     r2,#3                 ;1179
000044  2108              MOVS     r1,#8                 ;1179
000046  1f10              SUBS     r0,r2,#4              ;1179
000048  f7fffffe          BL       SDIO_Send_Data_Cfg
00004c  2200              MOVS     r2,#0                 ;1180
00004e  2101              MOVS     r1,#1                 ;1180
000050  2033              MOVS     r0,#0x33              ;1180
000052  f7fffffe          BL       SDIO_Send_Cmd
000056  2033              MOVS     r0,#0x33              ;1181
000058  f7fffffe          BL       CmdResp1Error
00005c  4604              MOV      r4,r0                 ;1181
00005e  b10c              CBZ      r4,|L7.100|
000060  4620              MOV      r0,r4                 ;1182
000062  e7e0              B        |L7.38|
                  |L7.100|
000064  e00d              B        |L7.130|
                  |L7.102|
000066  483c              LDR      r0,|L7.344|
000068  6800              LDR      r0,[r0,#0]            ;1185
00006a  f4001000          AND      r0,r0,#0x200000       ;1185
00006e  b140              CBZ      r0,|L7.130|
000070  4839              LDR      r0,|L7.344|
000072  304c              ADDS     r0,r0,#0x4c           ;1187
000074  6800              LDR      r0,[r0,#0]            ;1187
000076  f84d0026          STR      r0,[sp,r6,LSL #2]     ;1187
00007a  1c76              ADDS     r6,r6,#1              ;1188
00007c  2e02              CMP      r6,#2                 ;1189
00007e  d300              BCC      |L7.130|
000080  e006              B        |L7.144|
                  |L7.130|
000082  4835              LDR      r0,|L7.344|
000084  6800              LDR      r0,[r0,#0]            ;1183
000086  f240612a          MOV      r1,#0x62a             ;1183
00008a  4008              ANDS     r0,r0,r1              ;1183
00008c  2800              CMP      r0,#0                 ;1183
00008e  d0ea              BEQ      |L7.102|
                  |L7.144|
000090  bf00              NOP                            ;1189
000092  4831              LDR      r0,|L7.344|
000094  6800              LDR      r0,[r0,#0]            ;1192
000096  f0000008          AND      r0,r0,#8              ;1192
00009a  b148              CBZ      r0,|L7.176|
00009c  482e              LDR      r0,|L7.344|
00009e  1d00              ADDS     r0,r0,#4              ;1194
0000a0  6800              LDR      r0,[r0,#0]            ;1194
0000a2  f0400008          ORR      r0,r0,#8              ;1194
0000a6  492c              LDR      r1,|L7.344|
0000a8  1d09              ADDS     r1,r1,#4              ;1194
0000aa  6008              STR      r0,[r1,#0]            ;1194
0000ac  2004              MOVS     r0,#4                 ;1195
0000ae  e7ba              B        |L7.38|
                  |L7.176|
0000b0  4829              LDR      r0,|L7.344|
0000b2  6800              LDR      r0,[r0,#0]            ;1197
0000b4  f0000002          AND      r0,r0,#2              ;1197
0000b8  b148              CBZ      r0,|L7.206|
0000ba  4827              LDR      r0,|L7.344|
0000bc  1d00              ADDS     r0,r0,#4              ;1199
0000be  6800              LDR      r0,[r0,#0]            ;1199
0000c0  f0400002          ORR      r0,r0,#2              ;1199
0000c4  4924              LDR      r1,|L7.344|
0000c6  1d09              ADDS     r1,r1,#4              ;1199
0000c8  6008              STR      r0,[r1,#0]            ;1199
0000ca  2002              MOVS     r0,#2                 ;1200
0000cc  e7ab              B        |L7.38|
                  |L7.206|
0000ce  4822              LDR      r0,|L7.344|
0000d0  6800              LDR      r0,[r0,#0]            ;1202
0000d2  f0000020          AND      r0,r0,#0x20           ;1202
0000d6  b148              CBZ      r0,|L7.236|
0000d8  481f              LDR      r0,|L7.344|
0000da  1d00              ADDS     r0,r0,#4              ;1204
0000dc  6800              LDR      r0,[r0,#0]            ;1204
0000de  f0400020          ORR      r0,r0,#0x20           ;1204
0000e2  491d              LDR      r1,|L7.344|
0000e4  1d09              ADDS     r1,r1,#4              ;1204
0000e6  6008              STR      r0,[r1,#0]            ;1204
0000e8  2006              MOVS     r0,#6                 ;1205
0000ea  e79c              B        |L7.38|
                  |L7.236|
0000ec  481a              LDR      r0,|L7.344|
0000ee  6800              LDR      r0,[r0,#0]            ;1207
0000f0  f4007000          AND      r0,r0,#0x200          ;1207
0000f4  b148              CBZ      r0,|L7.266|
0000f6  4818              LDR      r0,|L7.344|
0000f8  1d00              ADDS     r0,r0,#4              ;1209
0000fa  6800              LDR      r0,[r0,#0]            ;1209
0000fc  f4407000          ORR      r0,r0,#0x200          ;1209
000100  4915              LDR      r1,|L7.344|
000102  1d09              ADDS     r1,r1,#4              ;1209
000104  6008              STR      r0,[r1,#0]            ;1209
000106  2007              MOVS     r0,#7                 ;1210
000108  e78d              B        |L7.38|
                  |L7.266|
00010a  f24050ff          MOV      r0,#0x5ff             ;1212
00010e  4912              LDR      r1,|L7.344|
000110  1d09              ADDS     r1,r1,#4              ;1212
000112  6008              STR      r0,[r1,#0]            ;1212
000114  9800              LDR      r0,[sp,#0]            ;1214
000116  0600              LSLS     r0,r0,#24             ;1214
000118  9900              LDR      r1,[sp,#0]            ;1214
00011a  f401417f          AND      r1,r1,#0xff00         ;1214
00011e  ea402001          ORR      r0,r0,r1,LSL #8       ;1214
000122  9900              LDR      r1,[sp,#0]            ;1214
000124  f401017f          AND      r1,r1,#0xff0000       ;1214
000128  ea402011          ORR      r0,r0,r1,LSR #8       ;1214
00012c  9900              LDR      r1,[sp,#0]            ;1214
00012e  ea406011          ORR      r0,r0,r1,LSR #24      ;1214
000132  6068              STR      r0,[r5,#4]            ;1214
000134  9801              LDR      r0,[sp,#4]            ;1215
000136  0600              LSLS     r0,r0,#24             ;1215
000138  9901              LDR      r1,[sp,#4]            ;1215
00013a  f401417f          AND      r1,r1,#0xff00         ;1215
00013e  ea402001          ORR      r0,r0,r1,LSL #8       ;1215
000142  9901              LDR      r1,[sp,#4]            ;1215
000144  f401017f          AND      r1,r1,#0xff0000       ;1215
000148  ea402011          ORR      r0,r0,r1,LSR #8       ;1215
00014c  9901              LDR      r1,[sp,#4]            ;1215
00014e  ea406011          ORR      r0,r0,r1,LSR #24      ;1215
000152  6028              STR      r0,[r5,#0]            ;1215
000154  4620              MOV      r0,r4                 ;1216
000156  e766              B        |L7.38|
;;;1218   //得到NumberOfBytes以2为底的指数.
                          ENDP

                  |L7.344|
                          DCD      0x40012c34

                          AREA ||i.IsCardProgramming||, CODE, READONLY, ALIGN=2

                  IsCardProgramming PROC
;;;1116   //返回值:错误代码
;;;1117   SD_Error IsCardProgramming(u8 *pstatus)
000000  b51c              PUSH     {r2-r4,lr}
;;;1118   {
000002  4604              MOV      r4,r0
;;;1119    	vu32 respR1 = 0, status = 0; 
000004  2000              MOVS     r0,#0
000006  9001              STR      r0,[sp,#4]
000008  9000              STR      r0,[sp,#0]
;;;1120     	SDIO_Send_Cmd(SD_CMD_SEND_STATUS,1,(u32)RCA<<16);		//发送CMD13 	   
00000a  4822              LDR      r0,|L8.148|
00000c  8800              LDRH     r0,[r0,#0]  ; RCA
00000e  0402              LSLS     r2,r0,#16
000010  2101              MOVS     r1,#1
000012  200d              MOVS     r0,#0xd
000014  f7fffffe          BL       SDIO_Send_Cmd
;;;1121     	status=SDIO->STA;
000018  481f              LDR      r0,|L8.152|
00001a  6800              LDR      r0,[r0,#0]
00001c  9000              STR      r0,[sp,#0]
;;;1122   	while(!(status&((1<<0)|(1<<6)|(1<<2))))status=SDIO->STA;//等待操作完成
00001e  e002              B        |L8.38|
                  |L8.32|
000020  481d              LDR      r0,|L8.152|
000022  6800              LDR      r0,[r0,#0]
000024  9000              STR      r0,[sp,#0]
                  |L8.38|
000026  9800              LDR      r0,[sp,#0]
000028  f0000045          AND      r0,r0,#0x45
00002c  2800              CMP      r0,#0
00002e  d0f7              BEQ      |L8.32|
;;;1123      	if(status&(1<<0))			//CRC检测失败
000030  9800              LDR      r0,[sp,#0]
000032  f0000001          AND      r0,r0,#1
000036  b148              CBZ      r0,|L8.76|
;;;1124   	{
;;;1125   		SDIO->ICR|=1<<0;		//清除错误标记
000038  4817              LDR      r0,|L8.152|
00003a  1d00              ADDS     r0,r0,#4
00003c  6800              LDR      r0,[r0,#0]
00003e  f0400001          ORR      r0,r0,#1
000042  4915              LDR      r1,|L8.152|
000044  1d09              ADDS     r1,r1,#4
000046  6008              STR      r0,[r1,#0]
;;;1126   		return SD_CMD_CRC_FAIL;
000048  2001              MOVS     r0,#1
                  |L8.74|
;;;1127   	}
;;;1128      	if(status&(1<<2))			//命令超时 
;;;1129   	{
;;;1130   		SDIO->ICR|=1<<2;		//清除错误标记
;;;1131   		return SD_CMD_RSP_TIMEOUT;
;;;1132   	}
;;;1133    	if(SDIO->RESPCMD!=SD_CMD_SEND_STATUS)return SD_ILLEGAL_CMD;
;;;1134   	SDIO->ICR=0X5FF;	 		//清除所有标记
;;;1135   	respR1=SDIO->RESP1;
;;;1136   	*pstatus=(u8)((respR1>>9)&0x0000000F);
;;;1137   	return SD_OK;
;;;1138   }
00004a  bd1c              POP      {r2-r4,pc}
                  |L8.76|
00004c  9800              LDR      r0,[sp,#0]            ;1128
00004e  f0000004          AND      r0,r0,#4              ;1128
000052  b148              CBZ      r0,|L8.104|
000054  4810              LDR      r0,|L8.152|
000056  1d00              ADDS     r0,r0,#4              ;1130
000058  6800              LDR      r0,[r0,#0]            ;1130
00005a  f0400004          ORR      r0,r0,#4              ;1130
00005e  490e              LDR      r1,|L8.152|
000060  1d09              ADDS     r1,r1,#4              ;1130
000062  6008              STR      r0,[r1,#0]            ;1130
000064  2003              MOVS     r0,#3                 ;1131
000066  e7f0              B        |L8.74|
                  |L8.104|
000068  480b              LDR      r0,|L8.152|
00006a  3824              SUBS     r0,r0,#0x24           ;1133
00006c  6800              LDR      r0,[r0,#0]            ;1133
00006e  280d              CMP      r0,#0xd               ;1133
000070  d001              BEQ      |L8.118|
000072  2010              MOVS     r0,#0x10              ;1133
000074  e7e9              B        |L8.74|
                  |L8.118|
000076  f24050ff          MOV      r0,#0x5ff             ;1134
00007a  4907              LDR      r1,|L8.152|
00007c  1d09              ADDS     r1,r1,#4              ;1134
00007e  6008              STR      r0,[r1,#0]            ;1134
000080  4805              LDR      r0,|L8.152|
000082  3820              SUBS     r0,r0,#0x20           ;1135
000084  6800              LDR      r0,[r0,#0]            ;1135
000086  9001              STR      r0,[sp,#4]            ;1135
000088  9801              LDR      r0,[sp,#4]            ;1136
00008a  f3c02043          UBFX     r0,r0,#9,#4           ;1136
00008e  7020              STRB     r0,[r4,#0]            ;1136
000090  2000              MOVS     r0,#0                 ;1137
000092  e7da              B        |L8.74|
;;;1139   //读取当前卡状态
                          ENDP

                  |L8.148|
                          DCD      ||RCA||
                  |L8.152|
                          DCD      0x40012c34

                          AREA ||i.SDEnWideBus||, CODE, READONLY, ALIGN=2

                  SDEnWideBus PROC
;;;1093   //返回值:错误状态
;;;1094   SD_Error SDEnWideBus(u8 enx)
000000  b57c              PUSH     {r2-r6,lr}
;;;1095   {
000002  4605              MOV      r5,r0
;;;1096   	SD_Error errorstatus = SD_OK;
000004  2400              MOVS     r4,#0
;;;1097    	u32 scr[2]={0,0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;1098   	u8 arg=0X00;
00000c  2600              MOVS     r6,#0
;;;1099   	if(enx)arg=0X02;
00000e  b10d              CBZ      r5,|L9.20|
000010  2602              MOVS     r6,#2
000012  e000              B        |L9.22|
                  |L9.20|
;;;1100   	else arg=0X00;
000014  2600              MOVS     r6,#0
                  |L9.22|
;;;1101    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//SD卡处于LOCKED状态		    
000016  4818              LDR      r0,|L9.120|
000018  6800              LDR      r0,[r0,#0]
00001a  f0007000          AND      r0,r0,#0x2000000
00001e  b108              CBZ      r0,|L9.36|
000020  200e              MOVS     r0,#0xe
                  |L9.34|
;;;1102    	errorstatus=FindSCR(RCA,scr);						//得到SCR寄存器数据
;;;1103    	if(errorstatus!=SD_OK)return errorstatus;
;;;1104   	if((scr[1]&SD_WIDE_BUS_SUPPORT)!=SD_ALLZERO)		//支持宽总线
;;;1105   	{
;;;1106   	 	SDIO_Send_Cmd(SD_CMD_APP_CMD,1,(u32)RCA<<16);	//发送CMD55+RCA,短响应											  
;;;1107   	 	errorstatus=CmdResp1Error(SD_CMD_APP_CMD);
;;;1108   	 	if(errorstatus!=SD_OK)return errorstatus; 
;;;1109   	 	SDIO_Send_Cmd(SD_CMD_APP_SD_SET_BUSWIDTH,1,arg);//发送ACMD6,短响应,参数:10,4位;00,1位.											  
;;;1110   		errorstatus=CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;1111   		return errorstatus;
;;;1112   	}else return SD_REQUEST_NOT_APPLICABLE;				//不支持宽总线设置 	 
;;;1113   }												   
000022  bd7c              POP      {r2-r6,pc}
                  |L9.36|
000024  4915              LDR      r1,|L9.124|
000026  8809              LDRH     r1,[r1,#0]            ;1102  ; RCA
000028  b288              UXTH     r0,r1                 ;1102
00002a  4669              MOV      r1,sp                 ;1102
00002c  f7fffffe          BL       FindSCR
000030  4604              MOV      r4,r0                 ;1102
000032  b10c              CBZ      r4,|L9.56|
000034  4620              MOV      r0,r4                 ;1103
000036  e7f4              B        |L9.34|
                  |L9.56|
000038  9801              LDR      r0,[sp,#4]            ;1104
00003a  f4002080          AND      r0,r0,#0x40000        ;1104
00003e  b1c0              CBZ      r0,|L9.114|
000040  480e              LDR      r0,|L9.124|
000042  8800              LDRH     r0,[r0,#0]            ;1106  ; RCA
000044  0402              LSLS     r2,r0,#16             ;1106
000046  2101              MOVS     r1,#1                 ;1106
000048  2037              MOVS     r0,#0x37              ;1106
00004a  f7fffffe          BL       SDIO_Send_Cmd
00004e  2037              MOVS     r0,#0x37              ;1107
000050  f7fffffe          BL       CmdResp1Error
000054  4604              MOV      r4,r0                 ;1107
000056  b10c              CBZ      r4,|L9.92|
000058  4620              MOV      r0,r4                 ;1108
00005a  e7e2              B        |L9.34|
                  |L9.92|
00005c  4632              MOV      r2,r6                 ;1109
00005e  2101              MOVS     r1,#1                 ;1109
000060  2006              MOVS     r0,#6                 ;1109
000062  f7fffffe          BL       SDIO_Send_Cmd
000066  2006              MOVS     r0,#6                 ;1110
000068  f7fffffe          BL       CmdResp1Error
00006c  4604              MOV      r4,r0                 ;1110
00006e  4620              MOV      r0,r4                 ;1111
000070  e7d7              B        |L9.34|
                  |L9.114|
000072  2025              MOVS     r0,#0x25              ;1112
000074  e7d5              B        |L9.34|
;;;1114   //检查卡是否正在执行写操作
                          ENDP

000076  0000              DCW      0x0000
                  |L9.120|
                          DCD      0x40012c14
                  |L9.124|
                          DCD      ||RCA||

                          AREA ||i.SDIO_Clock_Set||, CODE, READONLY, ALIGN=2

                  SDIO_Clock_Set PROC
;;;91     //CK时钟=SDIOCLK/[clkdiv+2];(SDIOCLK时钟固定为48Mhz)
;;;92     void SDIO_Clock_Set(u8 clkdiv)
000000  4601              MOV      r1,r0
;;;93     {
;;;94     	u32 tmpreg=SDIO->CLKCR; 
000002  4a03              LDR      r2,|L10.16|
000004  6810              LDR      r0,[r2,#0]
;;;95       	tmpreg&=0XFFFFFF00; 
000006  f02000ff          BIC      r0,r0,#0xff
;;;96      	tmpreg|=clkdiv;   
00000a  4308              ORRS     r0,r0,r1
;;;97     	SDIO->CLKCR=tmpreg;
00000c  6010              STR      r0,[r2,#0]
;;;98     } 
00000e  4770              BX       lr
;;;99     //SDIO发送命令函数
                          ENDP

                  |L10.16|
                          DCD      0x40012c04

                          AREA ||i.SDIO_IRQHandler||, CODE, READONLY, ALIGN=1

                  SDIO_IRQHandler PROC
;;;882    //SDIO中断服务函数		  
;;;883    void SDIO_IRQHandler(void) 
000000  b500              PUSH     {lr}
;;;884    {											
;;;885     	SD_ProcessIRQSrc();//处理所有SDIO相关中断
000002  f7fffffe          BL       SD_ProcessIRQSrc
;;;886    }	 																    
000006  bd00              POP      {pc}
;;;887    //SDIO中断处理函数
                          ENDP


                          AREA ||i.SDIO_Send_Cmd||, CODE, READONLY, ALIGN=2

                  SDIO_Send_Cmd PROC
;;;102    //arg:参数
;;;103    void SDIO_Send_Cmd(u8 cmdindex,u8 waitrsp,u32 arg)
000000  b510              PUSH     {r4,lr}
;;;104    {			
000002  4603              MOV      r3,r0
;;;105    	u32 tmpreg;
;;;106    	SDIO->ARG=arg;
000004  4c08              LDR      r4,|L12.40|
000006  6022              STR      r2,[r4,#0]
;;;107    	tmpreg=SDIO->CMD; 
000008  1d24              ADDS     r4,r4,#4
00000a  6820              LDR      r0,[r4,#0]
;;;108    	tmpreg&=0XFFFFF800;		//清除index和waitrsp
00000c  f36f000a          BFC      r0,#0,#11
;;;109    	tmpreg|=cmdindex&0X3F;	//设置新的index			 
000010  f003043f          AND      r4,r3,#0x3f
000014  4320              ORRS     r0,r0,r4
;;;110    	tmpreg|=waitrsp<<6;		//设置新的wait rsp 
000016  ea401081          ORR      r0,r0,r1,LSL #6
;;;111    	tmpreg|=0<<8;			//无等待
00001a  bf00              NOP      
;;;112      	tmpreg|=1<<10;			//命令通道状态机使能
00001c  f4406080          ORR      r0,r0,#0x400
;;;113    	SDIO->CMD=tmpreg;
000020  4c01              LDR      r4,|L12.40|
000022  1d24              ADDS     r4,r4,#4
000024  6020              STR      r0,[r4,#0]
;;;114    }
000026  bd10              POP      {r4,pc}
;;;115    //SDIO发送数据配置函数
                          ENDP

                  |L12.40|
                          DCD      0x40012c08

                          AREA ||i.SDIO_Send_Data_Cfg||, CODE, READONLY, ALIGN=2

                  SDIO_Send_Data_Cfg PROC
;;;119    //dir:数据传输方向:0,控制器到卡;1,卡到控制器;
;;;120    void SDIO_Send_Data_Cfg(u32 datatimeout,u32 datalen,u8 blksize,u8 dir)
000000  b570              PUSH     {r4-r6,lr}
;;;121    {
000002  4604              MOV      r4,r0
;;;122    	u32 tmpreg;
;;;123    	SDIO->DTIMER=datatimeout;
000004  4d0b              LDR      r5,|L13.52|
000006  602c              STR      r4,[r5,#0]
;;;124      	SDIO->DLEN=datalen&0X1FFFFFF;	//低25位有效
000008  f021457e          BIC      r5,r1,#0xfe000000
00000c  4e09              LDR      r6,|L13.52|
00000e  1d36              ADDS     r6,r6,#4
000010  6035              STR      r5,[r6,#0]
;;;125    	tmpreg=SDIO->DCTRL; 
000012  1d35              ADDS     r5,r6,#4
000014  6828              LDR      r0,[r5,#0]
;;;126    	tmpreg&=0xFFFFFF08;		//清除之前的设置.
000016  f02000f7          BIC      r0,r0,#0xf7
;;;127    	tmpreg|=blksize<<4;		//设置块大小
00001a  ea401002          ORR      r0,r0,r2,LSL #4
;;;128    	tmpreg|=0<<2;			//块数据传输
00001e  bf00              NOP      
;;;129    	tmpreg|=(dir&0X01)<<1;	//方向控制
000020  f0030501          AND      r5,r3,#1
000024  ea400045          ORR      r0,r0,r5,LSL #1
;;;130    	tmpreg|=1<<0;			//数据传输使能,DPSM状态机
000028  f0400001          ORR      r0,r0,#1
;;;131    	SDIO->DCTRL=tmpreg;		
00002c  1d35              ADDS     r5,r6,#4
00002e  6028              STR      r0,[r5,#0]
;;;132    }  
000030  bd70              POP      {r4-r6,pc}
;;;133    
                          ENDP

000032  0000              DCW      0x0000
                  |L13.52|
                          DCD      0x40012c24

                          AREA ||i.SD_DMA_Config||, CODE, READONLY, ALIGN=2

                  SD_DMA_Config PROC
;;;1234   //dir:方向;1,存储器-->SDIO(写数据);0,SDIO-->存储器(读数据);
;;;1235   void SD_DMA_Config(u32*mbuf,u32 bufsize,u8 dir)
000000  b530              PUSH     {r4,r5,lr}
;;;1236   {		 
000002  4603              MOV      r3,r0
;;;1237    	u32 tmpreg=0;//重新设置
000004  2000              MOVS     r0,#0
;;;1238   	while(DMA2_Stream3->CR&0X01);	//等待DMA可配置 
000006  bf00              NOP      
                  |L14.8|
000008  4c20              LDR      r4,|L14.140|
00000a  6824              LDR      r4,[r4,#0]
00000c  f0040401          AND      r4,r4,#1
000010  2c00              CMP      r4,#0
000012  d1f9              BNE      |L14.8|
;;;1239   	DMA2->LIFCR|=0X3D<<22;			//清空之前该stream3上的所有中断标志
000014  4c1d              LDR      r4,|L14.140|
000016  3c50              SUBS     r4,r4,#0x50
000018  6824              LDR      r4,[r4,#0]
00001a  f0446474          ORR      r4,r4,#0xf400000
00001e  4d1b              LDR      r5,|L14.140|
000020  3d50              SUBS     r5,r5,#0x50
000022  602c              STR      r4,[r5,#0]
;;;1240   	
;;;1241   	
;;;1242   	DMA2_Stream3->PAR=(u32)&SDIO->FIFO;	//DMA2 外设地址
000024  4c1a              LDR      r4,|L14.144|
000026  4d19              LDR      r5,|L14.140|
000028  3508              ADDS     r5,r5,#8
00002a  602c              STR      r4,[r5,#0]
;;;1243   	DMA2_Stream3->M0AR=(u32)mbuf; 	//DMA2,存储器0地址;	 
00002c  1d2c              ADDS     r4,r5,#4
00002e  6023              STR      r3,[r4,#0]
;;;1244   	DMA2_Stream3->NDTR=0; 			//DMA2,传输数据量0,外设流控制 
000030  2400              MOVS     r4,#0
000032  1f2d              SUBS     r5,r5,#4
000034  602c              STR      r4,[r5,#0]
;;;1245   	tmpreg|=dir<<6;		//数据传输方向控制
000036  ea401082          ORR      r0,r0,r2,LSL #6
;;;1246   	tmpreg|=0<<8;		//非循环模式(即使用普通模式)
00003a  bf00              NOP      
;;;1247   	tmpreg|=0<<9;		//外设非增量模式
00003c  bf00              NOP      
;;;1248   	tmpreg|=1<<10;		//存储器增量模式
00003e  f4406080          ORR      r0,r0,#0x400
;;;1249   	tmpreg|=2<<11;		//外设数据长度:32位
000042  f4405080          ORR      r0,r0,#0x1000
;;;1250   	tmpreg|=2<<13;		//存储器数据长度:32位
000046  f4404080          ORR      r0,r0,#0x4000
;;;1251   	tmpreg|=3<<16;		//最高优先级
00004a  f4403040          ORR      r0,r0,#0x30000
;;;1252   	tmpreg|=1<<21;		//外设突发4次传输
00004e  f4401000          ORR      r0,r0,#0x200000
;;;1253   	tmpreg|=1<<23;		//存储器突发4次传输
000052  f4400000          ORR      r0,r0,#0x800000
;;;1254   	tmpreg|=(u32)4<<25;	//通道选择
000056  f0406000          ORR      r0,r0,#0x8000000
;;;1255   	DMA2_Stream3->CR=tmpreg; 
00005a  1f2c              SUBS     r4,r5,#4
00005c  6020              STR      r0,[r4,#0]
;;;1256   	
;;;1257   	tmpreg=DMA2_Stream3->FCR;
00005e  4c0b              LDR      r4,|L14.140|
000060  3414              ADDS     r4,r4,#0x14
000062  6820              LDR      r0,[r4,#0]
;;;1258   	tmpreg&=0XFFFFFFF8;	//清除DMDIS和FTH
000064  f0200007          BIC      r0,r0,#7
;;;1259   	tmpreg|=1<<2;		//FIFO使能
000068  f0400004          ORR      r0,r0,#4
;;;1260   	tmpreg|=3<<0;		//全FIFO
00006c  f0400003          ORR      r0,r0,#3
;;;1261   	DMA2_Stream3->FCR=tmpreg;
000070  6020              STR      r0,[r4,#0]
;;;1262   	DMA2_Stream3->CR|=1<<5;	//外设流控制 
000072  1f2c              SUBS     r4,r5,#4
000074  6824              LDR      r4,[r4,#0]
000076  f0440420          ORR      r4,r4,#0x20
00007a  1f2d              SUBS     r5,r5,#4
00007c  602c              STR      r4,[r5,#0]
;;;1263   	DMA2_Stream3->CR|=1<<0;	//开启DMA传输 
00007e  462c              MOV      r4,r5
000080  6824              LDR      r4,[r4,#0]
000082  f0440401          ORR      r4,r4,#1
000086  602c              STR      r4,[r5,#0]
;;;1264   }   
000088  bd30              POP      {r4,r5,pc}
;;;1265   //读SD卡
                          ENDP

00008a  0000              DCW      0x0000
                  |L14.140|
                          DCD      0x40026458
                  |L14.144|
                          DCD      0x40012c80

                          AREA ||i.SD_EnableWideBusOperation||, CODE, READONLY, ALIGN=2

                  SD_EnableWideBusOperation PROC
;;;390    //返回值:SD卡错误状态
;;;391    SD_Error SD_EnableWideBusOperation(u32 wmode)
000000  b530              PUSH     {r4,r5,lr}
;;;392    {
000002  4604              MOV      r4,r0
;;;393      	SD_Error errorstatus=SD_OK;
000004  2500              MOVS     r5,#0
;;;394     	if(SDIO_MULTIMEDIA_CARD==CardType)return SD_UNSUPPORTED_FEATURE;//MMC卡不支持
000006  4816              LDR      r0,|L15.96|
000008  7800              LDRB     r0,[r0,#0]  ; CardType
00000a  2803              CMP      r0,#3
00000c  d101              BNE      |L15.18|
00000e  2027              MOVS     r0,#0x27
                  |L15.16|
;;;395     	else if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;396    	{
;;;397    		if(wmode>=2)return SD_UNSUPPORTED_FEATURE;//不支持8位模式
;;;398     		else   
;;;399    		{
;;;400    			errorstatus=SDEnWideBus(wmode);
;;;401     			if(SD_OK==errorstatus)
;;;402    			{
;;;403    				SDIO->CLKCR&=~(3<<11);		//清除之前的位宽设置    
;;;404    				SDIO->CLKCR|=(u16)wmode<<11;//1位/4位总线宽度 
;;;405    				SDIO->CLKCR|=0<<14;			//不开启硬件流控制
;;;406    			}
;;;407    		}  
;;;408    	}
;;;409    	return errorstatus; 
;;;410    }
000010  bd30              POP      {r4,r5,pc}
                  |L15.18|
000012  4813              LDR      r0,|L15.96|
000014  7800              LDRB     r0,[r0,#0]            ;395  ; CardType
000016  b138              CBZ      r0,|L15.40|
000018  4811              LDR      r0,|L15.96|
00001a  7800              LDRB     r0,[r0,#0]            ;395  ; CardType
00001c  2801              CMP      r0,#1                 ;395
00001e  d003              BEQ      |L15.40|
000020  480f              LDR      r0,|L15.96|
000022  7800              LDRB     r0,[r0,#0]            ;395  ; CardType
000024  2802              CMP      r0,#2                 ;395
000026  d118              BNE      |L15.90|
                  |L15.40|
000028  2c02              CMP      r4,#2                 ;397
00002a  d301              BCC      |L15.48|
00002c  2027              MOVS     r0,#0x27              ;397
00002e  e7ef              B        |L15.16|
                  |L15.48|
000030  b2e0              UXTB     r0,r4                 ;400
000032  f7fffffe          BL       SDEnWideBus
000036  4605              MOV      r5,r0                 ;400
000038  b97d              CBNZ     r5,|L15.90|
00003a  480a              LDR      r0,|L15.100|
00003c  6800              LDR      r0,[r0,#0]            ;403
00003e  f42050c0          BIC      r0,r0,#0x1800         ;403
000042  4908              LDR      r1,|L15.100|
000044  6008              STR      r0,[r1,#0]            ;403
000046  4608              MOV      r0,r1                 ;404
000048  6800              LDR      r0,[r0,#0]            ;404
00004a  b2a1              UXTH     r1,r4                 ;404
00004c  ea4020c1          ORR      r0,r0,r1,LSL #11      ;404
000050  4904              LDR      r1,|L15.100|
000052  6008              STR      r0,[r1,#0]            ;404
000054  4608              MOV      r0,r1                 ;405
000056  6800              LDR      r0,[r0,#0]            ;405
000058  6008              STR      r0,[r1,#0]            ;405
                  |L15.90|
00005a  4628              MOV      r0,r5                 ;409
00005c  e7d8              B        |L15.16|
;;;411    //设置SD卡工作模式
                          ENDP

00005e  0000              DCW      0x0000
                  |L15.96|
                          DCD      CardType
                  |L15.100|
                          DCD      0x40012c04

                          AREA ||i.SD_GetCardInfo||, CODE, READONLY, ALIGN=2

                  SD_GetCardInfo PROC
;;;268    //返回值:错误状态
;;;269    SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
000000  b5f0              PUSH     {r4-r7,lr}
;;;270    {
000002  4601              MOV      r1,r0
;;;271     	SD_Error errorstatus=SD_OK;
000004  2000              MOVS     r0,#0
;;;272    	u8 tmp=0;	   
000006  2200              MOVS     r2,#0
;;;273    	cardinfo->CardType=(u8)CardType; 				//卡类型
000008  4bbe              LDR      r3,|L16.772|
00000a  781b              LDRB     r3,[r3,#0]  ; CardType
00000c  f8813056          STRB     r3,[r1,#0x56]
;;;274    	cardinfo->RCA=(u16)RCA;							//卡RCA值
000010  4bbd              LDR      r3,|L16.776|
000012  881b              LDRH     r3,[r3,#0]  ; RCA
000014  f8a13054          STRH     r3,[r1,#0x54]
;;;275    	tmp=(u8)((CSD_Tab[0]&0xFF000000)>>24);
000018  4bbc              LDR      r3,|L16.780|
00001a  681b              LDR      r3,[r3,#0]  ; CSD_Tab
00001c  0e1a              LSRS     r2,r3,#24
;;;276    	cardinfo->SD_csd.CSDStruct=(tmp&0xC0)>>6;		//CSD结构
00001e  0993              LSRS     r3,r2,#6
000020  700b              STRB     r3,[r1,#0]
;;;277    	cardinfo->SD_csd.SysSpecVersion=(tmp&0x3C)>>2;	//2.0协议还没定义这部分(为保留),应该是后续协议定义的
000022  f3c20383          UBFX     r3,r2,#2,#4
000026  704b              STRB     r3,[r1,#1]
;;;278    	cardinfo->SD_csd.Reserved1=tmp&0x03;			//2个保留位  
000028  f0020303          AND      r3,r2,#3
00002c  708b              STRB     r3,[r1,#2]
;;;279    	tmp=(u8)((CSD_Tab[0]&0x00FF0000)>>16);			//第1个字节
00002e  4bb7              LDR      r3,|L16.780|
000030  681b              LDR      r3,[r3,#0]  ; CSD_Tab
000032  f3c34207          UBFX     r2,r3,#16,#8
;;;280    	cardinfo->SD_csd.TAAC=tmp;				   		//数据读时间1
000036  70ca              STRB     r2,[r1,#3]
;;;281    	tmp=(u8)((CSD_Tab[0]&0x0000FF00)>>8);	  		//第2个字节
000038  4bb4              LDR      r3,|L16.780|
00003a  881b              LDRH     r3,[r3,#0]  ; CSD_Tab
00003c  f3c32207          UBFX     r2,r3,#8,#8
;;;282    	cardinfo->SD_csd.NSAC=tmp;		  				//数据读时间2
000040  710a              STRB     r2,[r1,#4]
;;;283    	tmp=(u8)(CSD_Tab[0]&0x000000FF);				//第3个字节
000042  4bb2              LDR      r3,|L16.780|
000044  781a              LDRB     r2,[r3,#0]  ; CSD_Tab
;;;284    	cardinfo->SD_csd.MaxBusClkFrec=tmp;		  		//传输速度	   
000046  714a              STRB     r2,[r1,#5]
;;;285    	tmp=(u8)((CSD_Tab[1]&0xFF000000)>>24);			//第4个字节
000048  685b              LDR      r3,[r3,#4]  ; CSD_Tab
00004a  0e1a              LSRS     r2,r3,#24
;;;286    	cardinfo->SD_csd.CardComdClasses=tmp<<4;    	//卡指令类高四位
00004c  0113              LSLS     r3,r2,#4
00004e  80cb              STRH     r3,[r1,#6]
;;;287    	tmp=(u8)((CSD_Tab[1]&0x00FF0000)>>16);	 		//第5个字节
000050  4bae              LDR      r3,|L16.780|
000052  685b              LDR      r3,[r3,#4]  ; CSD_Tab
000054  f3c34207          UBFX     r2,r3,#16,#8
;;;288    	cardinfo->SD_csd.CardComdClasses|=(tmp&0xF0)>>4;//卡指令类低四位
000058  88cb              LDRH     r3,[r1,#6]
00005a  ea431312          ORR      r3,r3,r2,LSR #4
00005e  80cb              STRH     r3,[r1,#6]
;;;289    	cardinfo->SD_csd.RdBlockLen=tmp&0x0F;	    	//最大读取数据长度
000060  f002030f          AND      r3,r2,#0xf
000064  720b              STRB     r3,[r1,#8]
;;;290    	tmp=(u8)((CSD_Tab[1]&0x0000FF00)>>8);			//第6个字节
000066  4ba9              LDR      r3,|L16.780|
000068  889b              LDRH     r3,[r3,#4]  ; CSD_Tab
00006a  f3c32207          UBFX     r2,r3,#8,#8
;;;291    	cardinfo->SD_csd.PartBlockRead=(tmp&0x80)>>7;	//允许分块读
00006e  09d3              LSRS     r3,r2,#7
000070  724b              STRB     r3,[r1,#9]
;;;292    	cardinfo->SD_csd.WrBlockMisalign=(tmp&0x40)>>6;	//写块错位
000072  f3c21380          UBFX     r3,r2,#6,#1
000076  728b              STRB     r3,[r1,#0xa]
;;;293    	cardinfo->SD_csd.RdBlockMisalign=(tmp&0x20)>>5;	//读块错位
000078  f3c21340          UBFX     r3,r2,#5,#1
00007c  72cb              STRB     r3,[r1,#0xb]
;;;294    	cardinfo->SD_csd.DSRImpl=(tmp&0x10)>>4;
00007e  f3c21300          UBFX     r3,r2,#4,#1
000082  730b              STRB     r3,[r1,#0xc]
;;;295    	cardinfo->SD_csd.Reserved2=0; 					//保留
000084  2300              MOVS     r3,#0
000086  734b              STRB     r3,[r1,#0xd]
;;;296     	if((CardType==SDIO_STD_CAPACITY_SD_CARD_V1_1)||(CardType==SDIO_STD_CAPACITY_SD_CARD_V2_0)||(SDIO_MULTIMEDIA_CARD==CardType))//标准1.1/2.0卡/MMC卡
000088  4b9e              LDR      r3,|L16.772|
00008a  781b              LDRB     r3,[r3,#0]  ; CardType
00008c  b13b              CBZ      r3,|L16.158|
00008e  4b9d              LDR      r3,|L16.772|
000090  781b              LDRB     r3,[r3,#0]  ; CardType
000092  2b01              CMP      r3,#1
000094  d003              BEQ      |L16.158|
000096  4b9b              LDR      r3,|L16.772|
000098  781b              LDRB     r3,[r3,#0]  ; CardType
00009a  2b03              CMP      r3,#3
00009c  d14f              BNE      |L16.318|
                  |L16.158|
;;;297    	{
;;;298    		cardinfo->SD_csd.DeviceSize=(tmp&0x03)<<10;	//C_SIZE(12位)
00009e  0793              LSLS     r3,r2,#30
0000a0  0d1b              LSRS     r3,r3,#20
0000a2  610b              STR      r3,[r1,#0x10]
;;;299    	 	tmp=(u8)(CSD_Tab[1]&0x000000FF); 			//第7个字节	
0000a4  4b99              LDR      r3,|L16.780|
0000a6  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;300    		cardinfo->SD_csd.DeviceSize|=(tmp)<<2;
0000a8  690b              LDR      r3,[r1,#0x10]
0000aa  ea430382          ORR      r3,r3,r2,LSL #2
0000ae  610b              STR      r3,[r1,#0x10]
;;;301     		tmp=(u8)((CSD_Tab[2]&0xFF000000)>>24);		//第8个字节	
0000b0  4b96              LDR      r3,|L16.780|
0000b2  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000b4  0e1a              LSRS     r2,r3,#24
;;;302    		cardinfo->SD_csd.DeviceSize|=(tmp&0xC0)>>6;
0000b6  690b              LDR      r3,[r1,#0x10]
0000b8  ea431392          ORR      r3,r3,r2,LSR #6
0000bc  610b              STR      r3,[r1,#0x10]
;;;303     		cardinfo->SD_csd.MaxRdCurrentVDDMin=(tmp&0x38)>>3;
0000be  f3c203c2          UBFX     r3,r2,#3,#3
0000c2  750b              STRB     r3,[r1,#0x14]
;;;304    		cardinfo->SD_csd.MaxRdCurrentVDDMax=(tmp&0x07);
0000c4  f0020307          AND      r3,r2,#7
0000c8  754b              STRB     r3,[r1,#0x15]
;;;305     		tmp=(u8)((CSD_Tab[2]&0x00FF0000)>>16);		//第9个字节	
0000ca  4b90              LDR      r3,|L16.780|
0000cc  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000ce  f3c34207          UBFX     r2,r3,#16,#8
;;;306    		cardinfo->SD_csd.MaxWrCurrentVDDMin=(tmp&0xE0)>>5;
0000d2  0953              LSRS     r3,r2,#5
0000d4  758b              STRB     r3,[r1,#0x16]
;;;307    		cardinfo->SD_csd.MaxWrCurrentVDDMax=(tmp&0x1C)>>2;
0000d6  f3c20382          UBFX     r3,r2,#2,#3
0000da  75cb              STRB     r3,[r1,#0x17]
;;;308    		cardinfo->SD_csd.DeviceSizeMul=(tmp&0x03)<<1;//C_SIZE_MULT
0000dc  0793              LSLS     r3,r2,#30
0000de  0f5b              LSRS     r3,r3,#29
0000e0  760b              STRB     r3,[r1,#0x18]
;;;309     		tmp=(u8)((CSD_Tab[2]&0x0000FF00)>>8);	  	//第10个字节	
0000e2  4b8a              LDR      r3,|L16.780|
0000e4  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
0000e6  f3c32207          UBFX     r2,r3,#8,#8
;;;310    		cardinfo->SD_csd.DeviceSizeMul|=(tmp&0x80)>>7;
0000ea  7e0b              LDRB     r3,[r1,#0x18]
0000ec  ea4313d2          ORR      r3,r3,r2,LSR #7
0000f0  760b              STRB     r3,[r1,#0x18]
;;;311     		cardinfo->CardCapacity=(cardinfo->SD_csd.DeviceSize+1);//计算卡容量
0000f2  690b              LDR      r3,[r1,#0x10]
0000f4  1c5b              ADDS     r3,r3,#1
0000f6  2400              MOVS     r4,#0
0000f8  e9c13412          STRD     r3,r4,[r1,#0x48]
;;;312    		cardinfo->CardCapacity*=(1<<(cardinfo->SD_csd.DeviceSizeMul+2));
0000fc  7e0b              LDRB     r3,[r1,#0x18]
0000fe  1c9b              ADDS     r3,r3,#2
000100  2401              MOVS     r4,#1
000102  fa04f303          LSL      r3,r4,r3
000106  17dc              ASRS     r4,r3,#31
000108  e9d15612          LDRD     r5,r6,[r1,#0x48]
00010c  fba57c03          UMULL    r7,r12,r5,r3
000110  fb06c303          MLA      r3,r6,r3,r12
000114  fb053304          MLA      r3,r5,r4,r3
000118  e9c17312          STRD     r7,r3,[r1,#0x48]
;;;313    		cardinfo->CardBlockSize=1<<(cardinfo->SD_csd.RdBlockLen);//块大小
00011c  7a0c              LDRB     r4,[r1,#8]
00011e  2301              MOVS     r3,#1
000120  40a3              LSLS     r3,r3,r4
000122  650b              STR      r3,[r1,#0x50]
;;;314    		cardinfo->CardCapacity*=cardinfo->CardBlockSize;
000124  2400              MOVS     r4,#0
000126  e9d16512          LDRD     r6,r5,[r1,#0x48]
00012a  6d0b              LDR      r3,[r1,#0x50]
00012c  fba67c03          UMULL    r7,r12,r6,r3
000130  fb05c303          MLA      r3,r5,r3,r12
000134  fb063304          MLA      r3,r6,r4,r3
000138  e9c17312          STRD     r7,r3,[r1,#0x48]
00013c  e02e              B        |L16.412|
                  |L16.318|
;;;315    	}else if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)	//高容量卡
00013e  4b71              LDR      r3,|L16.772|
000140  781b              LDRB     r3,[r3,#0]  ; CardType
000142  2b02              CMP      r3,#2
000144  d12a              BNE      |L16.412|
;;;316    	{
;;;317     		tmp=(u8)(CSD_Tab[1]&0x000000FF); 		//第7个字节	
000146  4b71              LDR      r3,|L16.780|
000148  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;318    		cardinfo->SD_csd.DeviceSize=(tmp&0x3F)<<16;//C_SIZE
00014a  0693              LSLS     r3,r2,#26
00014c  0a9b              LSRS     r3,r3,#10
00014e  610b              STR      r3,[r1,#0x10]
;;;319     		tmp=(u8)((CSD_Tab[2]&0xFF000000)>>24); 	//第8个字节	
000150  4b6e              LDR      r3,|L16.780|
000152  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000154  0e1a              LSRS     r2,r3,#24
;;;320     		cardinfo->SD_csd.DeviceSize|=(tmp<<8);
000156  690b              LDR      r3,[r1,#0x10]
000158  ea432302          ORR      r3,r3,r2,LSL #8
00015c  610b              STR      r3,[r1,#0x10]
;;;321     		tmp=(u8)((CSD_Tab[2]&0x00FF0000)>>16);	//第9个字节	
00015e  4b6b              LDR      r3,|L16.780|
000160  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000162  f3c34207          UBFX     r2,r3,#16,#8
;;;322     		cardinfo->SD_csd.DeviceSize|=(tmp);
000166  690b              LDR      r3,[r1,#0x10]
000168  4313              ORRS     r3,r3,r2
00016a  610b              STR      r3,[r1,#0x10]
;;;323     		tmp=(u8)((CSD_Tab[2]&0x0000FF00)>>8); 	//第10个字节	
00016c  4b67              LDR      r3,|L16.780|
00016e  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
000170  f3c32207          UBFX     r2,r3,#8,#8
;;;324     		cardinfo->CardCapacity=(long long)(cardinfo->SD_csd.DeviceSize+1)*512*1024;//计算卡容量
000174  690b              LDR      r3,[r1,#0x10]
000176  1c5b              ADDS     r3,r3,#1
000178  f44f7400          MOV      r4,#0x200
00017c  fba34604          UMULL    r4,r6,r3,r4
000180  f44f6380          MOV      r3,#0x400
000184  2500              MOVS     r5,#0
000186  fba47c03          UMULL    r7,r12,r4,r3
00018a  fb06c303          MLA      r3,r6,r3,r12
00018e  fb043305          MLA      r3,r4,r5,r3
000192  e9c17312          STRD     r7,r3,[r1,#0x48]
;;;325    		cardinfo->CardBlockSize=512; 			//块大小固定为512字节
000196  f44f7300          MOV      r3,#0x200
00019a  650b              STR      r3,[r1,#0x50]
                  |L16.412|
;;;326    	}	  
;;;327    	cardinfo->SD_csd.EraseGrSize=(tmp&0x40)>>6;
00019c  f3c21380          UBFX     r3,r2,#6,#1
0001a0  f8013f19          STRB     r3,[r1,#0x19]!
;;;328    	cardinfo->SD_csd.EraseGrMul=(tmp&0x3F)<<1;	   
0001a4  0693              LSLS     r3,r2,#26
0001a6  0e5b              LSRS     r3,r3,#25
0001a8  704b              STRB     r3,[r1,#1]
;;;329    	tmp=(u8)(CSD_Tab[2]&0x000000FF);			//第11个字节	
0001aa  4b58              LDR      r3,|L16.780|
0001ac  7a1a              LDRB     r2,[r3,#8]  ; CSD_Tab
;;;330    	cardinfo->SD_csd.EraseGrMul|=(tmp&0x80)>>7;
0001ae  784b              LDRB     r3,[r1,#1]
0001b0  ea4313d2          ORR      r3,r3,r2,LSR #7
0001b4  704b              STRB     r3,[r1,#1]
;;;331    	cardinfo->SD_csd.WrProtectGrSize=(tmp&0x7F);
0001b6  f002037f          AND      r3,r2,#0x7f
0001ba  708b              STRB     r3,[r1,#2]
;;;332     	tmp=(u8)((CSD_Tab[3]&0xFF000000)>>24);		//第12个字节	
0001bc  4b53              LDR      r3,|L16.780|
0001be  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0001c0  0e1a              LSRS     r2,r3,#24
;;;333    	cardinfo->SD_csd.WrProtectGrEnable=(tmp&0x80)>>7;
0001c2  09d3              LSRS     r3,r2,#7
0001c4  70cb              STRB     r3,[r1,#3]
;;;334    	cardinfo->SD_csd.ManDeflECC=(tmp&0x60)>>5;
0001c6  f3c21341          UBFX     r3,r2,#5,#2
0001ca  710b              STRB     r3,[r1,#4]
;;;335    	cardinfo->SD_csd.WrSpeedFact=(tmp&0x1C)>>2;
0001cc  f3c20382          UBFX     r3,r2,#2,#3
0001d0  714b              STRB     r3,[r1,#5]
;;;336    	cardinfo->SD_csd.MaxWrBlockLen=(tmp&0x03)<<2;	 
0001d2  0793              LSLS     r3,r2,#30
0001d4  0f1b              LSRS     r3,r3,#28
0001d6  718b              STRB     r3,[r1,#6]
;;;337    	tmp=(u8)((CSD_Tab[3]&0x00FF0000)>>16);		//第13个字节
0001d8  4b4c              LDR      r3,|L16.780|
0001da  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0001dc  f3c34207          UBFX     r2,r3,#16,#8
;;;338    	cardinfo->SD_csd.MaxWrBlockLen|=(tmp&0xC0)>>6;
0001e0  798b              LDRB     r3,[r1,#6]
0001e2  ea431392          ORR      r3,r3,r2,LSR #6
0001e6  718b              STRB     r3,[r1,#6]
;;;339    	cardinfo->SD_csd.WriteBlockPaPartial=(tmp&0x20)>>5;
0001e8  f3c21340          UBFX     r3,r2,#5,#1
0001ec  71cb              STRB     r3,[r1,#7]
;;;340    	cardinfo->SD_csd.Reserved3=0;
0001ee  2300              MOVS     r3,#0
0001f0  720b              STRB     r3,[r1,#8]
;;;341    	cardinfo->SD_csd.ContentProtectAppli=(tmp&0x01);  
0001f2  f0020301          AND      r3,r2,#1
0001f6  724b              STRB     r3,[r1,#9]
;;;342    	tmp=(u8)((CSD_Tab[3]&0x0000FF00)>>8);		//第14个字节
0001f8  4b44              LDR      r3,|L16.780|
0001fa  899b              LDRH     r3,[r3,#0xc]  ; CSD_Tab
0001fc  f3c32207          UBFX     r2,r3,#8,#8
;;;343    	cardinfo->SD_csd.FileFormatGrouop=(tmp&0x80)>>7;
000200  09d3              LSRS     r3,r2,#7
000202  728b              STRB     r3,[r1,#0xa]
;;;344    	cardinfo->SD_csd.CopyFlag=(tmp&0x40)>>6;
000204  f3c21380          UBFX     r3,r2,#6,#1
000208  72cb              STRB     r3,[r1,#0xb]
;;;345    	cardinfo->SD_csd.PermWrProtect=(tmp&0x20)>>5;
00020a  f3c21340          UBFX     r3,r2,#5,#1
00020e  730b              STRB     r3,[r1,#0xc]
;;;346    	cardinfo->SD_csd.TempWrProtect=(tmp&0x10)>>4;
000210  f3c21300          UBFX     r3,r2,#4,#1
000214  734b              STRB     r3,[r1,#0xd]
;;;347    	cardinfo->SD_csd.FileFormat=(tmp&0x0C)>>2;
000216  f3c20381          UBFX     r3,r2,#2,#2
00021a  738b              STRB     r3,[r1,#0xe]
;;;348    	cardinfo->SD_csd.ECC=(tmp&0x03);  
00021c  f0020303          AND      r3,r2,#3
000220  73cb              STRB     r3,[r1,#0xf]
;;;349    	tmp=(u8)(CSD_Tab[3]&0x000000FF);			//第15个字节
000222  4b3a              LDR      r3,|L16.780|
000224  7b1a              LDRB     r2,[r3,#0xc]  ; CSD_Tab
;;;350    	cardinfo->SD_csd.CSD_CRC=(tmp&0xFE)>>1;
000226  0853              LSRS     r3,r2,#1
000228  740b              STRB     r3,[r1,#0x10]
;;;351    	cardinfo->SD_csd.Reserved4=1;		 
00022a  2301              MOVS     r3,#1
00022c  744b              STRB     r3,[r1,#0x11]
;;;352    	tmp=(u8)((CID_Tab[0]&0xFF000000)>>24);		//第0个字节
00022e  4b38              LDR      r3,|L16.784|
000230  681b              LDR      r3,[r3,#0]  ; CID_Tab
000232  0e1a              LSRS     r2,r3,#24
;;;353    	cardinfo->SD_cid.ManufacturerID=tmp;		    
000234  74ca              STRB     r2,[r1,#0x13]
000236  3919              SUBS     r1,r1,#0x19
;;;354    	tmp=(u8)((CID_Tab[0]&0x00FF0000)>>16);		//第1个字节
000238  4b35              LDR      r3,|L16.784|
00023a  681b              LDR      r3,[r3,#0]  ; CID_Tab
00023c  f3c34207          UBFX     r2,r3,#16,#8
;;;355    	cardinfo->SD_cid.OEM_AppliID=tmp<<8;	  
000240  0214              LSLS     r4,r2,#8
000242  85cc              STRH     r4,[r1,#0x2e]
;;;356    	tmp=(u8)((CID_Tab[0]&0x000000FF00)>>8);		//第2个字节
000244  4b32              LDR      r3,|L16.784|
000246  881b              LDRH     r3,[r3,#0]  ; CID_Tab
000248  f3c32207          UBFX     r2,r3,#8,#8
;;;357    	cardinfo->SD_cid.OEM_AppliID|=tmp;	    
00024c  8dcb              LDRH     r3,[r1,#0x2e]
00024e  4313              ORRS     r3,r3,r2
000250  85cb              STRH     r3,[r1,#0x2e]
;;;358    	tmp=(u8)(CID_Tab[0]&0x000000FF);			//第3个字节	
000252  4b2f              LDR      r3,|L16.784|
000254  781a              LDRB     r2,[r3,#0]  ; CID_Tab
;;;359    	cardinfo->SD_cid.ProdName1=tmp<<24;				  
000256  0614              LSLS     r4,r2,#24
000258  630c              STR      r4,[r1,#0x30]
;;;360    	tmp=(u8)((CID_Tab[1]&0xFF000000)>>24); 		//第4个字节
00025a  685b              LDR      r3,[r3,#4]  ; CID_Tab
00025c  0e1a              LSRS     r2,r3,#24
;;;361    	cardinfo->SD_cid.ProdName1|=tmp<<16;	  
00025e  6b0b              LDR      r3,[r1,#0x30]
000260  ea434402          ORR      r4,r3,r2,LSL #16
000264  630c              STR      r4,[r1,#0x30]
;;;362    	tmp=(u8)((CID_Tab[1]&0x00FF0000)>>16);	   	//第5个字节
000266  4b2a              LDR      r3,|L16.784|
000268  685b              LDR      r3,[r3,#4]  ; CID_Tab
00026a  f3c34207          UBFX     r2,r3,#16,#8
;;;363    	cardinfo->SD_cid.ProdName1|=tmp<<8;		 
00026e  6b0b              LDR      r3,[r1,#0x30]
000270  ea432402          ORR      r4,r3,r2,LSL #8
000274  630c              STR      r4,[r1,#0x30]
;;;364    	tmp=(u8)((CID_Tab[1]&0x0000FF00)>>8);		//第6个字节
000276  4b26              LDR      r3,|L16.784|
000278  889b              LDRH     r3,[r3,#4]  ; CID_Tab
00027a  f3c32207          UBFX     r2,r3,#8,#8
;;;365    	cardinfo->SD_cid.ProdName1|=tmp;		   
00027e  6b0b              LDR      r3,[r1,#0x30]
000280  4313              ORRS     r3,r3,r2
000282  630b              STR      r3,[r1,#0x30]
;;;366    	tmp=(u8)(CID_Tab[1]&0x000000FF);	  		//第7个字节
000284  4b22              LDR      r3,|L16.784|
000286  791a              LDRB     r2,[r3,#4]  ; CID_Tab
;;;367    	cardinfo->SD_cid.ProdName2=tmp;			  
000288  2334              MOVS     r3,#0x34
00028a  545a              STRB     r2,[r3,r1]
;;;368    	tmp=(u8)((CID_Tab[2]&0xFF000000)>>24); 		//第8个字节
00028c  4b20              LDR      r3,|L16.784|
00028e  689b              LDR      r3,[r3,#8]  ; CID_Tab
000290  0e1a              LSRS     r2,r3,#24
;;;369    	cardinfo->SD_cid.ProdRev=tmp;		 
000292  2335              MOVS     r3,#0x35
000294  545a              STRB     r2,[r3,r1]
;;;370    	tmp=(u8)((CID_Tab[2]&0x00FF0000)>>16);		//第9个字节
000296  4b1e              LDR      r3,|L16.784|
000298  689b              LDR      r3,[r3,#8]  ; CID_Tab
00029a  f3c34207          UBFX     r2,r3,#16,#8
;;;371    	cardinfo->SD_cid.ProdSN=tmp<<24;	   
00029e  0614              LSLS     r4,r2,#24
0002a0  638c              STR      r4,[r1,#0x38]
;;;372    	tmp=(u8)((CID_Tab[2]&0x0000FF00)>>8); 		//第10个字节
0002a2  4b1b              LDR      r3,|L16.784|
0002a4  891b              LDRH     r3,[r3,#8]  ; CID_Tab
0002a6  f3c32207          UBFX     r2,r3,#8,#8
;;;373    	cardinfo->SD_cid.ProdSN|=tmp<<16;	   
0002aa  6b8b              LDR      r3,[r1,#0x38]
0002ac  ea434402          ORR      r4,r3,r2,LSL #16
0002b0  638c              STR      r4,[r1,#0x38]
;;;374    	tmp=(u8)(CID_Tab[2]&0x000000FF);   			//第11个字节
0002b2  4b17              LDR      r3,|L16.784|
0002b4  7a1a              LDRB     r2,[r3,#8]  ; CID_Tab
;;;375    	cardinfo->SD_cid.ProdSN|=tmp<<8;		   
0002b6  6b8b              LDR      r3,[r1,#0x38]
0002b8  ea432402          ORR      r4,r3,r2,LSL #8
0002bc  638c              STR      r4,[r1,#0x38]
;;;376    	tmp=(u8)((CID_Tab[3]&0xFF000000)>>24); 		//第12个字节
0002be  4b14              LDR      r3,|L16.784|
0002c0  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0002c2  0e1a              LSRS     r2,r3,#24
;;;377    	cardinfo->SD_cid.ProdSN|=tmp;			     
0002c4  6b8b              LDR      r3,[r1,#0x38]
0002c6  4313              ORRS     r3,r3,r2
0002c8  638b              STR      r3,[r1,#0x38]
;;;378    	tmp=(u8)((CID_Tab[3]&0x00FF0000)>>16);	 	//第13个字节
0002ca  4b11              LDR      r3,|L16.784|
0002cc  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0002ce  f3c34207          UBFX     r2,r3,#16,#8
;;;379    	cardinfo->SD_cid.Reserved1|=(tmp&0xF0)>>4;
0002d2  233c              MOVS     r3,#0x3c
0002d4  5c5b              LDRB     r3,[r3,r1]
0002d6  ea431412          ORR      r4,r3,r2,LSR #4
0002da  233c              MOVS     r3,#0x3c
0002dc  545c              STRB     r4,[r3,r1]
;;;380    	cardinfo->SD_cid.ManufactDate=(tmp&0x0F)<<8;    
0002de  0713              LSLS     r3,r2,#28
0002e0  0d1c              LSRS     r4,r3,#20
0002e2  87cc              STRH     r4,[r1,#0x3e]
;;;381    	tmp=(u8)((CID_Tab[3]&0x0000FF00)>>8);		//第14个字节
0002e4  4b0a              LDR      r3,|L16.784|
0002e6  899b              LDRH     r3,[r3,#0xc]  ; CID_Tab
0002e8  f3c32207          UBFX     r2,r3,#8,#8
;;;382    	cardinfo->SD_cid.ManufactDate|=tmp;		 	  
0002ec  8fcb              LDRH     r3,[r1,#0x3e]
0002ee  4313              ORRS     r3,r3,r2
0002f0  87cb              STRH     r3,[r1,#0x3e]
;;;383    	tmp=(u8)(CID_Tab[3]&0x000000FF);			//第15个字节
0002f2  4b07              LDR      r3,|L16.784|
0002f4  7b1a              LDRB     r2,[r3,#0xc]  ; CID_Tab
;;;384    	cardinfo->SD_cid.CID_CRC=(tmp&0xFE)>>1;
0002f6  0854              LSRS     r4,r2,#1
0002f8  2340              MOVS     r3,#0x40
0002fa  545c              STRB     r4,[r3,r1]
;;;385    	cardinfo->SD_cid.Reserved2=1;	 
0002fc  2401              MOVS     r4,#1
0002fe  2341              MOVS     r3,#0x41
000300  545c              STRB     r4,[r3,r1]
;;;386    	return errorstatus;
;;;387    }
000302  bdf0              POP      {r4-r7,pc}
;;;388    //设置SDIO总线宽度(MMC卡不支持4bit模式)
                          ENDP

                  |L16.772|
                          DCD      CardType
                  |L16.776|
                          DCD      ||RCA||
                  |L16.780|
                          DCD      CSD_Tab
                  |L16.784|
                          DCD      CID_Tab

                          AREA ||i.SD_GetState||, CODE, READONLY, ALIGN=1

                  SD_GetState PROC
;;;1157   //返回值:SD卡状态
;;;1158   SDCardState SD_GetState(void)
000000  b508              PUSH     {r3,lr}
;;;1159   {
;;;1160   	u32 resp1=0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;1161   	if(SD_SendStatus(&resp1)!=SD_OK)return SD_CARD_ERROR;
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       SD_SendStatus
00000c  b108              CBZ      r0,|L17.18|
00000e  20ff              MOVS     r0,#0xff
                  |L17.16|
;;;1162   	else return (SDCardState)((resp1>>9) & 0x0F);
;;;1163   }
000010  bd08              POP      {r3,pc}
                  |L17.18|
000012  9800              LDR      r0,[sp,#0]            ;1162
000014  f3c02043          UBFX     r0,r0,#9,#4           ;1162
000018  e7fa              B        |L17.16|
;;;1164   //查找SD卡的SCR寄存器值
                          ENDP


                          AREA ||i.SD_Init||, CODE, READONLY, ALIGN=2

                  SD_Init PROC
;;;41     //返回值:错误代码;(0,无错误)
;;;42     SD_Error SD_Init(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;43     {
;;;44     	SD_Error errorstatus=SD_OK;	  
000002  2400              MOVS     r4,#0
;;;45     	u8 clkdiv=0;
000004  2500              MOVS     r5,#0
;;;46     	//SDIO IO口初始化   	 
;;;47     	RCC->AHB1ENR|=1<<2;    		//使能PORTC时钟
000006  4855              LDR      r0,|L18.348|
000008  6800              LDR      r0,[r0,#0]
00000a  f0400004          ORR      r0,r0,#4
00000e  4953              LDR      r1,|L18.348|
000010  6008              STR      r0,[r1,#0]
;;;48     	RCC->AHB1ENR|=1<<3;    		//使能PORTD时钟 
000012  4608              MOV      r0,r1
000014  6800              LDR      r0,[r0,#0]
000016  f0400008          ORR      r0,r0,#8
00001a  6008              STR      r0,[r1,#0]
;;;49     	RCC->AHB1ENR|=1<<22;		//DMA2时钟使能
00001c  4608              MOV      r0,r1
00001e  6800              LDR      r0,[r0,#0]
000020  f4400080          ORR      r0,r0,#0x400000
000024  6008              STR      r0,[r1,#0]
;;;50     	RCC->APB2ENR|=1<<11;		//SDIO时钟使能
000026  484d              LDR      r0,|L18.348|
000028  3014              ADDS     r0,r0,#0x14
00002a  6800              LDR      r0,[r0,#0]
00002c  f4406000          ORR      r0,r0,#0x800
000030  494a              LDR      r1,|L18.348|
000032  3114              ADDS     r1,r1,#0x14
000034  6008              STR      r0,[r1,#0]
;;;51     	RCC->APB2RSTR|=1<<11;		//SDIO复位
000036  4849              LDR      r0,|L18.348|
000038  380c              SUBS     r0,r0,#0xc
00003a  6800              LDR      r0,[r0,#0]
00003c  f4406000          ORR      r0,r0,#0x800
000040  4946              LDR      r1,|L18.348|
000042  390c              SUBS     r1,r1,#0xc
000044  6008              STR      r0,[r1,#0]
;;;52     	GPIO_Set(GPIOC,0X1F<<8,GPIO_MODE_AF,GPIO_OTYPE_PP,GPIO_SPEED_50M,GPIO_PUPD_PU);	//PC8,9,10,11,12复用功能输出	
000046  2001              MOVS     r0,#1
000048  2102              MOVS     r1,#2
00004a  2300              MOVS     r3,#0
00004c  460a              MOV      r2,r1
00004e  e9cd1000          STRD     r1,r0,[sp,#0]
000052  f44f51f8          MOV      r1,#0x1f00
000056  4842              LDR      r0,|L18.352|
000058  f7fffffe          BL       GPIO_Set
;;;53      	GPIO_Set(GPIOD,1<<2,GPIO_MODE_AF,GPIO_OTYPE_PP,GPIO_SPEED_50M,GPIO_PUPD_PU);	//PD2复用功能输出	
00005c  2001              MOVS     r0,#1
00005e  2102              MOVS     r1,#2
000060  2300              MOVS     r3,#0
000062  460a              MOV      r2,r1
000064  e9cd1000          STRD     r1,r0,[sp,#0]
000068  2104              MOVS     r1,#4
00006a  483e              LDR      r0,|L18.356|
00006c  f7fffffe          BL       GPIO_Set
;;;54       	GPIO_AF_Set(GPIOC,8,12);	//PC8,AF12
000070  220c              MOVS     r2,#0xc
000072  2108              MOVS     r1,#8
000074  483a              LDR      r0,|L18.352|
000076  f7fffffe          BL       GPIO_AF_Set
;;;55      	GPIO_AF_Set(GPIOC,9,12);	//PC9,AF12
00007a  220c              MOVS     r2,#0xc
00007c  2109              MOVS     r1,#9
00007e  4838              LDR      r0,|L18.352|
000080  f7fffffe          BL       GPIO_AF_Set
;;;56      	GPIO_AF_Set(GPIOC,10,12);	//PC10,AF12 
000084  220c              MOVS     r2,#0xc
000086  210a              MOVS     r1,#0xa
000088  4835              LDR      r0,|L18.352|
00008a  f7fffffe          BL       GPIO_AF_Set
;;;57      	GPIO_AF_Set(GPIOC,11,12);	//PC11,AF12 
00008e  220c              MOVS     r2,#0xc
000090  210b              MOVS     r1,#0xb
000092  4833              LDR      r0,|L18.352|
000094  f7fffffe          BL       GPIO_AF_Set
;;;58      	GPIO_AF_Set(GPIOC,12,12);	//PC12,AF12 
000098  220c              MOVS     r2,#0xc
00009a  4611              MOV      r1,r2
00009c  4830              LDR      r0,|L18.352|
00009e  f7fffffe          BL       GPIO_AF_Set
;;;59      	GPIO_AF_Set(GPIOD,2,12);	//PD2,AF12    
0000a2  220c              MOVS     r2,#0xc
0000a4  2102              MOVS     r1,#2
0000a6  482f              LDR      r0,|L18.356|
0000a8  f7fffffe          BL       GPIO_AF_Set
;;;60     	RCC->APB2RSTR&=~(1<<11);	//SDIO结束复位
0000ac  482b              LDR      r0,|L18.348|
0000ae  380c              SUBS     r0,r0,#0xc
0000b0  6800              LDR      r0,[r0,#0]
0000b2  f4206000          BIC      r0,r0,#0x800
0000b6  4929              LDR      r1,|L18.348|
0000b8  390c              SUBS     r1,r1,#0xc
0000ba  6008              STR      r0,[r1,#0]
;;;61      	//SDIO外设寄存器设置为默认值 			   
;;;62     	SDIO->POWER=0x00000000;
0000bc  2000              MOVS     r0,#0
0000be  492a              LDR      r1,|L18.360|
0000c0  6008              STR      r0,[r1,#0]
;;;63     	SDIO->CLKCR=0x00000000;
0000c2  1d09              ADDS     r1,r1,#4
0000c4  6008              STR      r0,[r1,#0]
;;;64     	SDIO->ARG=0x00000000;
0000c6  1d09              ADDS     r1,r1,#4
0000c8  6008              STR      r0,[r1,#0]
;;;65     	SDIO->CMD=0x00000000;
0000ca  1d09              ADDS     r1,r1,#4
0000cc  6008              STR      r0,[r1,#0]
;;;66     	SDIO->DTIMER=0x00000000;
0000ce  4926              LDR      r1,|L18.360|
0000d0  3124              ADDS     r1,r1,#0x24
0000d2  6008              STR      r0,[r1,#0]
;;;67     	SDIO->DLEN=0x00000000;
0000d4  1d09              ADDS     r1,r1,#4
0000d6  6008              STR      r0,[r1,#0]
;;;68     	SDIO->DCTRL=0x00000000;
0000d8  1d09              ADDS     r1,r1,#4
0000da  6008              STR      r0,[r1,#0]
;;;69     	SDIO->ICR=0x00C007FF;
0000dc  4823              LDR      r0,|L18.364|
0000de  4922              LDR      r1,|L18.360|
0000e0  3138              ADDS     r1,r1,#0x38
0000e2  6008              STR      r0,[r1,#0]
;;;70     	SDIO->MASK=0x00000000;	  
0000e4  2000              MOVS     r0,#0
0000e6  1d09              ADDS     r1,r1,#4
0000e8  6008              STR      r0,[r1,#0]
;;;71      	MY_NVIC_Init(0,0,SDIO_IRQn,2);		//SDIO中断配置
0000ea  2302              MOVS     r3,#2
0000ec  2231              MOVS     r2,#0x31
0000ee  2100              MOVS     r1,#0
0000f0  4608              MOV      r0,r1
0000f2  f7fffffe          BL       MY_NVIC_Init
;;;72        	errorstatus=SD_PowerON();			//SD卡上电
0000f6  f7fffffe          BL       SD_PowerON
0000fa  4604              MOV      r4,r0
;;;73      	if(errorstatus==SD_OK)errorstatus=SD_InitializeCards();			//初始化SD卡														  
0000fc  b914              CBNZ     r4,|L18.260|
0000fe  f7fffffe          BL       SD_InitializeCards
000102  4604              MOV      r4,r0
                  |L18.260|
;;;74       	if(errorstatus==SD_OK)errorstatus=SD_GetCardInfo(&SDCardInfo);	//获取卡信息
000104  b91c              CBNZ     r4,|L18.270|
000106  481a              LDR      r0,|L18.368|
000108  f7fffffe          BL       SD_GetCardInfo
00010c  4604              MOV      r4,r0
                  |L18.270|
;;;75      	if(errorstatus==SD_OK)errorstatus=SD_SelectDeselect((u32)(SDCardInfo.RCA<<16));//选中SD卡   
00010e  b934              CBNZ     r4,|L18.286|
000110  4917              LDR      r1,|L18.368|
000112  f8b11054          LDRH     r1,[r1,#0x54]  ; SDCardInfo
000116  0408              LSLS     r0,r1,#16
000118  f7fffffe          BL       SD_SelectDeselect
00011c  4604              MOV      r4,r0
                  |L18.286|
;;;76        	if(errorstatus==SD_OK)errorstatus=SD_EnableWideBusOperation(1);	//4位宽度,如果是MMC卡,则不能用4位模式 
00011e  b91c              CBNZ     r4,|L18.296|
000120  2001              MOVS     r0,#1
000122  f7fffffe          BL       SD_EnableWideBusOperation
000126  4604              MOV      r4,r0
                  |L18.296|
;;;77       	if((errorstatus==SD_OK)||(SDIO_MULTIMEDIA_CARD==CardType))
000128  b11c              CBZ      r4,|L18.306|
00012a  4812              LDR      r0,|L18.372|
00012c  7800              LDRB     r0,[r0,#0]  ; CardType
00012e  2803              CMP      r0,#3
000130  d112              BNE      |L18.344|
                  |L18.306|
;;;78     	{  		    
;;;79     		if(SDCardInfo.CardType==SDIO_STD_CAPACITY_SD_CARD_V1_1||SDCardInfo.CardType==SDIO_STD_CAPACITY_SD_CARD_V2_0)
000132  480f              LDR      r0,|L18.368|
000134  f8900056          LDRB     r0,[r0,#0x56]  ; SDCardInfo
000138  b120              CBZ      r0,|L18.324|
00013a  480d              LDR      r0,|L18.368|
00013c  f8900056          LDRB     r0,[r0,#0x56]  ; SDCardInfo
000140  2801              CMP      r0,#1
000142  d101              BNE      |L18.328|
                  |L18.324|
;;;80     		{
;;;81     			clkdiv=SDIO_TRANSFER_CLK_DIV+2;	//V1.1/V2.0卡，设置最高48/4=12Mhz
000144  2502              MOVS     r5,#2
000146  e000              B        |L18.330|
                  |L18.328|
;;;82     		}else clkdiv=SDIO_TRANSFER_CLK_DIV;	//SDHC等其他卡，设置最高48/2=24Mhz
000148  2500              MOVS     r5,#0
                  |L18.330|
;;;83     		SDIO_Clock_Set(clkdiv);	//设置时钟频率,SDIO时钟计算公式:SDIO_CK时钟=SDIOCLK/[clkdiv+2];其中,SDIOCLK固定为48Mhz 
00014a  4628              MOV      r0,r5
00014c  f7fffffe          BL       SDIO_Clock_Set
;;;84     		errorstatus=SD_SetDeviceMode(SD_DMA_MODE);	//设置为DMA模式
000150  2001              MOVS     r0,#1
000152  f7fffffe          BL       SD_SetDeviceMode
000156  4604              MOV      r4,r0
                  |L18.344|
;;;85     		//errorstatus=SD_SetDeviceMode(SD_POLLING_MODE);//设置为查询模式
;;;86      	}
;;;87     	return errorstatus;		 
000158  4620              MOV      r0,r4
;;;88     }
00015a  bd7c              POP      {r2-r6,pc}
;;;89     //SDIO时钟初始化设置
                          ENDP

                  |L18.348|
                          DCD      0x40023830
                  |L18.352|
                          DCD      0x40020800
                  |L18.356|
                          DCD      0x40020c00
                  |L18.360|
                          DCD      0x40012c00
                  |L18.364|
                          DCD      0x00c007ff
                  |L18.368|
                          DCD      SDCardInfo
                  |L18.372|
                          DCD      CardType

                          AREA ||i.SD_InitializeCards||, CODE, READONLY, ALIGN=2

                  SD_InitializeCards PROC
;;;225    //返回值:错误代码
;;;226    SD_Error SD_InitializeCards(void)
000000  b518              PUSH     {r3,r4,lr}
;;;227    {
;;;228     	SD_Error errorstatus=SD_OK;
000002  2400              MOVS     r4,#0
;;;229    	u16 rca = 0x01;
000004  2001              MOVS     r0,#1
000006  9000              STR      r0,[sp,#0]
;;;230     	if((SDIO->POWER&0X03)==0)return SD_REQUEST_NOT_APPLICABLE;//检查电源状态,确保为上电状态
000008  483d              LDR      r0,|L19.256|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0000003          AND      r0,r0,#3
000010  b908              CBNZ     r0,|L19.22|
000012  2025              MOVS     r0,#0x25
                  |L19.20|
;;;231     	if(SDIO_SECURE_DIGITAL_IO_CARD!=CardType)			//非SECURE_DIGITAL_IO_CARD
;;;232    	{
;;;233    		SDIO_Send_Cmd(SD_CMD_ALL_SEND_CID,3,0);			//发送CMD2,取得CID,长响应	 
;;;234    		errorstatus=CmdResp2Error(); 					//等待R2响应   
;;;235    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误		    
;;;236     		CID_Tab[0]=SDIO->RESP1;
;;;237    		CID_Tab[1]=SDIO->RESP2;
;;;238    		CID_Tab[2]=SDIO->RESP3;
;;;239    		CID_Tab[3]=SDIO->RESP4;
;;;240    	}
;;;241    	if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_SECURE_DIGITAL_IO_COMBO_CARD==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))//判断卡类型
;;;242    	{
;;;243    		SDIO_Send_Cmd(SD_CMD_SET_REL_ADDR,1,0);			//发送CMD3,短响应 
;;;244    		errorstatus=CmdResp6Error(SD_CMD_SET_REL_ADDR,&rca);//等待R6响应 
;;;245    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误		    
;;;246    	}   
;;;247        if (SDIO_MULTIMEDIA_CARD==CardType)
;;;248        {
;;;249     		SDIO_Send_Cmd(SD_CMD_SET_REL_ADDR,1,(u32)(rca<<16));//发送CMD3,短响应 	   
;;;250    		errorstatus=CmdResp2Error(); 					//等待R2响应   
;;;251    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;252        }
;;;253    	if (SDIO_SECURE_DIGITAL_IO_CARD!=CardType)			//非SECURE_DIGITAL_IO_CARD
;;;254    	{
;;;255    		RCA = rca;
;;;256    		SDIO_Send_Cmd(SD_CMD_SEND_CSD,3,(u32)(rca<<16));//发送CMD9+卡RCA,取得CSD,长响应 	   
;;;257    		errorstatus=CmdResp2Error(); 					//等待R2响应   
;;;258    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误		    
;;;259      		CSD_Tab[0]=SDIO->RESP1;
;;;260    		CSD_Tab[1]=SDIO->RESP2;
;;;261    		CSD_Tab[2]=SDIO->RESP3;						
;;;262    		CSD_Tab[3]=SDIO->RESP4;					    
;;;263    	}
;;;264    	return SD_OK;//卡初始化成功
;;;265    } 
000014  bd18              POP      {r3,r4,pc}
                  |L19.22|
000016  483b              LDR      r0,|L19.260|
000018  7800              LDRB     r0,[r0,#0]            ;231  ; CardType
00001a  2804              CMP      r0,#4                 ;231
00001c  d01b              BEQ      |L19.86|
00001e  2200              MOVS     r2,#0                 ;233
000020  2103              MOVS     r1,#3                 ;233
000022  2002              MOVS     r0,#2                 ;233
000024  f7fffffe          BL       SDIO_Send_Cmd
000028  f7fffffe          BL       CmdResp2Error
00002c  4604              MOV      r4,r0                 ;234
00002e  b10c              CBZ      r4,|L19.52|
000030  4620              MOV      r0,r4                 ;235
000032  e7ef              B        |L19.20|
                  |L19.52|
000034  4832              LDR      r0,|L19.256|
000036  3014              ADDS     r0,r0,#0x14           ;236
000038  6800              LDR      r0,[r0,#0]            ;236
00003a  4933              LDR      r1,|L19.264|
00003c  6008              STR      r0,[r1,#0]            ;236  ; CID_Tab
00003e  4830              LDR      r0,|L19.256|
000040  3018              ADDS     r0,r0,#0x18           ;237
000042  6800              LDR      r0,[r0,#0]            ;237
000044  6048              STR      r0,[r1,#4]            ;237  ; CID_Tab
000046  482e              LDR      r0,|L19.256|
000048  301c              ADDS     r0,r0,#0x1c           ;238
00004a  6800              LDR      r0,[r0,#0]            ;238
00004c  6088              STR      r0,[r1,#8]            ;238  ; CID_Tab
00004e  482c              LDR      r0,|L19.256|
000050  3020              ADDS     r0,r0,#0x20           ;239
000052  6800              LDR      r0,[r0,#0]            ;239
000054  60c8              STR      r0,[r1,#0xc]          ;239  ; CID_Tab
                  |L19.86|
000056  482b              LDR      r0,|L19.260|
000058  7800              LDRB     r0,[r0,#0]            ;241  ; CardType
00005a  b158              CBZ      r0,|L19.116|
00005c  4829              LDR      r0,|L19.260|
00005e  7800              LDRB     r0,[r0,#0]            ;241  ; CardType
000060  2801              CMP      r0,#1                 ;241
000062  d007              BEQ      |L19.116|
000064  4827              LDR      r0,|L19.260|
000066  7800              LDRB     r0,[r0,#0]            ;241  ; CardType
000068  2806              CMP      r0,#6                 ;241
00006a  d003              BEQ      |L19.116|
00006c  4825              LDR      r0,|L19.260|
00006e  7800              LDRB     r0,[r0,#0]            ;241  ; CardType
000070  2802              CMP      r0,#2                 ;241
000072  d10c              BNE      |L19.142|
                  |L19.116|
000074  2200              MOVS     r2,#0                 ;243
000076  2101              MOVS     r1,#1                 ;243
000078  2003              MOVS     r0,#3                 ;243
00007a  f7fffffe          BL       SDIO_Send_Cmd
00007e  4669              MOV      r1,sp                 ;244
000080  2003              MOVS     r0,#3                 ;244
000082  f7fffffe          BL       CmdResp6Error
000086  4604              MOV      r4,r0                 ;244
000088  b10c              CBZ      r4,|L19.142|
00008a  4620              MOV      r0,r4                 ;245
00008c  e7c2              B        |L19.20|
                  |L19.142|
00008e  481d              LDR      r0,|L19.260|
000090  7800              LDRB     r0,[r0,#0]            ;247  ; CardType
000092  2803              CMP      r0,#3                 ;247
000094  d10c              BNE      |L19.176|
000096  f8bd0000          LDRH     r0,[sp,#0]            ;249
00009a  0402              LSLS     r2,r0,#16             ;249
00009c  2101              MOVS     r1,#1                 ;249
00009e  2003              MOVS     r0,#3                 ;249
0000a0  f7fffffe          BL       SDIO_Send_Cmd
0000a4  f7fffffe          BL       CmdResp2Error
0000a8  4604              MOV      r4,r0                 ;250
0000aa  b10c              CBZ      r4,|L19.176|
0000ac  4620              MOV      r0,r4                 ;251
0000ae  e7b1              B        |L19.20|
                  |L19.176|
0000b0  4814              LDR      r0,|L19.260|
0000b2  7800              LDRB     r0,[r0,#0]            ;253  ; CardType
0000b4  2804              CMP      r0,#4                 ;253
0000b6  d021              BEQ      |L19.252|
0000b8  f8bd0000          LDRH     r0,[sp,#0]            ;255
0000bc  4913              LDR      r1,|L19.268|
0000be  6008              STR      r0,[r1,#0]            ;255  ; RCA
0000c0  f8bd0000          LDRH     r0,[sp,#0]            ;256
0000c4  0402              LSLS     r2,r0,#16             ;256
0000c6  2103              MOVS     r1,#3                 ;256
0000c8  2009              MOVS     r0,#9                 ;256
0000ca  f7fffffe          BL       SDIO_Send_Cmd
0000ce  f7fffffe          BL       CmdResp2Error
0000d2  4604              MOV      r4,r0                 ;257
0000d4  b10c              CBZ      r4,|L19.218|
0000d6  4620              MOV      r0,r4                 ;258
0000d8  e79c              B        |L19.20|
                  |L19.218|
0000da  4809              LDR      r0,|L19.256|
0000dc  3014              ADDS     r0,r0,#0x14           ;259
0000de  6800              LDR      r0,[r0,#0]            ;259
0000e0  490b              LDR      r1,|L19.272|
0000e2  6008              STR      r0,[r1,#0]            ;259  ; CSD_Tab
0000e4  4806              LDR      r0,|L19.256|
0000e6  3018              ADDS     r0,r0,#0x18           ;260
0000e8  6800              LDR      r0,[r0,#0]            ;260
0000ea  6048              STR      r0,[r1,#4]            ;260  ; CSD_Tab
0000ec  4804              LDR      r0,|L19.256|
0000ee  301c              ADDS     r0,r0,#0x1c           ;261
0000f0  6800              LDR      r0,[r0,#0]            ;261
0000f2  6088              STR      r0,[r1,#8]            ;261  ; CSD_Tab
0000f4  4802              LDR      r0,|L19.256|
0000f6  3020              ADDS     r0,r0,#0x20           ;262
0000f8  6800              LDR      r0,[r0,#0]            ;262
0000fa  60c8              STR      r0,[r1,#0xc]          ;262  ; CSD_Tab
                  |L19.252|
0000fc  2000              MOVS     r0,#0                 ;264
0000fe  e789              B        |L19.20|
;;;266    //得到卡信息
                          ENDP

                  |L19.256|
                          DCD      0x40012c00
                  |L19.260|
                          DCD      CardType
                  |L19.264|
                          DCD      CID_Tab
                  |L19.268|
                          DCD      ||RCA||
                  |L19.272|
                          DCD      CSD_Tab

                          AREA ||i.SD_PowerOFF||, CODE, READONLY, ALIGN=2

                  SD_PowerOFF PROC
;;;218    //返回值:错误代码;(0,无错误)
;;;219    SD_Error SD_PowerOFF(void)
000000  4803              LDR      r0,|L20.16|
;;;220    {
;;;221      	SDIO->POWER&=~(3<<0);//SDIO电源关闭,时钟停止	
000002  6800              LDR      r0,[r0,#0]
000004  f0200003          BIC      r0,r0,#3
000008  4901              LDR      r1,|L20.16|
00000a  6008              STR      r0,[r1,#0]
;;;222    	return SD_OK;		  
00000c  2000              MOVS     r0,#0
;;;223    }   
00000e  4770              BX       lr
;;;224    //初始化所有的卡,并让卡进入就绪状态
                          ENDP

                  |L20.16|
                          DCD      0x40012c00

                          AREA ||i.SD_PowerON||, CODE, READONLY, ALIGN=2

                  SD_PowerON PROC
;;;136    //返回值:错误代码;(0,无错误)
;;;137    SD_Error SD_PowerON(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;138    {
;;;139     	u8 i=0;
000004  2700              MOVS     r7,#0
;;;140    	SD_Error errorstatus=SD_OK;
000006  2400              MOVS     r4,#0
;;;141    	u32 response=0,count=0,validvoltage=0;
000008  2600              MOVS     r6,#0
00000a  2500              MOVS     r5,#0
00000c  46a0              MOV      r8,r4
;;;142    	u32 SDType=SD_STD_CAPACITY;
00000e  46a1              MOV      r9,r4
;;;143    	//配置CLKCR寄存器 
;;;144    	SDIO->CLKCR=0;				//清空CLKCR之前的设置
000010  2000              MOVS     r0,#0
000012  4957              LDR      r1,|L21.368|
000014  6008              STR      r0,[r1,#0]
;;;145    	SDIO->CLKCR|=0<<9;			//非省电模式
000016  4608              MOV      r0,r1
000018  6800              LDR      r0,[r0,#0]
00001a  6008              STR      r0,[r1,#0]
;;;146    	SDIO->CLKCR|=0<<10;			//关闭旁路,CK根据分频设置输出
00001c  4608              MOV      r0,r1
00001e  6800              LDR      r0,[r0,#0]
000020  6008              STR      r0,[r1,#0]
;;;147    	SDIO->CLKCR|=0<<11;			//1位数据宽度
000022  4608              MOV      r0,r1
000024  6800              LDR      r0,[r0,#0]
000026  6008              STR      r0,[r1,#0]
;;;148    	SDIO->CLKCR|=0<<13;			//SDIOCLK上升沿产生SDIOCK
000028  4608              MOV      r0,r1
00002a  6800              LDR      r0,[r0,#0]
00002c  6008              STR      r0,[r1,#0]
;;;149    	SDIO->CLKCR|=0<<14;			//关闭硬件流控制    
00002e  4608              MOV      r0,r1
000030  6800              LDR      r0,[r0,#0]
000032  6008              STR      r0,[r1,#0]
;;;150    	SDIO_Clock_Set(SDIO_INIT_CLK_DIV);//设置时钟频率(初始化的时候,不能超过400Khz)			 
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       SDIO_Clock_Set
;;;151     	SDIO->POWER=0X03;			//上电状态,开启卡时钟    
00003a  2003              MOVS     r0,#3
00003c  494c              LDR      r1,|L21.368|
00003e  1f09              SUBS     r1,r1,#4
000040  6008              STR      r0,[r1,#0]
;;;152      	SDIO->CLKCR|=1<<8;			//SDIOCK使能   
000042  1d08              ADDS     r0,r1,#4
000044  6800              LDR      r0,[r0,#0]
000046  f4407080          ORR      r0,r0,#0x100
00004a  1d09              ADDS     r1,r1,#4
00004c  6008              STR      r0,[r1,#0]
;;;153       	for(i=0;i<74;i++)
00004e  bf00              NOP      
000050  e00b              B        |L21.106|
                  |L21.82|
;;;154    	{
;;;155    		SDIO_Send_Cmd(SD_CMD_GO_IDLE_STATE,0,0);//发送CMD0进入IDLE STAGE模式命令.												  
000052  2200              MOVS     r2,#0
000054  4611              MOV      r1,r2
000056  4610              MOV      r0,r2
000058  f7fffffe          BL       SDIO_Send_Cmd
;;;156    		errorstatus=CmdError();
00005c  f7fffffe          BL       CmdError
000060  4604              MOV      r4,r0
;;;157    		if(errorstatus==SD_OK)break;
000062  b904              CBNZ     r4,|L21.102|
000064  e003              B        |L21.110|
                  |L21.102|
000066  1c78              ADDS     r0,r7,#1              ;153
000068  b2c7              UXTB     r7,r0                 ;153
                  |L21.106|
00006a  2f4a              CMP      r7,#0x4a              ;153
00006c  dbf1              BLT      |L21.82|
                  |L21.110|
00006e  bf00              NOP      
;;;158     	}
;;;159     	if(errorstatus)return errorstatus;//返回错误状态
000070  b114              CBZ      r4,|L21.120|
000072  4620              MOV      r0,r4
                  |L21.116|
;;;160    	SDIO_Send_Cmd(SDIO_SEND_IF_COND,1,SD_CHECK_PATTERN);//发送CMD8,短响应,检查SD卡接口特性.
;;;161     														//arg[11:8]:01,支持电压范围,2.7~3.6V
;;;162    														//arg[7:0]:默认0XAA
;;;163    														//返回响应7
;;;164      	errorstatus=CmdResp7Error();						//等待R7响应
;;;165     	if(errorstatus==SD_OK) 								//R7响应正常
;;;166    	{
;;;167    		CardType=SDIO_STD_CAPACITY_SD_CARD_V2_0;		//SD 2.0卡
;;;168    		SDType=SD_HIGH_CAPACITY;			   			//高容量卡
;;;169    	}
;;;170    	SDIO_Send_Cmd(SD_CMD_APP_CMD,1,0);					//发送CMD55,短响应	 
;;;171    	errorstatus=CmdResp1Error(SD_CMD_APP_CMD); 		 	//等待R1响应   
;;;172    	if(errorstatus==SD_OK)//SD2.0/SD 1.1,否则为MMC卡
;;;173    	{																  
;;;174    		//SD卡,发送ACMD41 SD_APP_OP_COND,参数为:0x80100000 
;;;175    		while((!validvoltage)&&(count<SD_MAX_VOLT_TRIAL))
;;;176    		{	   										   
;;;177    			SDIO_Send_Cmd(SD_CMD_APP_CMD,1,0);				//发送CMD55,短响应	 
;;;178    			errorstatus=CmdResp1Error(SD_CMD_APP_CMD); 	 	//等待R1响应   
;;;179     			if(errorstatus!=SD_OK)return errorstatus;   	//响应错误
;;;180    			SDIO_Send_Cmd(SD_CMD_SD_APP_OP_COND,1,SD_VOLTAGE_WINDOW_SD|SDType);//发送ACMD41,短响应	 
;;;181    			errorstatus=CmdResp3Error(); 					//等待R3响应   
;;;182     			if(errorstatus!=SD_OK)return errorstatus;   	//响应错误  
;;;183    			response=SDIO->RESP1;;			   				//得到响应
;;;184    			validvoltage=(((response>>31)==1)?1:0);			//判断SD卡上电是否完成
;;;185    			count++;
;;;186    		}
;;;187    		if(count>=SD_MAX_VOLT_TRIAL)
;;;188    		{
;;;189    			errorstatus=SD_INVALID_VOLTRANGE;
;;;190    			return errorstatus;
;;;191    		}	 
;;;192    		if(response&=SD_HIGH_CAPACITY)
;;;193    		{
;;;194    			CardType=SDIO_HIGH_CAPACITY_SD_CARD;
;;;195    		}
;;;196     	}else//MMC卡
;;;197    	{
;;;198    		//MMC卡,发送CMD1 SDIO_SEND_OP_COND,参数为:0x80FF8000 
;;;199    		while((!validvoltage)&&(count<SD_MAX_VOLT_TRIAL))
;;;200    		{	   										   				   
;;;201    			SDIO_Send_Cmd(SD_CMD_SEND_OP_COND,1,SD_VOLTAGE_WINDOW_MMC);//发送CMD1,短响应	 
;;;202    			errorstatus=CmdResp3Error(); 					//等待R3响应   
;;;203     			if(errorstatus!=SD_OK)return errorstatus;   	//响应错误  
;;;204    			response=SDIO->RESP1;;			   				//得到响应
;;;205    			validvoltage=(((response>>31)==1)?1:0);
;;;206    			count++;
;;;207    		}
;;;208    		if(count>=SD_MAX_VOLT_TRIAL)
;;;209    		{
;;;210    			errorstatus=SD_INVALID_VOLTRANGE;
;;;211    			return errorstatus;
;;;212    		}	 			    
;;;213    		CardType=SDIO_MULTIMEDIA_CARD;	  
;;;214      	}  
;;;215      	return(errorstatus);		
;;;216    }
000074  e8bd83f0          POP      {r4-r9,pc}
                  |L21.120|
000078  f44f72d5          MOV      r2,#0x1aa             ;160
00007c  2101              MOVS     r1,#1                 ;160
00007e  2008              MOVS     r0,#8                 ;160
000080  f7fffffe          BL       SDIO_Send_Cmd
000084  f7fffffe          BL       CmdResp7Error
000088  4604              MOV      r4,r0                 ;164
00008a  b924              CBNZ     r4,|L21.150|
00008c  2001              MOVS     r0,#1                 ;167
00008e  4939              LDR      r1,|L21.372|
000090  7008              STRB     r0,[r1,#0]            ;167
000092  f04f4980          MOV      r9,#0x40000000        ;168
                  |L21.150|
000096  2200              MOVS     r2,#0                 ;170
000098  2101              MOVS     r1,#1                 ;170
00009a  2037              MOVS     r0,#0x37              ;170
00009c  f7fffffe          BL       SDIO_Send_Cmd
0000a0  2037              MOVS     r0,#0x37              ;171
0000a2  f7fffffe          BL       CmdResp1Error
0000a6  4604              MOV      r4,r0                 ;171
0000a8  bb84              CBNZ     r4,|L21.268|
0000aa  e021              B        |L21.240|
                  |L21.172|
0000ac  2200              MOVS     r2,#0                 ;177
0000ae  2101              MOVS     r1,#1                 ;177
0000b0  2037              MOVS     r0,#0x37              ;177
0000b2  f7fffffe          BL       SDIO_Send_Cmd
0000b6  2037              MOVS     r0,#0x37              ;178
0000b8  f7fffffe          BL       CmdResp1Error
0000bc  4604              MOV      r4,r0                 ;178
0000be  b10c              CBZ      r4,|L21.196|
0000c0  4620              MOV      r0,r4                 ;179
0000c2  e7d7              B        |L21.116|
                  |L21.196|
0000c4  482c              LDR      r0,|L21.376|
0000c6  ea490200          ORR      r2,r9,r0              ;180
0000ca  2101              MOVS     r1,#1                 ;180
0000cc  2029              MOVS     r0,#0x29              ;180
0000ce  f7fffffe          BL       SDIO_Send_Cmd
0000d2  f7fffffe          BL       CmdResp3Error
0000d6  4604              MOV      r4,r0                 ;181
0000d8  b10c              CBZ      r4,|L21.222|
0000da  4620              MOV      r0,r4                 ;182
0000dc  e7ca              B        |L21.116|
                  |L21.222|
0000de  4824              LDR      r0,|L21.368|
0000e0  3010              ADDS     r0,r0,#0x10           ;183
0000e2  6806              LDR      r6,[r0,#0]            ;183
0000e4  2001              MOVS     r0,#1                 ;184
0000e6  ea8070d6          EOR      r0,r0,r6,LSR #31      ;184
0000ea  f0800801          EOR      r8,r0,#1              ;184
0000ee  1c6d              ADDS     r5,r5,#1              ;185
                  |L21.240|
0000f0  f1b80f00          CMP      r8,#0                 ;175
0000f4  d103              BNE      |L21.254|
0000f6  f64f70ff          MOV      r0,#0xffff            ;175
0000fa  4285              CMP      r5,r0                 ;175
0000fc  d3d6              BCC      |L21.172|
                  |L21.254|
0000fe  f64f70ff          MOV      r0,#0xffff            ;187
000102  4285              CMP      r5,r0                 ;187
000104  d303              BCC      |L21.270|
000106  241b              MOVS     r4,#0x1b              ;189
000108  4620              MOV      r0,r4                 ;190
00010a  e7b3              B        |L21.116|
                  |L21.268|
00010c  e007              B        |L21.286|
                  |L21.270|
00010e  f0064080          AND      r0,r6,#0x40000000     ;192
000112  1e06              SUBS     r6,r0,#0              ;192
000114  d029              BEQ      |L21.362|
000116  2002              MOVS     r0,#2                 ;194
000118  4916              LDR      r1,|L21.372|
00011a  7008              STRB     r0,[r1,#0]            ;194
00011c  e025              B        |L21.362|
                  |L21.286|
00011e  e013              B        |L21.328|
                  |L21.288|
000120  4a16              LDR      r2,|L21.380|
000122  2101              MOVS     r1,#1                 ;201
000124  4608              MOV      r0,r1                 ;201
000126  f7fffffe          BL       SDIO_Send_Cmd
00012a  f7fffffe          BL       CmdResp3Error
00012e  4604              MOV      r4,r0                 ;202
000130  b10c              CBZ      r4,|L21.310|
000132  4620              MOV      r0,r4                 ;203
000134  e79e              B        |L21.116|
                  |L21.310|
000136  480e              LDR      r0,|L21.368|
000138  3010              ADDS     r0,r0,#0x10           ;204
00013a  6806              LDR      r6,[r0,#0]            ;204
00013c  2001              MOVS     r0,#1                 ;205
00013e  ea8070d6          EOR      r0,r0,r6,LSR #31      ;205
000142  f0800801          EOR      r8,r0,#1              ;205
000146  1c6d              ADDS     r5,r5,#1              ;206
                  |L21.328|
000148  f1b80f00          CMP      r8,#0                 ;199
00014c  d103              BNE      |L21.342|
00014e  f64f70ff          MOV      r0,#0xffff            ;199
000152  4285              CMP      r5,r0                 ;199
000154  d3e4              BCC      |L21.288|
                  |L21.342|
000156  f64f70ff          MOV      r0,#0xffff            ;208
00015a  4285              CMP      r5,r0                 ;208
00015c  d302              BCC      |L21.356|
00015e  241b              MOVS     r4,#0x1b              ;210
000160  4620              MOV      r0,r4                 ;211
000162  e787              B        |L21.116|
                  |L21.356|
000164  2003              MOVS     r0,#3                 ;213
000166  4903              LDR      r1,|L21.372|
000168  7008              STRB     r0,[r1,#0]            ;213
                  |L21.362|
00016a  4620              MOV      r0,r4                 ;215
00016c  e782              B        |L21.116|
;;;217    //SD卡 Power OFF
                          ENDP

00016e  0000              DCW      0x0000
                  |L21.368|
                          DCD      0x40012c04
                  |L21.372|
                          DCD      CardType
                  |L21.376|
                          DCD      0x80100000
                  |L21.380|
                          DCD      0x80ff8000

                          AREA ||i.SD_ProcessIRQSrc||, CODE, READONLY, ALIGN=2

                  SD_ProcessIRQSrc PROC
;;;889    //返回值:错误代码
;;;890    SD_Error SD_ProcessIRQSrc(void)
000000  b500              PUSH     {lr}
;;;891    {
;;;892    	if(SDIO->STA&(1<<8))//接收完成中断
000002  4856              LDR      r0,|L22.348|
000004  6800              LDR      r0,[r0,#0]
000006  f4007080          AND      r0,r0,#0x100
00000a  b338              CBZ      r0,|L22.92|
;;;893    	{	 
;;;894    		if (StopCondition==1)
00000c  4854              LDR      r0,|L22.352|
00000e  7800              LDRB     r0,[r0,#0]  ; StopCondition
000010  2801              CMP      r0,#1
000012  d10a              BNE      |L22.42|
;;;895    		{
;;;896    			SDIO_Send_Cmd(SD_CMD_STOP_TRANSMISSION,1,0);		//发送CMD12,结束传输 	   
000014  2200              MOVS     r2,#0
000016  2101              MOVS     r1,#1
000018  200c              MOVS     r0,#0xc
00001a  f7fffffe          BL       SDIO_Send_Cmd
;;;897    			TransferError=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
00001e  200c              MOVS     r0,#0xc
000020  f7fffffe          BL       CmdResp1Error
000024  494f              LDR      r1,|L22.356|
000026  7008              STRB     r0,[r1,#0]
000028  e002              B        |L22.48|
                  |L22.42|
;;;898    		}else TransferError = SD_OK;	
00002a  2000              MOVS     r0,#0
00002c  494d              LDR      r1,|L22.356|
00002e  7008              STRB     r0,[r1,#0]
                  |L22.48|
;;;899     		SDIO->ICR|=1<<8;//清除完成中断标记
000030  484a              LDR      r0,|L22.348|
000032  1d00              ADDS     r0,r0,#4
000034  6800              LDR      r0,[r0,#0]
000036  f4407080          ORR      r0,r0,#0x100
00003a  4948              LDR      r1,|L22.348|
00003c  1d09              ADDS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
;;;900    		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
000040  1d08              ADDS     r0,r1,#4
000042  6800              LDR      r0,[r0,#0]
000044  f24c313a          MOV      r1,#0xc33a
000048  4388              BICS     r0,r0,r1
00004a  4944              LDR      r1,|L22.348|
00004c  3108              ADDS     r1,r1,#8
00004e  6008              STR      r0,[r1,#0]
;;;901     		TransferEnd = 1;
000050  2001              MOVS     r0,#1
000052  4945              LDR      r1,|L22.360|
000054  7008              STRB     r0,[r1,#0]
;;;902    		return(TransferError);
000056  4843              LDR      r0,|L22.356|
000058  7800              LDRB     r0,[r0,#0]  ; TransferError
                  |L22.90|
;;;903    	}
;;;904     	if(SDIO->STA&(1<<1))//数据CRC错误
;;;905    	{
;;;906    		SDIO->ICR|=1<<1;//清除中断标记
;;;907    		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;908    	    TransferError = SD_DATA_CRC_FAIL;
;;;909    	    return(SD_DATA_CRC_FAIL);
;;;910    	}
;;;911     	if(SDIO->STA&(1<<3))//数据超时错误
;;;912    	{
;;;913    		SDIO->ICR|=1<<3;//清除中断标记
;;;914    		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;915    	    TransferError = SD_DATA_TIMEOUT;
;;;916    	    return(SD_DATA_TIMEOUT);
;;;917    	}
;;;918      	if(SDIO->STA&(1<<5))//FIFO上溢错误
;;;919    	{
;;;920    		SDIO->ICR|=1<<5;//清除中断标记
;;;921    		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;922    	    TransferError = SD_RX_OVERRUN;
;;;923    	    return(SD_RX_OVERRUN);
;;;924    	}
;;;925       	if(SDIO->STA&(1<<4))//FIFO下溢错误
;;;926    	{
;;;927    		SDIO->ICR|=1<<4;//清除中断标记
;;;928    		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;929    	    TransferError = SD_TX_UNDERRUN;
;;;930    	    return(SD_TX_UNDERRUN);
;;;931    	}
;;;932    	if(SDIO->STA&(1<<9))//起始位错误
;;;933    	{
;;;934    		SDIO->ICR|=1<<9;//清除中断标记
;;;935    		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;936    	    TransferError = SD_START_BIT_ERR;
;;;937    	    return(SD_START_BIT_ERR);
;;;938    	}
;;;939    	return(SD_OK);
;;;940    }
00005a  bd00              POP      {pc}
                  |L22.92|
00005c  483f              LDR      r0,|L22.348|
00005e  6800              LDR      r0,[r0,#0]            ;904
000060  f0000002          AND      r0,r0,#2              ;904
000064  b198              CBZ      r0,|L22.142|
000066  483d              LDR      r0,|L22.348|
000068  1d00              ADDS     r0,r0,#4              ;906
00006a  6800              LDR      r0,[r0,#0]            ;906
00006c  f0400002          ORR      r0,r0,#2              ;906
000070  493a              LDR      r1,|L22.348|
000072  1d09              ADDS     r1,r1,#4              ;906
000074  6008              STR      r0,[r1,#0]            ;906
000076  1d08              ADDS     r0,r1,#4              ;907
000078  6800              LDR      r0,[r0,#0]            ;907
00007a  f24c313a          MOV      r1,#0xc33a            ;907
00007e  4388              BICS     r0,r0,r1              ;907
000080  4936              LDR      r1,|L22.348|
000082  3108              ADDS     r1,r1,#8              ;907
000084  6008              STR      r0,[r1,#0]            ;907
000086  2002              MOVS     r0,#2                 ;908
000088  4936              LDR      r1,|L22.356|
00008a  7008              STRB     r0,[r1,#0]            ;908
00008c  e7e5              B        |L22.90|
                  |L22.142|
00008e  4833              LDR      r0,|L22.348|
000090  6800              LDR      r0,[r0,#0]            ;911
000092  f0000008          AND      r0,r0,#8              ;911
000096  b198              CBZ      r0,|L22.192|
000098  4830              LDR      r0,|L22.348|
00009a  1d00              ADDS     r0,r0,#4              ;913
00009c  6800              LDR      r0,[r0,#0]            ;913
00009e  f0400008          ORR      r0,r0,#8              ;913
0000a2  492e              LDR      r1,|L22.348|
0000a4  1d09              ADDS     r1,r1,#4              ;913
0000a6  6008              STR      r0,[r1,#0]            ;913
0000a8  1d08              ADDS     r0,r1,#4              ;914
0000aa  6800              LDR      r0,[r0,#0]            ;914
0000ac  f24c313a          MOV      r1,#0xc33a            ;914
0000b0  4388              BICS     r0,r0,r1              ;914
0000b2  492a              LDR      r1,|L22.348|
0000b4  3108              ADDS     r1,r1,#8              ;914
0000b6  6008              STR      r0,[r1,#0]            ;914
0000b8  2004              MOVS     r0,#4                 ;915
0000ba  492a              LDR      r1,|L22.356|
0000bc  7008              STRB     r0,[r1,#0]            ;915
0000be  e7cc              B        |L22.90|
                  |L22.192|
0000c0  4826              LDR      r0,|L22.348|
0000c2  6800              LDR      r0,[r0,#0]            ;918
0000c4  f0000020          AND      r0,r0,#0x20           ;918
0000c8  b198              CBZ      r0,|L22.242|
0000ca  4824              LDR      r0,|L22.348|
0000cc  1d00              ADDS     r0,r0,#4              ;920
0000ce  6800              LDR      r0,[r0,#0]            ;920
0000d0  f0400020          ORR      r0,r0,#0x20           ;920
0000d4  4921              LDR      r1,|L22.348|
0000d6  1d09              ADDS     r1,r1,#4              ;920
0000d8  6008              STR      r0,[r1,#0]            ;920
0000da  1d08              ADDS     r0,r1,#4              ;921
0000dc  6800              LDR      r0,[r0,#0]            ;921
0000de  f24c313a          MOV      r1,#0xc33a            ;921
0000e2  4388              BICS     r0,r0,r1              ;921
0000e4  491d              LDR      r1,|L22.348|
0000e6  3108              ADDS     r1,r1,#8              ;921
0000e8  6008              STR      r0,[r1,#0]            ;921
0000ea  2006              MOVS     r0,#6                 ;922
0000ec  491d              LDR      r1,|L22.356|
0000ee  7008              STRB     r0,[r1,#0]            ;922
0000f0  e7b3              B        |L22.90|
                  |L22.242|
0000f2  481a              LDR      r0,|L22.348|
0000f4  6800              LDR      r0,[r0,#0]            ;925
0000f6  f0000010          AND      r0,r0,#0x10           ;925
0000fa  b198              CBZ      r0,|L22.292|
0000fc  4817              LDR      r0,|L22.348|
0000fe  1d00              ADDS     r0,r0,#4              ;927
000100  6800              LDR      r0,[r0,#0]            ;927
000102  f0400010          ORR      r0,r0,#0x10           ;927
000106  4915              LDR      r1,|L22.348|
000108  1d09              ADDS     r1,r1,#4              ;927
00010a  6008              STR      r0,[r1,#0]            ;927
00010c  1d08              ADDS     r0,r1,#4              ;928
00010e  6800              LDR      r0,[r0,#0]            ;928
000110  f24c313a          MOV      r1,#0xc33a            ;928
000114  4388              BICS     r0,r0,r1              ;928
000116  4911              LDR      r1,|L22.348|
000118  3108              ADDS     r1,r1,#8              ;928
00011a  6008              STR      r0,[r1,#0]            ;928
00011c  2005              MOVS     r0,#5                 ;929
00011e  4911              LDR      r1,|L22.356|
000120  7008              STRB     r0,[r1,#0]            ;929
000122  e79a              B        |L22.90|
                  |L22.292|
000124  480d              LDR      r0,|L22.348|
000126  6800              LDR      r0,[r0,#0]            ;932
000128  f4007000          AND      r0,r0,#0x200          ;932
00012c  b198              CBZ      r0,|L22.342|
00012e  480b              LDR      r0,|L22.348|
000130  1d00              ADDS     r0,r0,#4              ;934
000132  6800              LDR      r0,[r0,#0]            ;934
000134  f4407000          ORR      r0,r0,#0x200          ;934
000138  4908              LDR      r1,|L22.348|
00013a  1d09              ADDS     r1,r1,#4              ;934
00013c  6008              STR      r0,[r1,#0]            ;934
00013e  1d08              ADDS     r0,r1,#4              ;935
000140  6800              LDR      r0,[r0,#0]            ;935
000142  f24c313a          MOV      r1,#0xc33a            ;935
000146  4388              BICS     r0,r0,r1              ;935
000148  4904              LDR      r1,|L22.348|
00014a  3108              ADDS     r1,r1,#8              ;935
00014c  6008              STR      r0,[r1,#0]            ;935
00014e  2007              MOVS     r0,#7                 ;936
000150  4904              LDR      r1,|L22.356|
000152  7008              STRB     r0,[r1,#0]            ;936
000154  e781              B        |L22.90|
                  |L22.342|
000156  2000              MOVS     r0,#0                 ;939
000158  e77f              B        |L22.90|
;;;941      
                          ENDP

00015a  0000              DCW      0x0000
                  |L22.348|
                          DCD      0x40012c34
                  |L22.352|
                          DCD      StopCondition
                  |L22.356|
                          DCD      TransferError
                  |L22.360|
                          DCD      TransferEnd

                          AREA ||i.SD_ReadBlock||, CODE, READONLY, ALIGN=2

                  SD_ReadBlock PROC
;;;432    //blksize:块大小
;;;433    SD_Error SD_ReadBlock(u8 *buf,long long addr,u16 blksize)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;434    {	  
000004  4681              MOV      r9,r0
000006  4617              MOV      r7,r2
000008  4698              MOV      r8,r3
00000a  9c0a              LDR      r4,[sp,#0x28]
;;;435    	SD_Error errorstatus=SD_OK;
00000c  f04f0a00          MOV      r10,#0
;;;436    	u8 power;
;;;437       	u32 count=0,*tempbuff=(u32*)buf;//转换为u32指针 
000010  46d3              MOV      r11,r10
000012  464d              MOV      r5,r9
;;;438    	u32 timeout=SDIO_DATATIMEOUT;   
000014  f04f36ff          MOV      r6,#0xffffffff
;;;439       	if(NULL==buf)return SD_INVALID_PARAMETER; 
000018  f1b90f00          CMP      r9,#0
00001c  d102              BNE      |L23.36|
00001e  2026              MOVS     r0,#0x26
                  |L23.32|
;;;440       	SDIO->DCTRL=0x0;	//数据控制寄存器清零(关DMA)   
;;;441    	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)//大容量卡
;;;442    	{
;;;443    		blksize=512;
;;;444    		addr>>=9;
;;;445    	}   
;;;446      	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,0,0,0);	//清除DPSM状态机配置
;;;447    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
;;;448    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;449    	{
;;;450    		power=convert_from_bytes_to_power_of_two(blksize);	    	   
;;;451    		SDIO_Send_Cmd(SD_CMD_SET_BLOCKLEN,1,blksize);	//发送CMD16+设置数据长度为blksize,短响应 	   
;;;452    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应   
;;;453    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;454    	}else return SD_INVALID_PARAMETER;	  	  									    
;;;455      	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,blksize,power,1);	//blksize,卡到控制器	  
;;;456       	SDIO_Send_Cmd(SD_CMD_READ_SINGLE_BLOCK,1,addr);		//发送CMD17+从addr地址出读取数据,短响应 	   
;;;457    	errorstatus=CmdResp1Error(SD_CMD_READ_SINGLE_BLOCK);//等待R1响应   
;;;458    	if(errorstatus!=SD_OK)return errorstatus;   		//响应错误	 
;;;459     	if(DeviceMode==SD_POLLING_MODE)						//查询模式,轮询数据	 
;;;460    	{
;;;461     		INTX_DISABLE();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
;;;462    		while(!(SDIO->STA&((1<<5)|(1<<1)|(1<<3)|(1<<10)|(1<<9))))//无上溢/CRC/超时/完成(标志)/起始位错误
;;;463    		{
;;;464    			if(SDIO->STA&(1<<15))						//接收区半满,表示至少存了8个字
;;;465    			{
;;;466    				for(count=0;count<8;count++)			//循环读取数据
;;;467    				{
;;;468    					*(tempbuff+count)=SDIO->FIFO;
;;;469    				}
;;;470    				tempbuff+=8;	 
;;;471    				timeout=0X7FFFFF; 	//读数据溢出时间
;;;472    			}else 	//处理超时
;;;473    			{
;;;474    				if(timeout==0)return SD_DATA_TIMEOUT;
;;;475    				timeout--;
;;;476    			}
;;;477    		} 
;;;478    		if(SDIO->STA&(1<<3))		//数据超时错误
;;;479    		{										   
;;;480    	 		SDIO->ICR|=1<<3; 		//清错误标志
;;;481    			return SD_DATA_TIMEOUT;
;;;482    	 	}else if(SDIO->STA&(1<<1))	//数据块CRC错误
;;;483    		{
;;;484    	 		SDIO->ICR|=1<<1; 		//清错误标志
;;;485    			return SD_DATA_CRC_FAIL;		   
;;;486    		}else if(SDIO->STA&(1<<5)) 	//接收fifo上溢错误
;;;487    		{
;;;488    	 		SDIO->ICR|=1<<5; 		//清错误标志
;;;489    			return SD_RX_OVERRUN;		 
;;;490    		}else if(SDIO->STA&(1<<9)) 	//接收起始位错误
;;;491    		{
;;;492    	 		SDIO->ICR|=1<<9; 		//清错误标志
;;;493    			return SD_START_BIT_ERR;		 
;;;494    		}   
;;;495    		while(SDIO->STA&(1<<21))	//FIFO里面,还存在可用数据
;;;496    		{
;;;497    			*tempbuff=SDIO->FIFO;	//循环读取数据
;;;498    			tempbuff++;
;;;499    		}
;;;500    		INTX_ENABLE();//开启总中断
;;;501    		SDIO->ICR=0X5FF;	 		//清除所有标记
;;;502    	}else if(DeviceMode==SD_DMA_MODE)
;;;503    	{
;;;504     		TransferError=SD_OK;
;;;505    		StopCondition=0;			//单块读,不需要发送停止传输指令
;;;506    		TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;507    		SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<5)|(1<<9);	//配置需要的中断 
;;;508    	 	SDIO->DCTRL|=1<<3;		 	//SDIO DMA使能 
;;;509     	    SD_DMA_Config((u32*)buf,blksize,0); 
;;;510     		while(((DMA2->LISR&(1<<27))==RESET)&&(TransferEnd==0)&&(TransferError==SD_OK)&&timeout)timeout--;//等待传输完成 
;;;511    		if(timeout==0)return SD_DATA_TIMEOUT;//超时
;;;512    		if(TransferError!=SD_OK)errorstatus=TransferError;  
;;;513        }   
;;;514     	return errorstatus; 
;;;515    }
000020  e8bd8ff8          POP      {r3-r11,pc}
                  |L23.36|
000024  2000              MOVS     r0,#0                 ;440
000026  4981              LDR      r1,|L23.556|
000028  6008              STR      r0,[r1,#0]            ;440
00002a  4881              LDR      r0,|L23.560|
00002c  7800              LDRB     r0,[r0,#0]            ;441  ; CardType
00002e  2802              CMP      r0,#2                 ;441
000030  d105              BNE      |L23.62|
000032  0204              LSLS     r4,r0,#8              ;443
000034  0a78              LSRS     r0,r7,#9              ;444
000036  ea4057c8          ORR      r7,r0,r8,LSL #23      ;444
00003a  ea4f2868          ASR      r8,r8,#9              ;444
                  |L23.62|
00003e  2300              MOVS     r3,#0                 ;446
000040  461a              MOV      r2,r3                 ;446
000042  4619              MOV      r1,r3                 ;446
000044  1e58              SUBS     r0,r3,#1              ;446
000046  f7fffffe          BL       SDIO_Send_Data_Cfg
00004a  4878              LDR      r0,|L23.556|
00004c  3818              SUBS     r0,r0,#0x18           ;447
00004e  6800              LDR      r0,[r0,#0]            ;447
000050  f0007000          AND      r0,r0,#0x2000000      ;447
000054  b108              CBZ      r0,|L23.90|
000056  200e              MOVS     r0,#0xe               ;447
000058  e7e2              B        |L23.32|
                  |L23.90|
00005a  2c00              CMP      r4,#0                 ;448
00005c  dd17              BLE      |L23.142|
00005e  f5b46f00          CMP      r4,#0x800             ;448
000062  dc14              BGT      |L23.142|
000064  1e60              SUBS     r0,r4,#1              ;448
000066  4020              ANDS     r0,r0,r4              ;448
000068  b988              CBNZ     r0,|L23.142|
00006a  4620              MOV      r0,r4                 ;450
00006c  f7fffffe          BL       convert_from_bytes_to_power_of_two
000070  9000              STR      r0,[sp,#0]            ;450
000072  4622              MOV      r2,r4                 ;451
000074  2101              MOVS     r1,#1                 ;451
000076  2010              MOVS     r0,#0x10              ;451
000078  f7fffffe          BL       SDIO_Send_Cmd
00007c  2010              MOVS     r0,#0x10              ;452
00007e  f7fffffe          BL       CmdResp1Error
000082  4682              MOV      r10,r0                ;452
000084  f1ba0f00          CMP      r10,#0                ;453
000088  d003              BEQ      |L23.146|
00008a  4650              MOV      r0,r10                ;453
00008c  e7c8              B        |L23.32|
                  |L23.142|
00008e  2026              MOVS     r0,#0x26              ;454
000090  e7c6              B        |L23.32|
                  |L23.146|
000092  2301              MOVS     r3,#1                 ;455
000094  4621              MOV      r1,r4                 ;455
000096  1e98              SUBS     r0,r3,#2              ;455
000098  9a00              LDR      r2,[sp,#0]            ;455
00009a  f7fffffe          BL       SDIO_Send_Data_Cfg
00009e  463a              MOV      r2,r7                 ;456
0000a0  2101              MOVS     r1,#1                 ;456
0000a2  2011              MOVS     r0,#0x11              ;456
0000a4  f7fffffe          BL       SDIO_Send_Cmd
0000a8  2011              MOVS     r0,#0x11              ;457
0000aa  f7fffffe          BL       CmdResp1Error
0000ae  4682              MOV      r10,r0                ;457
0000b0  f1ba0f00          CMP      r10,#0                ;458
0000b4  d001              BEQ      |L23.186|
0000b6  4650              MOV      r0,r10                ;458
0000b8  e7b2              B        |L23.32|
                  |L23.186|
0000ba  485e              LDR      r0,|L23.564|
0000bc  7800              LDRB     r0,[r0,#0]            ;459  ; DeviceMode
0000be  2800              CMP      r0,#0                 ;459
0000c0  d17a              BNE      |L23.440|
0000c2  f7fffffe          BL       INTX_DISABLE
0000c6  e019              B        |L23.252|
                  |L23.200|
0000c8  4858              LDR      r0,|L23.556|
0000ca  3008              ADDS     r0,r0,#8              ;464
0000cc  6800              LDR      r0,[r0,#0]            ;464
0000ce  f4004000          AND      r0,r0,#0x8000         ;464
0000d2  b178              CBZ      r0,|L23.244|
0000d4  f04f0b00          MOV      r11,#0                ;466
0000d8  e006              B        |L23.232|
                  |L23.218|
0000da  4854              LDR      r0,|L23.556|
0000dc  3054              ADDS     r0,r0,#0x54           ;468
0000de  6800              LDR      r0,[r0,#0]            ;468
0000e0  f845002b          STR      r0,[r5,r11,LSL #2]    ;468
0000e4  f10b0b01          ADD      r11,r11,#1            ;466
                  |L23.232|
0000e8  f1bb0f08          CMP      r11,#8                ;466
0000ec  d3f5              BCC      |L23.218|
0000ee  3520              ADDS     r5,r5,#0x20           ;470
0000f0  4e51              LDR      r6,|L23.568|
0000f2  e003              B        |L23.252|
                  |L23.244|
0000f4  b90e              CBNZ     r6,|L23.250|
0000f6  2004              MOVS     r0,#4                 ;474
0000f8  e792              B        |L23.32|
                  |L23.250|
0000fa  1e76              SUBS     r6,r6,#1              ;475
                  |L23.252|
0000fc  484b              LDR      r0,|L23.556|
0000fe  3008              ADDS     r0,r0,#8              ;462
000100  6800              LDR      r0,[r0,#0]            ;462
000102  f240612a          MOV      r1,#0x62a             ;462
000106  4008              ANDS     r0,r0,r1              ;462
000108  2800              CMP      r0,#0                 ;462
00010a  d0dd              BEQ      |L23.200|
00010c  4847              LDR      r0,|L23.556|
00010e  3008              ADDS     r0,r0,#8              ;478
000110  6800              LDR      r0,[r0,#0]            ;478
000112  f0000008          AND      r0,r0,#8              ;478
000116  b148              CBZ      r0,|L23.300|
000118  4844              LDR      r0,|L23.556|
00011a  300c              ADDS     r0,r0,#0xc            ;480
00011c  6800              LDR      r0,[r0,#0]            ;480
00011e  f0400008          ORR      r0,r0,#8              ;480
000122  4942              LDR      r1,|L23.556|
000124  310c              ADDS     r1,r1,#0xc            ;480
000126  6008              STR      r0,[r1,#0]            ;480
000128  2004              MOVS     r0,#4                 ;481
00012a  e779              B        |L23.32|
                  |L23.300|
00012c  483f              LDR      r0,|L23.556|
00012e  3008              ADDS     r0,r0,#8              ;482
000130  6800              LDR      r0,[r0,#0]            ;482
000132  f0000002          AND      r0,r0,#2              ;482
000136  b148              CBZ      r0,|L23.332|
000138  483c              LDR      r0,|L23.556|
00013a  300c              ADDS     r0,r0,#0xc            ;484
00013c  6800              LDR      r0,[r0,#0]            ;484
00013e  f0400002          ORR      r0,r0,#2              ;484
000142  493a              LDR      r1,|L23.556|
000144  310c              ADDS     r1,r1,#0xc            ;484
000146  6008              STR      r0,[r1,#0]            ;484
000148  2002              MOVS     r0,#2                 ;485
00014a  e769              B        |L23.32|
                  |L23.332|
00014c  4837              LDR      r0,|L23.556|
00014e  3008              ADDS     r0,r0,#8              ;486
000150  6800              LDR      r0,[r0,#0]            ;486
000152  f0000020          AND      r0,r0,#0x20           ;486
000156  b148              CBZ      r0,|L23.364|
000158  4834              LDR      r0,|L23.556|
00015a  300c              ADDS     r0,r0,#0xc            ;488
00015c  6800              LDR      r0,[r0,#0]            ;488
00015e  f0400020          ORR      r0,r0,#0x20           ;488
000162  4932              LDR      r1,|L23.556|
000164  310c              ADDS     r1,r1,#0xc            ;488
000166  6008              STR      r0,[r1,#0]            ;488
000168  2006              MOVS     r0,#6                 ;489
00016a  e759              B        |L23.32|
                  |L23.364|
00016c  482f              LDR      r0,|L23.556|
00016e  3008              ADDS     r0,r0,#8              ;490
000170  6800              LDR      r0,[r0,#0]            ;490
000172  f4007000          AND      r0,r0,#0x200          ;490
000176  b148              CBZ      r0,|L23.396|
000178  482c              LDR      r0,|L23.556|
00017a  300c              ADDS     r0,r0,#0xc            ;492
00017c  6800              LDR      r0,[r0,#0]            ;492
00017e  f4407000          ORR      r0,r0,#0x200          ;492
000182  492a              LDR      r1,|L23.556|
000184  310c              ADDS     r1,r1,#0xc            ;492
000186  6008              STR      r0,[r1,#0]            ;492
000188  2007              MOVS     r0,#7                 ;493
00018a  e749              B        |L23.32|
                  |L23.396|
00018c  e004              B        |L23.408|
                  |L23.398|
00018e  4827              LDR      r0,|L23.556|
000190  3054              ADDS     r0,r0,#0x54           ;497
000192  6800              LDR      r0,[r0,#0]            ;497
000194  6028              STR      r0,[r5,#0]            ;497
000196  1d2d              ADDS     r5,r5,#4              ;498
                  |L23.408|
000198  4824              LDR      r0,|L23.556|
00019a  3008              ADDS     r0,r0,#8              ;495
00019c  6800              LDR      r0,[r0,#0]            ;495
00019e  f4001000          AND      r0,r0,#0x200000       ;495
0001a2  2800              CMP      r0,#0                 ;495
0001a4  d1f3              BNE      |L23.398|
0001a6  f7fffffe          BL       INTX_ENABLE
0001aa  f24050ff          MOV      r0,#0x5ff             ;501
0001ae  491f              LDR      r1,|L23.556|
0001b0  310c              ADDS     r1,r1,#0xc            ;501
0001b2  6008              STR      r0,[r1,#0]            ;501
0001b4  e037              B        |L23.550|
0001b6  e7ff              B        |L23.440|
                  |L23.440|
0001b8  481e              LDR      r0,|L23.564|
0001ba  7800              LDRB     r0,[r0,#0]            ;502  ; DeviceMode
0001bc  2801              CMP      r0,#1                 ;502
0001be  d132              BNE      |L23.550|
0001c0  2000              MOVS     r0,#0                 ;504
0001c2  491e              LDR      r1,|L23.572|
0001c4  7008              STRB     r0,[r1,#0]            ;504
0001c6  491e              LDR      r1,|L23.576|
0001c8  7008              STRB     r0,[r1,#0]            ;505
0001ca  491e              LDR      r1,|L23.580|
0001cc  7008              STRB     r0,[r1,#0]            ;506
0001ce  4817              LDR      r0,|L23.556|
0001d0  3010              ADDS     r0,r0,#0x10           ;507
0001d2  6800              LDR      r0,[r0,#0]            ;507
0001d4  f240312a          MOV      r1,#0x32a             ;507
0001d8  4308              ORRS     r0,r0,r1              ;507
0001da  4914              LDR      r1,|L23.556|
0001dc  3110              ADDS     r1,r1,#0x10           ;507
0001de  6008              STR      r0,[r1,#0]            ;507
0001e0  4812              LDR      r0,|L23.556|
0001e2  6800              LDR      r0,[r0,#0]            ;508
0001e4  f0400008          ORR      r0,r0,#8              ;508
0001e8  4910              LDR      r1,|L23.556|
0001ea  6008              STR      r0,[r1,#0]            ;508
0001ec  2200              MOVS     r2,#0                 ;509
0001ee  4621              MOV      r1,r4                 ;509
0001f0  4648              MOV      r0,r9                 ;509
0001f2  f7fffffe          BL       SD_DMA_Config
0001f6  e000              B        |L23.506|
                  |L23.504|
0001f8  1e76              SUBS     r6,r6,#1              ;510
                  |L23.506|
0001fa  4813              LDR      r0,|L23.584|
0001fc  6800              LDR      r0,[r0,#0]            ;510
0001fe  f0006000          AND      r0,r0,#0x8000000      ;510
000202  b938              CBNZ     r0,|L23.532|
000204  480f              LDR      r0,|L23.580|
000206  7800              LDRB     r0,[r0,#0]            ;510  ; TransferEnd
000208  b920              CBNZ     r0,|L23.532|
00020a  480c              LDR      r0,|L23.572|
00020c  7800              LDRB     r0,[r0,#0]            ;510  ; TransferError
00020e  b908              CBNZ     r0,|L23.532|
000210  2e00              CMP      r6,#0                 ;510
000212  d1f1              BNE      |L23.504|
                  |L23.532|
000214  b90e              CBNZ     r6,|L23.538|
000216  2004              MOVS     r0,#4                 ;511
000218  e702              B        |L23.32|
                  |L23.538|
00021a  4808              LDR      r0,|L23.572|
00021c  7800              LDRB     r0,[r0,#0]            ;512  ; TransferError
00021e  b110              CBZ      r0,|L23.550|
000220  4806              LDR      r0,|L23.572|
000222  f890a000          LDRB     r10,[r0,#0]           ;512  ; TransferError
                  |L23.550|
000226  4650              MOV      r0,r10                ;514
000228  e6fa              B        |L23.32|
;;;516    //SD卡读取多个块 
                          ENDP

00022a  0000              DCW      0x0000
                  |L23.556|
                          DCD      0x40012c2c
                  |L23.560|
                          DCD      CardType
                  |L23.564|
                          DCD      DeviceMode
                  |L23.568|
                          DCD      0x007fffff
                  |L23.572|
                          DCD      TransferError
                  |L23.576|
                          DCD      StopCondition
                  |L23.580|
                          DCD      TransferEnd
                  |L23.584|
                          DCD      0x40026400

                          AREA ||i.SD_ReadDisk||, CODE, READONLY, ALIGN=2

                  SD_ReadDisk PROC
;;;1269   //返回值:错误状态;0,正常;其他,错误代码;				  				 
;;;1270   u8 SD_ReadDisk(u8*buf,u32 sector,u8 cnt)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1271   {
000004  4683              MOV      r11,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
;;;1272   	u8 sta=SD_OK;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;1273   	long long lsector=sector;
00000e  2500              MOVS     r5,#0
000010  4634              MOV      r4,r6
;;;1274   	u8 n;
;;;1275   	if(CardType!=SDIO_STD_CAPACITY_SD_CARD_V1_1)lsector<<=9;
000012  4821              LDR      r0,|L24.152|
000014  7800              LDRB     r0,[r0,#0]  ; CardType
000016  b118              CBZ      r0,|L24.32|
000018  0268              LSLS     r0,r5,#9
00001a  ea4055d4          ORR      r5,r0,r4,LSR #23
00001e  0264              LSLS     r4,r4,#9
                  |L24.32|
;;;1276   	if((u32)buf%4!=0)
000020  f00b0003          AND      r0,r11,#3
000024  b1f0              CBZ      r0,|L24.100|
;;;1277   	{
;;;1278   	 	for(n=0;n<cnt;n++)
000026  f04f0a00          MOV      r10,#0
00002a  e018              B        |L24.94|
                  |L24.44|
;;;1279   		{
;;;1280   		 	sta=SD_ReadBlock(SDIO_DATA_BUFFER,lsector+512*n,512);//单个sector的读操作
00002c  f44f7000          MOV      r0,#0x200
000030  9000              STR      r0,[sp,#0]
000032  ea4f204a          LSL      r0,r10,#9
000036  1907              ADDS     r7,r0,r4
000038  eb4573e0          ADC      r3,r5,r0,ASR #31
00003c  463a              MOV      r2,r7
00003e  4817              LDR      r0,|L24.156|
000040  f7fffffe          BL       SD_ReadBlock
000044  9002              STR      r0,[sp,#8]
;;;1281   			memcpy(buf,SDIO_DATA_BUFFER,512);
000046  f44f7200          MOV      r2,#0x200
00004a  4914              LDR      r1,|L24.156|
00004c  4658              MOV      r0,r11
00004e  f7fffffe          BL       __aeabi_memcpy
;;;1282   			buf+=512;
000052  f50b7b00          ADD      r11,r11,#0x200
000056  f10a0001          ADD      r0,r10,#1             ;1278
00005a  f0000aff          AND      r10,r0,#0xff          ;1278
                  |L24.94|
00005e  45ca              CMP      r10,r9                ;1278
000060  dbe4              BLT      |L24.44|
000062  e016              B        |L24.146|
                  |L24.100|
;;;1283   		} 
;;;1284   	}else
;;;1285   	{
;;;1286   		if(cnt==1)sta=SD_ReadBlock(buf,lsector,512);    	//单个sector的读操作
000064  f1b90f01          CMP      r9,#1
000068  d109              BNE      |L24.126|
00006a  f44f7000          MOV      r0,#0x200
00006e  4622              MOV      r2,r4
000070  462b              MOV      r3,r5
000072  9000              STR      r0,[sp,#0]
000074  4658              MOV      r0,r11
000076  f7fffffe          BL       SD_ReadBlock
00007a  9002              STR      r0,[sp,#8]
00007c  e009              B        |L24.146|
                  |L24.126|
;;;1287   		else sta=SD_ReadMultiBlocks(buf,lsector,512,cnt);//多个sector  
00007e  f44f7000          MOV      r0,#0x200
000082  4622              MOV      r2,r4
000084  462b              MOV      r3,r5
000086  e9cd0900          STRD     r0,r9,[sp,#0]
00008a  4658              MOV      r0,r11
00008c  f7fffffe          BL       SD_ReadMultiBlocks
000090  9002              STR      r0,[sp,#8]
                  |L24.146|
;;;1288   	}
;;;1289   	return sta;
000092  9802              LDR      r0,[sp,#8]
;;;1290   }
000094  e8bd8ffe          POP      {r1-r11,pc}
;;;1291   //写SD卡
                          ENDP

                  |L24.152|
                          DCD      CardType
                  |L24.156|
                          DCD      SDIO_DATA_BUFFER

                          AREA ||i.SD_ReadMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_ReadMultiBlocks PROC
;;;522    __align(4) u32 *tempbuff;
;;;523    SD_Error SD_ReadMultiBlocks(u8 *buf,long long addr,u16 blksize,u32 nblks)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;524    {
000004  4683              MOV      r11,r0
000006  4617              MOV      r7,r2
000008  4698              MOV      r8,r3
00000a  e9dd460a          LDRD     r4,r6,[sp,#0x28]
;;;525      	SD_Error errorstatus=SD_OK;
00000e  f04f0900          MOV      r9,#0
;;;526    	u8 power;
;;;527       	u32 count=0;
000012  46ca              MOV      r10,r9
;;;528    	u32 timeout=SDIO_DATATIMEOUT;  
000014  f04f35ff          MOV      r5,#0xffffffff
;;;529    	tempbuff=(u32*)buf;//转换为u32指针
000018  48a1              LDR      r0,|L25.672|
00001a  f8c0b000          STR      r11,[r0,#0]  ; tempbuff
;;;530    	
;;;531        SDIO->DCTRL=0x0;		//数据控制寄存器清零(关DMA)   
00001e  2000              MOVS     r0,#0
000020  49a0              LDR      r1,|L25.676|
000022  6008              STR      r0,[r1,#0]
;;;532    	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)//大容量卡
000024  48a0              LDR      r0,|L25.680|
000026  7800              LDRB     r0,[r0,#0]  ; CardType
000028  2802              CMP      r0,#2
00002a  d105              BNE      |L25.56|
;;;533    	{
;;;534    		blksize=512;
00002c  0204              LSLS     r4,r0,#8
;;;535    		addr>>=9;
00002e  0a78              LSRS     r0,r7,#9
000030  ea4057c8          ORR      r7,r0,r8,LSL #23
000034  ea4f2868          ASR      r8,r8,#9
                  |L25.56|
;;;536    	}  
;;;537       	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,0,0,0);	//清除DPSM状态机配置
000038  2300              MOVS     r3,#0
00003a  461a              MOV      r2,r3
00003c  4619              MOV      r1,r3
00003e  1e58              SUBS     r0,r3,#1
000040  f7fffffe          BL       SDIO_Send_Data_Cfg
;;;538    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
000044  4897              LDR      r0,|L25.676|
000046  3818              SUBS     r0,r0,#0x18
000048  6800              LDR      r0,[r0,#0]
00004a  f0007000          AND      r0,r0,#0x2000000
00004e  b110              CBZ      r0,|L25.86|
000050  200e              MOVS     r0,#0xe
                  |L25.82|
;;;539    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;540    	{
;;;541    		power=convert_from_bytes_to_power_of_two(blksize);	    
;;;542    		SDIO_Send_Cmd(SD_CMD_SET_BLOCKLEN,1,blksize);	//发送CMD16+设置数据长度为blksize,短响应 	   
;;;543    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应   
;;;544    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;545    	}else return SD_INVALID_PARAMETER;	  
;;;546    	if(nblks>1)											//多块读  
;;;547    	{									    
;;;548     	  	if(nblks*blksize>SD_MAX_DATA_LENGTH)return SD_INVALID_PARAMETER;//判断是否超过最大接收长度
;;;549    		SDIO_Send_Data_Cfg(SD_DATATIMEOUT,nblks*blksize,power,1);//nblks*blksize,512块大小,卡到控制器	  
;;;550    	  	SDIO_Send_Cmd(SD_CMD_READ_MULT_BLOCK,1,addr);	//发送CMD18+从addr地址出读取数据,短响应 	   
;;;551    		errorstatus=CmdResp1Error(SD_CMD_READ_MULT_BLOCK);//等待R1响应   
;;;552    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	  
;;;553     		if(DeviceMode==SD_POLLING_MODE)
;;;554    		{
;;;555    			INTX_DISABLE();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
;;;556    			while(!(SDIO->STA&((1<<5)|(1<<1)|(1<<3)|(1<<8)|(1<<9))))//无上溢/CRC/超时/完成(标志)/起始位错误
;;;557    			{
;;;558    				if(SDIO->STA&(1<<15))						//接收区半满,表示至少存了8个字
;;;559    				{
;;;560    					for(count=0;count<8;count++)			//循环读取数据
;;;561    					{
;;;562    						*(tempbuff+count)=SDIO->FIFO;
;;;563    					}
;;;564    					tempbuff+=8;	 
;;;565    					timeout=0X7FFFFF; 	//读数据溢出时间
;;;566    				}else 	//处理超时
;;;567    				{
;;;568    					if(timeout==0)return SD_DATA_TIMEOUT;
;;;569    					timeout--;
;;;570    				}
;;;571    			}  
;;;572    			if(SDIO->STA&(1<<3))		//数据超时错误
;;;573    			{										   
;;;574    		 		SDIO->ICR|=1<<3; 		//清错误标志
;;;575    				return SD_DATA_TIMEOUT;
;;;576    		 	}else if(SDIO->STA&(1<<1))	//数据块CRC错误
;;;577    			{
;;;578    		 		SDIO->ICR|=1<<1; 		//清错误标志
;;;579    				return SD_DATA_CRC_FAIL;		   
;;;580    			}else if(SDIO->STA&(1<<5)) 	//接收fifo上溢错误
;;;581    			{
;;;582    		 		SDIO->ICR|=1<<5; 		//清错误标志
;;;583    				return SD_RX_OVERRUN;		 
;;;584    			}else if(SDIO->STA&(1<<9)) 	//接收起始位错误
;;;585    			{
;;;586    		 		SDIO->ICR|=1<<9; 		//清错误标志
;;;587    				return SD_START_BIT_ERR;		 
;;;588    			}   
;;;589    			while(SDIO->STA&(1<<21))	//FIFO里面,还存在可用数据
;;;590    			{
;;;591    				*tempbuff=SDIO->FIFO;	//循环读取数据
;;;592    				tempbuff++;
;;;593    			}
;;;594    	 		if(SDIO->STA&(1<<8))		//接收结束
;;;595    			{
;;;596    				if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;597    				{
;;;598    					SDIO_Send_Cmd(SD_CMD_STOP_TRANSMISSION,1,0);		//发送CMD12+结束传输 	   
;;;599    					errorstatus=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);//等待R1响应   
;;;600    					if(errorstatus!=SD_OK)return errorstatus;	 
;;;601    				}
;;;602     			}
;;;603    			INTX_ENABLE();//开启总中断
;;;604    	 		SDIO->ICR=0X5FF;	 		//清除所有标记 
;;;605     		}else if(DeviceMode==SD_DMA_MODE)
;;;606    		{
;;;607    	   		TransferError=SD_OK;
;;;608    			StopCondition=1;			//多块读,需要发送停止传输指令 
;;;609    			TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;610    			SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<5)|(1<<9);	//配置需要的中断 
;;;611    		 	SDIO->DCTRL|=1<<3;		 						//SDIO DMA使能 
;;;612    	 	    SD_DMA_Config((u32*)buf,nblks*blksize,0); 
;;;613    	 		while(((DMA2->LISR&(1<<27))==RESET)&&timeout)timeout--;//等待传输完成 
;;;614    			if(timeout==0)return SD_DATA_TIMEOUT;//超时
;;;615    			while((TransferEnd==0)&&(TransferError==SD_OK)); 
;;;616    			if(TransferError!=SD_OK)errorstatus=TransferError;  	 
;;;617    		}		 
;;;618      	}
;;;619    	return errorstatus;
;;;620    }			    																  
000052  e8bd8ff8          POP      {r3-r11,pc}
                  |L25.86|
000056  2c00              CMP      r4,#0                 ;539
000058  dd17              BLE      |L25.138|
00005a  f5b46f00          CMP      r4,#0x800             ;539
00005e  dc14              BGT      |L25.138|
000060  1e60              SUBS     r0,r4,#1              ;539
000062  4020              ANDS     r0,r0,r4              ;539
000064  b988              CBNZ     r0,|L25.138|
000066  4620              MOV      r0,r4                 ;541
000068  f7fffffe          BL       convert_from_bytes_to_power_of_two
00006c  9000              STR      r0,[sp,#0]            ;541
00006e  4622              MOV      r2,r4                 ;542
000070  2101              MOVS     r1,#1                 ;542
000072  2010              MOVS     r0,#0x10              ;542
000074  f7fffffe          BL       SDIO_Send_Cmd
000078  2010              MOVS     r0,#0x10              ;543
00007a  f7fffffe          BL       CmdResp1Error
00007e  4681              MOV      r9,r0                 ;543
000080  f1b90f00          CMP      r9,#0                 ;544
000084  d003              BEQ      |L25.142|
000086  4648              MOV      r0,r9                 ;544
000088  e7e3              B        |L25.82|
                  |L25.138|
00008a  2026              MOVS     r0,#0x26              ;545
00008c  e7e1              B        |L25.82|
                  |L25.142|
00008e  2e01              CMP      r6,#1                 ;546
000090  d97a              BLS      |L25.392|
000092  fb06f004          MUL      r0,r6,r4              ;548
000096  f1b07f00          CMP      r0,#0x2000000         ;548
00009a  d301              BCC      |L25.160|
00009c  2026              MOVS     r0,#0x26              ;548
00009e  e7d8              B        |L25.82|
                  |L25.160|
0000a0  fb06f104          MUL      r1,r6,r4              ;549
0000a4  2301              MOVS     r3,#1                 ;549
0000a6  1e98              SUBS     r0,r3,#2              ;549
0000a8  9a00              LDR      r2,[sp,#0]            ;549
0000aa  f7fffffe          BL       SDIO_Send_Data_Cfg
0000ae  463a              MOV      r2,r7                 ;550
0000b0  2101              MOVS     r1,#1                 ;550
0000b2  2012              MOVS     r0,#0x12              ;550
0000b4  f7fffffe          BL       SDIO_Send_Cmd
0000b8  2012              MOVS     r0,#0x12              ;551
0000ba  f7fffffe          BL       CmdResp1Error
0000be  4681              MOV      r9,r0                 ;551
0000c0  f1b90f00          CMP      r9,#0                 ;552
0000c4  d001              BEQ      |L25.202|
0000c6  4648              MOV      r0,r9                 ;552
0000c8  e7c3              B        |L25.82|
                  |L25.202|
0000ca  4878              LDR      r0,|L25.684|
0000cc  7800              LDRB     r0,[r0,#0]            ;553  ; DeviceMode
0000ce  2800              CMP      r0,#0                 ;553
0000d0  d17e              BNE      |L25.464|
0000d2  f7fffffe          BL       INTX_DISABLE
0000d6  e01f              B        |L25.280|
                  |L25.216|
0000d8  4872              LDR      r0,|L25.676|
0000da  3008              ADDS     r0,r0,#8              ;558
0000dc  6800              LDR      r0,[r0,#0]            ;558
0000de  f4004000          AND      r0,r0,#0x8000         ;558
0000e2  b1a8              CBZ      r0,|L25.272|
0000e4  f04f0a00          MOV      r10,#0                ;560
0000e8  e008              B        |L25.252|
                  |L25.234|
0000ea  486e              LDR      r0,|L25.676|
0000ec  3054              ADDS     r0,r0,#0x54           ;562
0000ee  6800              LDR      r0,[r0,#0]            ;562
0000f0  496b              LDR      r1,|L25.672|
0000f2  6809              LDR      r1,[r1,#0]            ;562  ; tempbuff
0000f4  f841002a          STR      r0,[r1,r10,LSL #2]    ;562
0000f8  f10a0a01          ADD      r10,r10,#1            ;560
                  |L25.252|
0000fc  f1ba0f08          CMP      r10,#8                ;560
000100  d3f3              BCC      |L25.234|
000102  4867              LDR      r0,|L25.672|
000104  6800              LDR      r0,[r0,#0]            ;564  ; tempbuff
000106  3020              ADDS     r0,r0,#0x20           ;564
000108  4965              LDR      r1,|L25.672|
00010a  6008              STR      r0,[r1,#0]            ;564  ; tempbuff
00010c  4d68              LDR      r5,|L25.688|
00010e  e003              B        |L25.280|
                  |L25.272|
000110  b90d              CBNZ     r5,|L25.278|
000112  2004              MOVS     r0,#4                 ;568
000114  e79d              B        |L25.82|
                  |L25.278|
000116  1e6d              SUBS     r5,r5,#1              ;569
                  |L25.280|
000118  4862              LDR      r0,|L25.676|
00011a  3008              ADDS     r0,r0,#8              ;556
00011c  6800              LDR      r0,[r0,#0]            ;556
00011e  f240312a          MOV      r1,#0x32a             ;556
000122  4008              ANDS     r0,r0,r1              ;556
000124  2800              CMP      r0,#0                 ;556
000126  d0d7              BEQ      |L25.216|
000128  485e              LDR      r0,|L25.676|
00012a  3008              ADDS     r0,r0,#8              ;572
00012c  6800              LDR      r0,[r0,#0]            ;572
00012e  f0000008          AND      r0,r0,#8              ;572
000132  b148              CBZ      r0,|L25.328|
000134  485b              LDR      r0,|L25.676|
000136  300c              ADDS     r0,r0,#0xc            ;574
000138  6800              LDR      r0,[r0,#0]            ;574
00013a  f0400008          ORR      r0,r0,#8              ;574
00013e  4959              LDR      r1,|L25.676|
000140  310c              ADDS     r1,r1,#0xc            ;574
000142  6008              STR      r0,[r1,#0]            ;574
000144  2004              MOVS     r0,#4                 ;575
000146  e784              B        |L25.82|
                  |L25.328|
000148  4856              LDR      r0,|L25.676|
00014a  3008              ADDS     r0,r0,#8              ;576
00014c  6800              LDR      r0,[r0,#0]            ;576
00014e  f0000002          AND      r0,r0,#2              ;576
000152  b148              CBZ      r0,|L25.360|
000154  4853              LDR      r0,|L25.676|
000156  300c              ADDS     r0,r0,#0xc            ;578
000158  6800              LDR      r0,[r0,#0]            ;578
00015a  f0400002          ORR      r0,r0,#2              ;578
00015e  4951              LDR      r1,|L25.676|
000160  310c              ADDS     r1,r1,#0xc            ;578
000162  6008              STR      r0,[r1,#0]            ;578
000164  2002              MOVS     r0,#2                 ;579
000166  e774              B        |L25.82|
                  |L25.360|
000168  484e              LDR      r0,|L25.676|
00016a  3008              ADDS     r0,r0,#8              ;580
00016c  6800              LDR      r0,[r0,#0]            ;580
00016e  f0000020          AND      r0,r0,#0x20           ;580
000172  b150              CBZ      r0,|L25.394|
000174  484b              LDR      r0,|L25.676|
000176  300c              ADDS     r0,r0,#0xc            ;582
000178  6800              LDR      r0,[r0,#0]            ;582
00017a  f0400020          ORR      r0,r0,#0x20           ;582
00017e  4949              LDR      r1,|L25.676|
000180  310c              ADDS     r1,r1,#0xc            ;582
000182  6008              STR      r0,[r1,#0]            ;582
000184  2006              MOVS     r0,#6                 ;583
000186  e764              B        |L25.82|
                  |L25.392|
000188  e087              B        |L25.666|
                  |L25.394|
00018a  4846              LDR      r0,|L25.676|
00018c  3008              ADDS     r0,r0,#8              ;584
00018e  6800              LDR      r0,[r0,#0]            ;584
000190  f4007000          AND      r0,r0,#0x200          ;584
000194  b148              CBZ      r0,|L25.426|
000196  4843              LDR      r0,|L25.676|
000198  300c              ADDS     r0,r0,#0xc            ;586
00019a  6800              LDR      r0,[r0,#0]            ;586
00019c  f4407000          ORR      r0,r0,#0x200          ;586
0001a0  4940              LDR      r1,|L25.676|
0001a2  310c              ADDS     r1,r1,#0xc            ;586
0001a4  6008              STR      r0,[r1,#0]            ;586
0001a6  2007              MOVS     r0,#7                 ;587
0001a8  e753              B        |L25.82|
                  |L25.426|
0001aa  e00a              B        |L25.450|
                  |L25.428|
0001ac  483d              LDR      r0,|L25.676|
0001ae  3054              ADDS     r0,r0,#0x54           ;591
0001b0  6800              LDR      r0,[r0,#0]            ;591
0001b2  493b              LDR      r1,|L25.672|
0001b4  6809              LDR      r1,[r1,#0]            ;591  ; tempbuff
0001b6  6008              STR      r0,[r1,#0]            ;591
0001b8  4839              LDR      r0,|L25.672|
0001ba  6800              LDR      r0,[r0,#0]            ;592  ; tempbuff
0001bc  1d00              ADDS     r0,r0,#4              ;592
0001be  4938              LDR      r1,|L25.672|
0001c0  6008              STR      r0,[r1,#0]            ;592  ; tempbuff
                  |L25.450|
0001c2  4838              LDR      r0,|L25.676|
0001c4  3008              ADDS     r0,r0,#8              ;589
0001c6  6800              LDR      r0,[r0,#0]            ;589
0001c8  f4001000          AND      r0,r0,#0x200000       ;589
0001cc  2800              CMP      r0,#0                 ;589
0001ce  e000              B        |L25.466|
                  |L25.464|
0001d0  e027              B        |L25.546|
                  |L25.466|
0001d2  d1eb              BNE      |L25.428|
0001d4  4833              LDR      r0,|L25.676|
0001d6  3008              ADDS     r0,r0,#8              ;594
0001d8  6800              LDR      r0,[r0,#0]            ;594
0001da  f4007080          AND      r0,r0,#0x100          ;594
0001de  b1c0              CBZ      r0,|L25.530|
0001e0  4831              LDR      r0,|L25.680|
0001e2  7800              LDRB     r0,[r0,#0]            ;596  ; CardType
0001e4  b138              CBZ      r0,|L25.502|
0001e6  4830              LDR      r0,|L25.680|
0001e8  7800              LDRB     r0,[r0,#0]            ;596  ; CardType
0001ea  2801              CMP      r0,#1                 ;596
0001ec  d003              BEQ      |L25.502|
0001ee  482e              LDR      r0,|L25.680|
0001f0  7800              LDRB     r0,[r0,#0]            ;596  ; CardType
0001f2  2802              CMP      r0,#2                 ;596
0001f4  d10d              BNE      |L25.530|
                  |L25.502|
0001f6  2200              MOVS     r2,#0                 ;598
0001f8  2101              MOVS     r1,#1                 ;598
0001fa  200c              MOVS     r0,#0xc               ;598
0001fc  f7fffffe          BL       SDIO_Send_Cmd
000200  200c              MOVS     r0,#0xc               ;599
000202  f7fffffe          BL       CmdResp1Error
000206  4681              MOV      r9,r0                 ;599
000208  f1b90f00          CMP      r9,#0                 ;600
00020c  d001              BEQ      |L25.530|
00020e  4648              MOV      r0,r9                 ;600
000210  e71f              B        |L25.82|
                  |L25.530|
000212  f7fffffe          BL       INTX_ENABLE
000216  f24050ff          MOV      r0,#0x5ff             ;604
00021a  4922              LDR      r1,|L25.676|
00021c  310c              ADDS     r1,r1,#0xc            ;604
00021e  6008              STR      r0,[r1,#0]            ;604
000220  e03b              B        |L25.666|
                  |L25.546|
000222  4822              LDR      r0,|L25.684|
000224  7800              LDRB     r0,[r0,#0]            ;605  ; DeviceMode
000226  2801              CMP      r0,#1                 ;605
000228  d137              BNE      |L25.666|
00022a  2000              MOVS     r0,#0                 ;607
00022c  4921              LDR      r1,|L25.692|
00022e  7008              STRB     r0,[r1,#0]            ;607
000230  2001              MOVS     r0,#1                 ;608
000232  4921              LDR      r1,|L25.696|
000234  7008              STRB     r0,[r1,#0]            ;608
000236  2000              MOVS     r0,#0                 ;609
000238  4920              LDR      r1,|L25.700|
00023a  7008              STRB     r0,[r1,#0]            ;609
00023c  4819              LDR      r0,|L25.676|
00023e  3010              ADDS     r0,r0,#0x10           ;610
000240  6800              LDR      r0,[r0,#0]            ;610
000242  f240312a          MOV      r1,#0x32a             ;610
000246  4308              ORRS     r0,r0,r1              ;610
000248  4916              LDR      r1,|L25.676|
00024a  3110              ADDS     r1,r1,#0x10           ;610
00024c  6008              STR      r0,[r1,#0]            ;610
00024e  4815              LDR      r0,|L25.676|
000250  6800              LDR      r0,[r0,#0]            ;611
000252  f0400008          ORR      r0,r0,#8              ;611
000256  4913              LDR      r1,|L25.676|
000258  6008              STR      r0,[r1,#0]            ;611
00025a  fb06f104          MUL      r1,r6,r4              ;612
00025e  2200              MOVS     r2,#0                 ;612
000260  4658              MOV      r0,r11                ;612
000262  f7fffffe          BL       SD_DMA_Config
000266  e000              B        |L25.618|
                  |L25.616|
000268  1e6d              SUBS     r5,r5,#1              ;613
                  |L25.618|
00026a  4815              LDR      r0,|L25.704|
00026c  6800              LDR      r0,[r0,#0]            ;613
00026e  f0006000          AND      r0,r0,#0x8000000      ;613
000272  b908              CBNZ     r0,|L25.632|
000274  2d00              CMP      r5,#0                 ;613
000276  d1f7              BNE      |L25.616|
                  |L25.632|
000278  b90d              CBNZ     r5,|L25.638|
00027a  2004              MOVS     r0,#4                 ;614
00027c  e6e9              B        |L25.82|
                  |L25.638|
00027e  bf00              NOP                            ;615
                  |L25.640|
000280  480e              LDR      r0,|L25.700|
000282  7800              LDRB     r0,[r0,#0]            ;615  ; TransferEnd
000284  b918              CBNZ     r0,|L25.654|
000286  480b              LDR      r0,|L25.692|
000288  7800              LDRB     r0,[r0,#0]            ;615  ; TransferError
00028a  2800              CMP      r0,#0                 ;615
00028c  d0f8              BEQ      |L25.640|
                  |L25.654|
00028e  4809              LDR      r0,|L25.692|
000290  7800              LDRB     r0,[r0,#0]            ;616  ; TransferError
000292  b110              CBZ      r0,|L25.666|
000294  4807              LDR      r0,|L25.692|
000296  f8909000          LDRB     r9,[r0,#0]            ;616  ; TransferError
                  |L25.666|
00029a  4648              MOV      r0,r9                 ;619
00029c  e6d9              B        |L25.82|
;;;621    //SD卡写1个块 
                          ENDP

00029e  0000              DCW      0x0000
                  |L25.672|
                          DCD      tempbuff
                  |L25.676|
                          DCD      0x40012c2c
                  |L25.680|
                          DCD      CardType
                  |L25.684|
                          DCD      DeviceMode
                  |L25.688|
                          DCD      0x007fffff
                  |L25.692|
                          DCD      TransferError
                  |L25.696|
                          DCD      StopCondition
                  |L25.700|
                          DCD      TransferEnd
                  |L25.704|
                          DCD      0x40026400

                          AREA ||i.SD_SelectDeselect||, CODE, READONLY, ALIGN=1

                  SD_SelectDeselect PROC
;;;423    //addr:卡的RCA地址
;;;424    SD_Error SD_SelectDeselect(u32 addr)
000000  b510              PUSH     {r4,lr}
;;;425    {
000002  4604              MOV      r4,r0
;;;426     	SDIO_Send_Cmd(SD_CMD_SEL_DESEL_CARD,1,addr);	//发送CMD7,选择卡,短响应	 	   
000004  4622              MOV      r2,r4
000006  2101              MOVS     r1,#1
000008  2007              MOVS     r0,#7
00000a  f7fffffe          BL       SDIO_Send_Cmd
;;;427       	return CmdResp1Error(SD_CMD_SEL_DESEL_CARD);	  
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       CmdResp1Error
;;;428    }
000014  bd10              POP      {r4,pc}
;;;429    //SD卡读取一个块 
                          ENDP


                          AREA ||i.SD_SendStatus||, CODE, READONLY, ALIGN=2

                  SD_SendStatus PROC
;;;1141   //返回值:错误代码
;;;1142   SD_Error SD_SendStatus(uint32_t *pcardstatus)
000000  b530              PUSH     {r4,r5,lr}
;;;1143   {
000002  4604              MOV      r4,r0
;;;1144   	SD_Error errorstatus = SD_OK;
000004  2500              MOVS     r5,#0
;;;1145   	if(pcardstatus==NULL)
000006  b914              CBNZ     r4,|L27.14|
;;;1146   	{
;;;1147   		errorstatus=SD_INVALID_PARAMETER;
000008  2526              MOVS     r5,#0x26
;;;1148   		return errorstatus;
00000a  4628              MOV      r0,r5
                  |L27.12|
;;;1149   	}
;;;1150    	SDIO_Send_Cmd(SD_CMD_SEND_STATUS,1,RCA<<16);	//发送CMD13,短响应		 
;;;1151   	errorstatus=CmdResp1Error(SD_CMD_SEND_STATUS);	//查询响应状态 
;;;1152   	if(errorstatus!=SD_OK)return errorstatus;
;;;1153   	*pcardstatus=SDIO->RESP1;//读取响应值
;;;1154   	return errorstatus;
;;;1155   } 
00000c  bd30              POP      {r4,r5,pc}
                  |L27.14|
00000e  4809              LDR      r0,|L27.52|
000010  8800              LDRH     r0,[r0,#0]            ;1150  ; RCA
000012  0402              LSLS     r2,r0,#16             ;1150
000014  2101              MOVS     r1,#1                 ;1150
000016  200d              MOVS     r0,#0xd               ;1150
000018  f7fffffe          BL       SDIO_Send_Cmd
00001c  200d              MOVS     r0,#0xd               ;1151
00001e  f7fffffe          BL       CmdResp1Error
000022  4605              MOV      r5,r0                 ;1151
000024  b10d              CBZ      r5,|L27.42|
000026  4628              MOV      r0,r5                 ;1152
000028  e7f0              B        |L27.12|
                  |L27.42|
00002a  4803              LDR      r0,|L27.56|
00002c  6800              LDR      r0,[r0,#0]            ;1153
00002e  6020              STR      r0,[r4,#0]            ;1153
000030  4628              MOV      r0,r5                 ;1154
000032  e7eb              B        |L27.12|
;;;1156   //返回SD卡的状态
                          ENDP

                  |L27.52|
                          DCD      ||RCA||
                  |L27.56|
                          DCD      0x40012c14

                          AREA ||i.SD_SetDeviceMode||, CODE, READONLY, ALIGN=2

                  SD_SetDeviceMode PROC
;;;413    //返回值:错误状态
;;;414    SD_Error SD_SetDeviceMode(u32 Mode)
000000  4601              MOV      r1,r0
;;;415    {
;;;416    	SD_Error errorstatus = SD_OK;
000002  2000              MOVS     r0,#0
;;;417     	if((Mode==SD_DMA_MODE)||(Mode==SD_POLLING_MODE))DeviceMode=Mode;
000004  2901              CMP      r1,#1
000006  d000              BEQ      |L28.10|
000008  b911              CBNZ     r1,|L28.16|
                  |L28.10|
00000a  4b02              LDR      r3,|L28.20|
00000c  7019              STRB     r1,[r3,#0]
00000e  e000              B        |L28.18|
                  |L28.16|
;;;418    	else errorstatus=SD_INVALID_PARAMETER;
000010  2026              MOVS     r0,#0x26
                  |L28.18|
;;;419    	return errorstatus;	    
;;;420    }
000012  4770              BX       lr
;;;421    //选卡
                          ENDP

                  |L28.20|
                          DCD      DeviceMode

                          AREA ||i.SD_WriteBlock||, CODE, READONLY, ALIGN=2

                  SD_WriteBlock PROC
;;;625    //返回值:错误状态
;;;626    SD_Error SD_WriteBlock(u8 *buf,long long addr,  u16 blksize)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;627    {
000004  b086              SUB      sp,sp,#0x18
000006  4617              MOV      r7,r2
000008  4698              MOV      r8,r3
00000a  9d14              LDR      r5,[sp,#0x50]
;;;628    	SD_Error errorstatus = SD_OK;
00000c  2600              MOVS     r6,#0
;;;629    	u8  power=0,cardstate=0;
00000e  2000              MOVS     r0,#0
000010  9005              STR      r0,[sp,#0x14]
000012  9004              STR      r0,[sp,#0x10]
;;;630    	u32 timeout=0,bytestransferred=0;
000014  2400              MOVS     r4,#0
000016  4681              MOV      r9,r0
;;;631    	u32 cardstatus=0,count=0,restwords=0;
000018  9003              STR      r0,[sp,#0xc]
00001a  4682              MOV      r10,r0
00001c  9002              STR      r0,[sp,#8]
;;;632    	u32	tlen=blksize;						//总长度(字节)
00001e  9501              STR      r5,[sp,#4]
;;;633    	u32*tempbuff=(u32*)buf;								 
000020  f8ddb018          LDR      r11,[sp,#0x18]
;;;634     	if(buf==NULL)return SD_INVALID_PARAMETER;//参数错误   
000024  f8ddb018          LDR      r11,[sp,#0x18]
000028  f1bb0f00          CMP      r11,#0
00002c  d103              BNE      |L29.54|
00002e  2026              MOVS     r0,#0x26
                  |L29.48|
;;;635      	SDIO->DCTRL=0x0;							//数据控制寄存器清零(关DMA)   
;;;636      	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,0,0,0);	//清除DPSM状态机配置
;;;637    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
;;;638     	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)	//大容量卡
;;;639    	{
;;;640    		blksize=512;
;;;641    		addr>>=9;
;;;642    	}    
;;;643    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;644    	{
;;;645    		power=convert_from_bytes_to_power_of_two(blksize);	    
;;;646    		SDIO_Send_Cmd(SD_CMD_SET_BLOCKLEN,1,blksize);	//发送CMD16+设置数据长度为blksize,短响应 	   
;;;647    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应   
;;;648    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;649    	}else return SD_INVALID_PARAMETER;	 
;;;650       	SDIO_Send_Cmd(SD_CMD_SEND_STATUS,1,(u32)RCA<<16);	//发送CMD13,查询卡的状态,短响应 	   
;;;651    	errorstatus=CmdResp1Error(SD_CMD_SEND_STATUS);		//等待R1响应   		   
;;;652    	if(errorstatus!=SD_OK)return errorstatus;
;;;653    	cardstatus=SDIO->RESP1;													  
;;;654    	timeout=SD_DATATIMEOUT;
;;;655       	while(((cardstatus&0x00000100)==0)&&(timeout>0)) 	//检查READY_FOR_DATA位是否置位
;;;656    	{
;;;657    		timeout--;
;;;658    	   	SDIO_Send_Cmd(SD_CMD_SEND_STATUS,1,(u32)RCA<<16);//发送CMD13,查询卡的状态,短响应 	   
;;;659    		errorstatus=CmdResp1Error(SD_CMD_SEND_STATUS);	//等待R1响应   		   
;;;660    		if(errorstatus!=SD_OK)return errorstatus;				    
;;;661    		cardstatus=SDIO->RESP1;													  
;;;662    	}
;;;663    	if(timeout==0)return SD_ERROR;
;;;664       	SDIO_Send_Cmd(SD_CMD_WRITE_SINGLE_BLOCK,1,addr);	//发送CMD24,写单块指令,短响应 	   
;;;665    	errorstatus=CmdResp1Error(SD_CMD_WRITE_SINGLE_BLOCK);//等待R1响应   		   
;;;666    	if(errorstatus!=SD_OK)return errorstatus;   	  
;;;667    	StopCondition=0;									//单块写,不需要发送停止传输指令 
;;;668     	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,blksize,power,0);	//blksize, 控制器到卡	  
;;;669    	timeout=SDIO_DATATIMEOUT;
;;;670    	if (DeviceMode == SD_POLLING_MODE)
;;;671    	{
;;;672    		INTX_DISABLE();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
;;;673    		while(!(SDIO->STA&((1<<10)|(1<<4)|(1<<1)|(1<<3)|(1<<9))))//数据块发送成功/下溢/CRC/超时/起始位错误
;;;674    		{
;;;675    			if(SDIO->STA&(1<<14))							//发送区半空,表示至少存了8个字
;;;676    			{
;;;677    				if((tlen-bytestransferred)<SD_HALFFIFOBYTES)//不够32字节了
;;;678    				{
;;;679    					restwords=((tlen-bytestransferred)%4==0)?((tlen-bytestransferred)/4):((tlen-bytestransferred)/4+1);
;;;680    					
;;;681    					for(count=0;count<restwords;count++,tempbuff++,bytestransferred+=4)
;;;682    					{
;;;683    						SDIO->FIFO=*tempbuff;
;;;684    					}
;;;685    				}else
;;;686    				{
;;;687    					for(count=0;count<8;count++)
;;;688    					{
;;;689    						SDIO->FIFO=*(tempbuff+count);
;;;690    					}
;;;691    					tempbuff+=8;
;;;692    					bytestransferred+=32;
;;;693    				}
;;;694    				timeout=0X3FFFFFFF;	//写数据溢出时间
;;;695    			}else
;;;696    			{
;;;697    				if(timeout==0)return SD_DATA_TIMEOUT;
;;;698    				timeout--;
;;;699    			}
;;;700    		} 
;;;701    		if(SDIO->STA&(1<<3))		//数据超时错误
;;;702    		{										   
;;;703    	 		SDIO->ICR|=1<<3; 		//清错误标志
;;;704    			return SD_DATA_TIMEOUT;
;;;705    	 	}else if(SDIO->STA&(1<<1))	//数据块CRC错误
;;;706    		{
;;;707    	 		SDIO->ICR|=1<<1; 		//清错误标志
;;;708    			return SD_DATA_CRC_FAIL;		   
;;;709    		}else if(SDIO->STA&(1<<4)) 	//接收fifo下溢错误
;;;710    		{
;;;711    	 		SDIO->ICR|=1<<4; 		//清错误标志
;;;712    			return SD_TX_UNDERRUN;		 
;;;713    		}else if(SDIO->STA&(1<<9)) 	//接收起始位错误
;;;714    		{
;;;715    	 		SDIO->ICR|=1<<9; 		//清错误标志
;;;716    			return SD_START_BIT_ERR;		 
;;;717    		}   
;;;718    		INTX_ENABLE();//开启总中断
;;;719    		SDIO->ICR=0X5FF;	 		//清除所有标记	  
;;;720    	}else if(DeviceMode==SD_DMA_MODE)
;;;721    	{
;;;722       		TransferError=SD_OK;
;;;723    		StopCondition=0;			//单块写,不需要发送停止传输指令 
;;;724    		TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;725    		SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<4)|(1<<9);	//配置产生数据接收完成中断
;;;726    		SD_DMA_Config((u32*)buf,blksize,1);				//SDIO DMA配置
;;;727     	 	SDIO->DCTRL|=1<<3;								//SDIO DMA使能.  
;;;728     		while(((DMA2->LISR&(1<<27))==RESET)&&timeout)timeout--;//等待传输完成 
;;;729    		if(timeout==0)
;;;730    		{
;;;731      			SD_Init();	 					//重新初始化SD卡,可以解决写入死机的问题
;;;732    			return SD_DATA_TIMEOUT;			//超时	 
;;;733     		}
;;;734    		timeout=SDIO_DATATIMEOUT;
;;;735    		while((TransferEnd==0)&&(TransferError==SD_OK)&&timeout)timeout--;
;;;736     		if(timeout==0)return SD_DATA_TIMEOUT;			//超时	 
;;;737      		if(TransferError!=SD_OK)return TransferError;
;;;738     	}  
;;;739     	SDIO->ICR=0X5FF;	 		//清除所有标记
;;;740     	errorstatus=IsCardProgramming(&cardstate);
;;;741     	while((errorstatus==SD_OK)&&((cardstate==SD_CARD_PROGRAMMING)||(cardstate==SD_CARD_RECEIVING)))
;;;742    	{
;;;743    		errorstatus=IsCardProgramming(&cardstate);
;;;744    	}   
;;;745    	return errorstatus;
;;;746    }
000030  b00a              ADD      sp,sp,#0x28
000032  e8bd9ff0          POP      {r4-r12,pc}
                  |L29.54|
000036  2000              MOVS     r0,#0                 ;635
000038  49ba              LDR      r1,|L29.804|
00003a  6008              STR      r0,[r1,#0]            ;635
00003c  2300              MOVS     r3,#0                 ;636
00003e  461a              MOV      r2,r3                 ;636
000040  4619              MOV      r1,r3                 ;636
000042  1e40              SUBS     r0,r0,#1              ;636
000044  f7fffffe          BL       SDIO_Send_Data_Cfg
000048  48b6              LDR      r0,|L29.804|
00004a  3818              SUBS     r0,r0,#0x18           ;637
00004c  6800              LDR      r0,[r0,#0]            ;637
00004e  f0007000          AND      r0,r0,#0x2000000      ;637
000052  b108              CBZ      r0,|L29.88|
000054  200e              MOVS     r0,#0xe               ;637
000056  e7eb              B        |L29.48|
                  |L29.88|
000058  48b3              LDR      r0,|L29.808|
00005a  7800              LDRB     r0,[r0,#0]            ;638  ; CardType
00005c  2802              CMP      r0,#2                 ;638
00005e  d105              BNE      |L29.108|
000060  0205              LSLS     r5,r0,#8              ;640
000062  0a78              LSRS     r0,r7,#9              ;641
000064  ea4057c8          ORR      r7,r0,r8,LSL #23      ;641
000068  ea4f2868          ASR      r8,r8,#9              ;641
                  |L29.108|
00006c  2d00              CMP      r5,#0                 ;643
00006e  dd15              BLE      |L29.156|
000070  f5b56f00          CMP      r5,#0x800             ;643
000074  dc12              BGT      |L29.156|
000076  1e68              SUBS     r0,r5,#1              ;643
000078  4028              ANDS     r0,r0,r5              ;643
00007a  b978              CBNZ     r0,|L29.156|
00007c  4628              MOV      r0,r5                 ;645
00007e  f7fffffe          BL       convert_from_bytes_to_power_of_two
000082  9005              STR      r0,[sp,#0x14]         ;645
000084  462a              MOV      r2,r5                 ;646
000086  2101              MOVS     r1,#1                 ;646
000088  2010              MOVS     r0,#0x10              ;646
00008a  f7fffffe          BL       SDIO_Send_Cmd
00008e  2010              MOVS     r0,#0x10              ;647
000090  f7fffffe          BL       CmdResp1Error
000094  4606              MOV      r6,r0                 ;647
000096  b11e              CBZ      r6,|L29.160|
000098  4630              MOV      r0,r6                 ;648
00009a  e7c9              B        |L29.48|
                  |L29.156|
00009c  2026              MOVS     r0,#0x26              ;649
00009e  e7c7              B        |L29.48|
                  |L29.160|
0000a0  48a2              LDR      r0,|L29.812|
0000a2  8800              LDRH     r0,[r0,#0]            ;650  ; RCA
0000a4  0402              LSLS     r2,r0,#16             ;650
0000a6  2101              MOVS     r1,#1                 ;650
0000a8  200d              MOVS     r0,#0xd               ;650
0000aa  f7fffffe          BL       SDIO_Send_Cmd
0000ae  200d              MOVS     r0,#0xd               ;651
0000b0  f7fffffe          BL       CmdResp1Error
0000b4  4606              MOV      r6,r0                 ;651
0000b6  b10e              CBZ      r6,|L29.188|
0000b8  4630              MOV      r0,r6                 ;652
0000ba  e7b9              B        |L29.48|
                  |L29.188|
0000bc  4899              LDR      r0,|L29.804|
0000be  3818              SUBS     r0,r0,#0x18           ;653
0000c0  6800              LDR      r0,[r0,#0]            ;653
0000c2  9003              STR      r0,[sp,#0xc]          ;653
0000c4  f04f34ff          MOV      r4,#0xffffffff        ;654
0000c8  e012              B        |L29.240|
                  |L29.202|
0000ca  1e64              SUBS     r4,r4,#1              ;657
0000cc  4897              LDR      r0,|L29.812|
0000ce  8800              LDRH     r0,[r0,#0]            ;658  ; RCA
0000d0  0402              LSLS     r2,r0,#16             ;658
0000d2  2101              MOVS     r1,#1                 ;658
0000d4  200d              MOVS     r0,#0xd               ;658
0000d6  f7fffffe          BL       SDIO_Send_Cmd
0000da  200d              MOVS     r0,#0xd               ;659
0000dc  f7fffffe          BL       CmdResp1Error
0000e0  4606              MOV      r6,r0                 ;659
0000e2  b10e              CBZ      r6,|L29.232|
0000e4  4630              MOV      r0,r6                 ;660
0000e6  e7a3              B        |L29.48|
                  |L29.232|
0000e8  488e              LDR      r0,|L29.804|
0000ea  3818              SUBS     r0,r0,#0x18           ;661
0000ec  6800              LDR      r0,[r0,#0]            ;661
0000ee  9003              STR      r0,[sp,#0xc]          ;661
                  |L29.240|
0000f0  9803              LDR      r0,[sp,#0xc]          ;655
0000f2  f4007080          AND      r0,r0,#0x100          ;655
0000f6  b908              CBNZ     r0,|L29.252|
0000f8  2c00              CMP      r4,#0                 ;655
0000fa  d1e6              BNE      |L29.202|
                  |L29.252|
0000fc  b90c              CBNZ     r4,|L29.258|
0000fe  2029              MOVS     r0,#0x29              ;663
000100  e796              B        |L29.48|
                  |L29.258|
000102  463a              MOV      r2,r7                 ;664
000104  2101              MOVS     r1,#1                 ;664
000106  2018              MOVS     r0,#0x18              ;664
000108  f7fffffe          BL       SDIO_Send_Cmd
00010c  2018              MOVS     r0,#0x18              ;665
00010e  f7fffffe          BL       CmdResp1Error
000112  4606              MOV      r6,r0                 ;665
000114  b10e              CBZ      r6,|L29.282|
000116  4630              MOV      r0,r6                 ;666
000118  e78a              B        |L29.48|
                  |L29.282|
00011a  2000              MOVS     r0,#0                 ;667
00011c  4984              LDR      r1,|L29.816|
00011e  7008              STRB     r0,[r1,#0]            ;667
000120  2300              MOVS     r3,#0                 ;668
000122  4629              MOV      r1,r5                 ;668
000124  1e40              SUBS     r0,r0,#1              ;668
000126  9a05              LDR      r2,[sp,#0x14]         ;668
000128  f7fffffe          BL       SDIO_Send_Data_Cfg
00012c  f04f34ff          MOV      r4,#0xffffffff        ;669
000130  4880              LDR      r0,|L29.820|
000132  7800              LDRB     r0,[r0,#0]            ;670  ; DeviceMode
000134  2800              CMP      r0,#0                 ;670
000136  d171              BNE      |L29.540|
000138  f7fffffe          BL       INTX_DISABLE
00013c  e046              B        |L29.460|
                  |L29.318|
00013e  4879              LDR      r0,|L29.804|
000140  3008              ADDS     r0,r0,#8              ;675
000142  6800              LDR      r0,[r0,#0]            ;675
000144  f4004080          AND      r0,r0,#0x4000         ;675
000148  b3d8              CBZ      r0,|L29.450|
00014a  9801              LDR      r0,[sp,#4]            ;677
00014c  eba00009          SUB      r0,r0,r9              ;677
000150  2820              CMP      r0,#0x20              ;677
000152  d222              BCS      |L29.410|
000154  9801              LDR      r0,[sp,#4]            ;679
000156  eba00009          SUB      r0,r0,r9              ;679
00015a  f0000003          AND      r0,r0,#3              ;679
00015e  b920              CBNZ     r0,|L29.362|
000160  9801              LDR      r0,[sp,#4]            ;679
000162  eba00009          SUB      r0,r0,r9              ;679
000166  0880              LSRS     r0,r0,#2              ;679
000168  e004              B        |L29.372|
                  |L29.362|
00016a  9801              LDR      r0,[sp,#4]            ;679
00016c  eba00009          SUB      r0,r0,r9              ;679
000170  0880              LSRS     r0,r0,#2              ;679
000172  1c40              ADDS     r0,r0,#1              ;679
                  |L29.372|
000174  9002              STR      r0,[sp,#8]            ;679
000176  f04f0a00          MOV      r10,#0                ;681
00017a  e00a              B        |L29.402|
                  |L29.380|
00017c  4969              LDR      r1,|L29.804|
00017e  3154              ADDS     r1,r1,#0x54           ;683
000180  f8db0000          LDR      r0,[r11,#0]           ;683
000184  6008              STR      r0,[r1,#0]            ;683
000186  f10a0a01          ADD      r10,r10,#1            ;681
00018a  f10b0b04          ADD      r11,r11,#4            ;681
00018e  f1090904          ADD      r9,r9,#4              ;681
                  |L29.402|
000192  9802              LDR      r0,[sp,#8]            ;681
000194  4582              CMP      r10,r0                ;681
000196  d3f1              BCC      |L29.380|
000198  e010              B        |L29.444|
                  |L29.410|
00019a  f04f0a00          MOV      r10,#0                ;687
00019e  e006              B        |L29.430|
                  |L29.416|
0001a0  f85b002a          LDR      r0,[r11,r10,LSL #2]   ;689
0001a4  495f              LDR      r1,|L29.804|
0001a6  3154              ADDS     r1,r1,#0x54           ;689
0001a8  6008              STR      r0,[r1,#0]            ;689
0001aa  f10a0a01          ADD      r10,r10,#1            ;687
                  |L29.430|
0001ae  f1ba0f08          CMP      r10,#8                ;687
0001b2  d3f5              BCC      |L29.416|
0001b4  f10b0b20          ADD      r11,r11,#0x20         ;691
0001b8  f1090920          ADD      r9,r9,#0x20           ;692
                  |L29.444|
0001bc  f06f4440          MVN      r4,#0xc0000000        ;694
0001c0  e004              B        |L29.460|
                  |L29.450|
0001c2  e7ff              B        |L29.452|
                  |L29.452|
0001c4  b90c              CBNZ     r4,|L29.458|
0001c6  2004              MOVS     r0,#4                 ;697
0001c8  e732              B        |L29.48|
                  |L29.458|
0001ca  1e64              SUBS     r4,r4,#1              ;698
                  |L29.460|
0001cc  4855              LDR      r0,|L29.804|
0001ce  3008              ADDS     r0,r0,#8              ;673
0001d0  6800              LDR      r0,[r0,#0]            ;673
0001d2  f240611a          MOV      r1,#0x61a             ;673
0001d6  4008              ANDS     r0,r0,r1              ;673
0001d8  2800              CMP      r0,#0                 ;673
0001da  d0b0              BEQ      |L29.318|
0001dc  4851              LDR      r0,|L29.804|
0001de  3008              ADDS     r0,r0,#8              ;701
0001e0  6800              LDR      r0,[r0,#0]            ;701
0001e2  f0000008          AND      r0,r0,#8              ;701
0001e6  b148              CBZ      r0,|L29.508|
0001e8  484e              LDR      r0,|L29.804|
0001ea  300c              ADDS     r0,r0,#0xc            ;703
0001ec  6800              LDR      r0,[r0,#0]            ;703
0001ee  f0400008          ORR      r0,r0,#8              ;703
0001f2  494c              LDR      r1,|L29.804|
0001f4  310c              ADDS     r1,r1,#0xc            ;703
0001f6  6008              STR      r0,[r1,#0]            ;703
0001f8  2004              MOVS     r0,#4                 ;704
0001fa  e719              B        |L29.48|
                  |L29.508|
0001fc  4849              LDR      r0,|L29.804|
0001fe  3008              ADDS     r0,r0,#8              ;705
000200  6800              LDR      r0,[r0,#0]            ;705
000202  f0000002          AND      r0,r0,#2              ;705
000206  b150              CBZ      r0,|L29.542|
000208  4846              LDR      r0,|L29.804|
00020a  300c              ADDS     r0,r0,#0xc            ;707
00020c  6800              LDR      r0,[r0,#0]            ;707
00020e  f0400002          ORR      r0,r0,#2              ;707
000212  4944              LDR      r1,|L29.804|
000214  310c              ADDS     r1,r1,#0xc            ;707
000216  6008              STR      r0,[r1,#0]            ;707
000218  2002              MOVS     r0,#2                 ;708
00021a  e709              B        |L29.48|
                  |L29.540|
00021c  e027              B        |L29.622|
                  |L29.542|
00021e  4841              LDR      r0,|L29.804|
000220  3008              ADDS     r0,r0,#8              ;709
000222  6800              LDR      r0,[r0,#0]            ;709
000224  f0000010          AND      r0,r0,#0x10           ;709
000228  b148              CBZ      r0,|L29.574|
00022a  483e              LDR      r0,|L29.804|
00022c  300c              ADDS     r0,r0,#0xc            ;711
00022e  6800              LDR      r0,[r0,#0]            ;711
000230  f0400010          ORR      r0,r0,#0x10           ;711
000234  493b              LDR      r1,|L29.804|
000236  310c              ADDS     r1,r1,#0xc            ;711
000238  6008              STR      r0,[r1,#0]            ;711
00023a  2005              MOVS     r0,#5                 ;712
00023c  e6f8              B        |L29.48|
                  |L29.574|
00023e  4839              LDR      r0,|L29.804|
000240  3008              ADDS     r0,r0,#8              ;713
000242  6800              LDR      r0,[r0,#0]            ;713
000244  f4007000          AND      r0,r0,#0x200          ;713
000248  b148              CBZ      r0,|L29.606|
00024a  4836              LDR      r0,|L29.804|
00024c  300c              ADDS     r0,r0,#0xc            ;715
00024e  6800              LDR      r0,[r0,#0]            ;715
000250  f4407000          ORR      r0,r0,#0x200          ;715
000254  4933              LDR      r1,|L29.804|
000256  310c              ADDS     r1,r1,#0xc            ;715
000258  6008              STR      r0,[r1,#0]            ;715
00025a  2007              MOVS     r0,#7                 ;716
00025c  e6e8              B        |L29.48|
                  |L29.606|
00025e  f7fffffe          BL       INTX_ENABLE
000262  f24050ff          MOV      r0,#0x5ff             ;719
000266  492f              LDR      r1,|L29.804|
000268  310c              ADDS     r1,r1,#0xc            ;719
00026a  6008              STR      r0,[r1,#0]            ;719
00026c  e041              B        |L29.754|
                  |L29.622|
00026e  4831              LDR      r0,|L29.820|
000270  7800              LDRB     r0,[r0,#0]            ;720  ; DeviceMode
000272  2801              CMP      r0,#1                 ;720
000274  d13d              BNE      |L29.754|
000276  2000              MOVS     r0,#0                 ;722
000278  492f              LDR      r1,|L29.824|
00027a  7008              STRB     r0,[r1,#0]            ;722
00027c  492c              LDR      r1,|L29.816|
00027e  7008              STRB     r0,[r1,#0]            ;723
000280  492e              LDR      r1,|L29.828|
000282  7008              STRB     r0,[r1,#0]            ;724
000284  4827              LDR      r0,|L29.804|
000286  3010              ADDS     r0,r0,#0x10           ;725
000288  6800              LDR      r0,[r0,#0]            ;725
00028a  f240311a          MOV      r1,#0x31a             ;725
00028e  4308              ORRS     r0,r0,r1              ;725
000290  4924              LDR      r1,|L29.804|
000292  3110              ADDS     r1,r1,#0x10           ;725
000294  6008              STR      r0,[r1,#0]            ;725
000296  2201              MOVS     r2,#1                 ;726
000298  4629              MOV      r1,r5                 ;726
00029a  9806              LDR      r0,[sp,#0x18]         ;726
00029c  f7fffffe          BL       SD_DMA_Config
0002a0  4820              LDR      r0,|L29.804|
0002a2  6800              LDR      r0,[r0,#0]            ;727
0002a4  f0400008          ORR      r0,r0,#8              ;727
0002a8  491e              LDR      r1,|L29.804|
0002aa  6008              STR      r0,[r1,#0]            ;727
0002ac  e000              B        |L29.688|
                  |L29.686|
0002ae  1e64              SUBS     r4,r4,#1              ;728
                  |L29.688|
0002b0  4823              LDR      r0,|L29.832|
0002b2  6800              LDR      r0,[r0,#0]            ;728
0002b4  f0006000          AND      r0,r0,#0x8000000      ;728
0002b8  b908              CBNZ     r0,|L29.702|
0002ba  2c00              CMP      r4,#0                 ;728
0002bc  d1f7              BNE      |L29.686|
                  |L29.702|
0002be  b91c              CBNZ     r4,|L29.712|
0002c0  f7fffffe          BL       SD_Init
0002c4  2004              MOVS     r0,#4                 ;732
0002c6  e6b3              B        |L29.48|
                  |L29.712|
0002c8  f04f34ff          MOV      r4,#0xffffffff        ;734
0002cc  e000              B        |L29.720|
                  |L29.718|
0002ce  1e64              SUBS     r4,r4,#1              ;735
                  |L29.720|
0002d0  481a              LDR      r0,|L29.828|
0002d2  7800              LDRB     r0,[r0,#0]            ;735  ; TransferEnd
0002d4  b920              CBNZ     r0,|L29.736|
0002d6  4818              LDR      r0,|L29.824|
0002d8  7800              LDRB     r0,[r0,#0]            ;735  ; TransferError
0002da  b908              CBNZ     r0,|L29.736|
0002dc  2c00              CMP      r4,#0                 ;735
0002de  d1f6              BNE      |L29.718|
                  |L29.736|
0002e0  b90c              CBNZ     r4,|L29.742|
0002e2  2004              MOVS     r0,#4                 ;736
0002e4  e6a4              B        |L29.48|
                  |L29.742|
0002e6  4814              LDR      r0,|L29.824|
0002e8  7800              LDRB     r0,[r0,#0]            ;737  ; TransferError
0002ea  b110              CBZ      r0,|L29.754|
0002ec  4812              LDR      r0,|L29.824|
0002ee  7800              LDRB     r0,[r0,#0]            ;737  ; TransferError
0002f0  e69e              B        |L29.48|
                  |L29.754|
0002f2  f24050ff          MOV      r0,#0x5ff             ;739
0002f6  490b              LDR      r1,|L29.804|
0002f8  310c              ADDS     r1,r1,#0xc            ;739
0002fa  6008              STR      r0,[r1,#0]            ;739
0002fc  a804              ADD      r0,sp,#0x10           ;740
0002fe  f7fffffe          BL       IsCardProgramming
000302  4606              MOV      r6,r0                 ;740
000304  e003              B        |L29.782|
                  |L29.774|
000306  a804              ADD      r0,sp,#0x10           ;743
000308  f7fffffe          BL       IsCardProgramming
00030c  4606              MOV      r6,r0                 ;743
                  |L29.782|
00030e  b93e              CBNZ     r6,|L29.800|
000310  f89d0010          LDRB     r0,[sp,#0x10]         ;741
000314  2807              CMP      r0,#7                 ;741
000316  d0f6              BEQ      |L29.774|
000318  f89d0010          LDRB     r0,[sp,#0x10]         ;741
00031c  2806              CMP      r0,#6                 ;741
00031e  d0f2              BEQ      |L29.774|
                  |L29.800|
000320  4630              MOV      r0,r6                 ;745
000322  e685              B        |L29.48|
;;;747    //SD卡写多个块 
                          ENDP

                  |L29.804|
                          DCD      0x40012c2c
                  |L29.808|
                          DCD      CardType
                  |L29.812|
                          DCD      ||RCA||
                  |L29.816|
                          DCD      StopCondition
                  |L29.820|
                          DCD      DeviceMode
                  |L29.824|
                          DCD      TransferError
                  |L29.828|
                          DCD      TransferEnd
                  |L29.832|
                          DCD      0x40026400

                          AREA ||i.SD_WriteDisk||, CODE, READONLY, ALIGN=2

                  SD_WriteDisk PROC
;;;1295   //返回值:错误状态;0,正常;其他,错误代码;	
;;;1296   u8 SD_WriteDisk(u8*buf,u32 sector,u8 cnt)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1297   {
000004  4606              MOV      r6,r0
000006  4689              MOV      r9,r1
000008  4692              MOV      r10,r2
;;;1298   	u8 sta=SD_OK;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;1299   	u8 n;
;;;1300   	long long lsector=sector;
00000e  2500              MOVS     r5,#0
000010  464c              MOV      r4,r9
;;;1301   	if(CardType!=SDIO_STD_CAPACITY_SD_CARD_V1_1)lsector<<=9;
000012  4821              LDR      r0,|L30.152|
000014  7800              LDRB     r0,[r0,#0]  ; CardType
000016  b118              CBZ      r0,|L30.32|
000018  0268              LSLS     r0,r5,#9
00001a  ea4055d4          ORR      r5,r0,r4,LSR #23
00001e  0264              LSLS     r4,r4,#9
                  |L30.32|
;;;1302   	if((u32)buf%4!=0)
000020  f0060003          AND      r0,r6,#3
000024  b1f0              CBZ      r0,|L30.100|
;;;1303   	{
;;;1304   	 	for(n=0;n<cnt;n++)
000026  f04f0b00          MOV      r11,#0
00002a  e018              B        |L30.94|
                  |L30.44|
;;;1305   		{
;;;1306   			memcpy(SDIO_DATA_BUFFER,buf,512);
00002c  f44f7200          MOV      r2,#0x200
000030  4631              MOV      r1,r6
000032  481a              LDR      r0,|L30.156|
000034  f7fffffe          BL       __aeabi_memcpy
;;;1307   		 	sta=SD_WriteBlock(SDIO_DATA_BUFFER,lsector+512*n,512);//单个sector的写操作
000038  f44f7000          MOV      r0,#0x200
00003c  9000              STR      r0,[sp,#0]
00003e  ea4f204b          LSL      r0,r11,#9
000042  1907              ADDS     r7,r0,r4
000044  eb4573e0          ADC      r3,r5,r0,ASR #31
000048  463a              MOV      r2,r7
00004a  4814              LDR      r0,|L30.156|
00004c  f7fffffe          BL       SD_WriteBlock
000050  9002              STR      r0,[sp,#8]
;;;1308   			buf+=512;
000052  f5067600          ADD      r6,r6,#0x200
000056  f10b0001          ADD      r0,r11,#1             ;1304
00005a  f0000bff          AND      r11,r0,#0xff          ;1304
                  |L30.94|
00005e  45d3              CMP      r11,r10               ;1304
000060  dbe4              BLT      |L30.44|
000062  e016              B        |L30.146|
                  |L30.100|
;;;1309   		} 
;;;1310   	}else
;;;1311   	{
;;;1312   		if(cnt==1)sta=SD_WriteBlock(buf,lsector,512);    	//单个sector的写操作
000064  f1ba0f01          CMP      r10,#1
000068  d109              BNE      |L30.126|
00006a  f44f7000          MOV      r0,#0x200
00006e  4622              MOV      r2,r4
000070  462b              MOV      r3,r5
000072  9000              STR      r0,[sp,#0]
000074  4630              MOV      r0,r6
000076  f7fffffe          BL       SD_WriteBlock
00007a  9002              STR      r0,[sp,#8]
00007c  e009              B        |L30.146|
                  |L30.126|
;;;1313   		else sta=SD_WriteMultiBlocks(buf,lsector,512,cnt);	//多个sector  
00007e  f44f7000          MOV      r0,#0x200
000082  4622              MOV      r2,r4
000084  462b              MOV      r3,r5
000086  e9cd0a00          STRD     r0,r10,[sp,#0]
00008a  4630              MOV      r0,r6
00008c  f7fffffe          BL       SD_WriteMultiBlocks
000090  9002              STR      r0,[sp,#8]
                  |L30.146|
;;;1314   	}
;;;1315   	return sta;
000092  9802              LDR      r0,[sp,#8]
;;;1316   }
000094  e8bd8ffe          POP      {r1-r11,pc}
;;;1317   
                          ENDP

                  |L30.152|
                          DCD      CardType
                  |L30.156|
                          DCD      SDIO_DATA_BUFFER

                          AREA ||i.SD_WriteMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_WriteMultiBlocks PROC
;;;752    //返回值:错误状态												   
;;;753    SD_Error SD_WriteMultiBlocks(u8 *buf,long long addr,u16 blksize,u32 nblks)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;754    {
000004  b084              SUB      sp,sp,#0x10
000006  e9dd4712          LDRD     r4,r7,[sp,#0x48]
;;;755    	SD_Error errorstatus = SD_OK;
00000a  2600              MOVS     r6,#0
;;;756    	u8  power = 0, cardstate = 0;
00000c  2000              MOVS     r0,#0
00000e  9003              STR      r0,[sp,#0xc]
000010  9002              STR      r0,[sp,#8]
;;;757    	u32 timeout=0,bytestransferred=0;
000012  2500              MOVS     r5,#0
000014  4680              MOV      r8,r0
;;;758    	u32 count = 0, restwords = 0;
000016  4681              MOV      r9,r0
000018  9001              STR      r0,[sp,#4]
;;;759    	u32 tlen=nblks*blksize;				//总长度(字节)
00001a  fb07fb04          MUL      r11,r7,r4
;;;760    	u32 *tempbuff = (u32*)buf;  
00001e  f8dda010          LDR      r10,[sp,#0x10]
;;;761      	if(buf==NULL)return SD_INVALID_PARAMETER; //参数错误  
000022  f8dda010          LDR      r10,[sp,#0x10]
000026  f1ba0f00          CMP      r10,#0
00002a  d103              BNE      |L31.52|
00002c  2026              MOVS     r0,#0x26
                  |L31.46|
;;;762      	SDIO->DCTRL=0x0;							//数据控制寄存器清零(关DMA)   
;;;763      	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,0,0,0);	//清除DPSM状态机配置
;;;764    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
;;;765     	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)//大容量卡
;;;766    	{
;;;767    		blksize=512;
;;;768    		addr>>=9;
;;;769    	}    
;;;770    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;771    	{
;;;772    		power=convert_from_bytes_to_power_of_two(blksize);	    
;;;773    		SDIO_Send_Cmd(SD_CMD_SET_BLOCKLEN,1,blksize);	//发送CMD16+设置数据长度为blksize,短响应 	   
;;;774    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应   
;;;775    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;776    	}else return SD_INVALID_PARAMETER;	 
;;;777    	if(nblks>1)
;;;778    	{					  
;;;779    		if(nblks*blksize>SD_MAX_DATA_LENGTH)return SD_INVALID_PARAMETER;   
;;;780         	if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;781        	{
;;;782    			//提高性能
;;;783    	 	   	SDIO_Send_Cmd(SD_CMD_APP_CMD,1,(u32)RCA<<16);	//发送ACMD55,短响应 	   
;;;784    			errorstatus=CmdResp1Error(SD_CMD_APP_CMD);		//等待R1响应   		   
;;;785    			if(errorstatus!=SD_OK)return errorstatus;				    
;;;786    	 	   	SDIO_Send_Cmd(SD_CMD_SET_BLOCK_COUNT,1,nblks);	//发送CMD23,设置块数量,短响应 	   
;;;787    			errorstatus=CmdResp1Error(SD_CMD_SET_BLOCK_COUNT);//等待R1响应   		   
;;;788    			if(errorstatus!=SD_OK)return errorstatus;				    
;;;789    		} 
;;;790    		SDIO_Send_Cmd(SD_CMD_WRITE_MULT_BLOCK,1,addr);		//发送CMD25,多块写指令,短响应 	   
;;;791    		errorstatus=CmdResp1Error(SD_CMD_WRITE_MULT_BLOCK);	//等待R1响应   		   
;;;792    		if(errorstatus!=SD_OK)return errorstatus;
;;;793     	 	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,nblks*blksize,power,0);//blksize, 控制器到卡	
;;;794    		if(DeviceMode==SD_POLLING_MODE)
;;;795    	    {
;;;796    			timeout=SDIO_DATATIMEOUT;
;;;797    			INTX_DISABLE();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
;;;798    			while(!(SDIO->STA&((1<<4)|(1<<1)|(1<<8)|(1<<3)|(1<<9))))//下溢/CRC/数据结束/超时/起始位错误
;;;799    			{
;;;800    				if(SDIO->STA&(1<<14))							//发送区半空,表示至少存了8字(32字节)
;;;801    				{	  
;;;802    					if((tlen-bytestransferred)<SD_HALFFIFOBYTES)//不够32字节了
;;;803    					{
;;;804    						restwords=((tlen-bytestransferred)%4==0)?((tlen-bytestransferred)/4):((tlen-bytestransferred)/4+1);
;;;805    						for(count=0;count<restwords;count++,tempbuff++,bytestransferred+=4)
;;;806    						{
;;;807    							SDIO->FIFO=*tempbuff;
;;;808    						}
;;;809    					}else 										//发送区半空,可以发送至少8字(32字节)数据
;;;810    					{
;;;811    						for(count=0;count<SD_HALFFIFO;count++)
;;;812    						{
;;;813    							SDIO->FIFO=*(tempbuff+count);
;;;814    						}
;;;815    						tempbuff+=SD_HALFFIFO;
;;;816    						bytestransferred+=SD_HALFFIFOBYTES;
;;;817    					}
;;;818    					timeout=0X3FFFFFFF;	//写数据溢出时间
;;;819    				}else
;;;820    				{
;;;821    					if(timeout==0)return SD_DATA_TIMEOUT; 
;;;822    					timeout--;
;;;823    				}
;;;824    			} 
;;;825    			if(SDIO->STA&(1<<3))		//数据超时错误
;;;826    			{										   
;;;827    		 		SDIO->ICR|=1<<3; 		//清错误标志
;;;828    				return SD_DATA_TIMEOUT;
;;;829    		 	}else if(SDIO->STA&(1<<1))	//数据块CRC错误
;;;830    			{
;;;831    		 		SDIO->ICR|=1<<1; 		//清错误标志
;;;832    				return SD_DATA_CRC_FAIL;		   
;;;833    			}else if(SDIO->STA&(1<<4)) 	//接收fifo下溢错误
;;;834    			{
;;;835    		 		SDIO->ICR|=1<<4; 		//清错误标志
;;;836    				return SD_TX_UNDERRUN;		 
;;;837    			}else if(SDIO->STA&(1<<9)) 	//接收起始位错误
;;;838    			{
;;;839    		 		SDIO->ICR|=1<<9; 		//清错误标志
;;;840    				return SD_START_BIT_ERR;		 
;;;841    			}   										   
;;;842    			if(SDIO->STA&(1<<8))		//发送结束
;;;843    			{															 
;;;844    				if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;845    				{
;;;846    					SDIO_Send_Cmd(SD_CMD_STOP_TRANSMISSION,1,0);		//发送CMD12+结束传输 	   
;;;847    					errorstatus=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);//等待R1响应   
;;;848    					if(errorstatus!=SD_OK)return errorstatus;	 
;;;849    				}
;;;850    			}
;;;851    			INTX_ENABLE();//开启总中断
;;;852    	 		SDIO->ICR=0X5FF;	 		//清除所有标记 
;;;853    	    }else if(DeviceMode==SD_DMA_MODE)
;;;854    		{
;;;855    	   		TransferError=SD_OK;
;;;856    			StopCondition=1;			//多块写,需要发送停止传输指令 
;;;857    			TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;858    			SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<4)|(1<<9);	//配置产生数据接收完成中断
;;;859    			SD_DMA_Config((u32*)buf,nblks*blksize,1);		//SDIO DMA配置
;;;860    	 	 	SDIO->DCTRL|=1<<3;								//SDIO DMA使能. 
;;;861    			timeout=SDIO_DATATIMEOUT;
;;;862    	 		while(((DMA2->LISR&(1<<27))==RESET)&&timeout)timeout--;//等待传输完成 
;;;863    			if(timeout==0)	 								//超时
;;;864    			{									  
;;;865      				SD_Init();	 					//重新初始化SD卡,可以解决写入死机的问题
;;;866    	 			return SD_DATA_TIMEOUT;			//超时	 
;;;867    	 		}
;;;868    			timeout=SDIO_DATATIMEOUT;
;;;869    			while((TransferEnd==0)&&(TransferError==SD_OK)&&timeout)timeout--;
;;;870    	 		if(timeout==0)return SD_DATA_TIMEOUT;			//超时	 
;;;871    	 		if(TransferError!=SD_OK)return TransferError;	 
;;;872    		}
;;;873      	}
;;;874     	SDIO->ICR=0X5FF;	 		//清除所有标记
;;;875     	errorstatus=IsCardProgramming(&cardstate);
;;;876     	while((errorstatus==SD_OK)&&((cardstate==SD_CARD_PROGRAMMING)||(cardstate==SD_CARD_RECEIVING)))
;;;877    	{
;;;878    		errorstatus=IsCardProgramming(&cardstate);
;;;879    	}   
;;;880    	return errorstatus;	   
;;;881    }
00002e  b008              ADD      sp,sp,#0x20
000030  e8bd9ff0          POP      {r4-r12,pc}
                  |L31.52|
000034  2000              MOVS     r0,#0                 ;762
000036  49c9              LDR      r1,|L31.860|
000038  6008              STR      r0,[r1,#0]            ;762
00003a  2300              MOVS     r3,#0                 ;763
00003c  461a              MOV      r2,r3                 ;763
00003e  4619              MOV      r1,r3                 ;763
000040  1e40              SUBS     r0,r0,#1              ;763
000042  f7fffffe          BL       SDIO_Send_Data_Cfg
000046  48c5              LDR      r0,|L31.860|
000048  3818              SUBS     r0,r0,#0x18           ;764
00004a  6800              LDR      r0,[r0,#0]            ;764
00004c  f0007000          AND      r0,r0,#0x2000000      ;764
000050  b108              CBZ      r0,|L31.86|
000052  200e              MOVS     r0,#0xe               ;764
000054  e7eb              B        |L31.46|
                  |L31.86|
000056  48c2              LDR      r0,|L31.864|
000058  7800              LDRB     r0,[r0,#0]            ;765  ; CardType
00005a  2802              CMP      r0,#2                 ;765
00005c  d108              BNE      |L31.112|
00005e  0204              LSLS     r4,r0,#8              ;767
000060  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;768
000064  0a40              LSRS     r0,r0,#9              ;768
000066  ea4050c1          ORR      r0,r0,r1,LSL #23      ;768
00006a  1249              ASRS     r1,r1,#9              ;768
00006c  e9cd0106          STRD     r0,r1,[sp,#0x18]      ;768
                  |L31.112|
000070  2c00              CMP      r4,#0                 ;770
000072  dd15              BLE      |L31.160|
000074  f5b46f00          CMP      r4,#0x800             ;770
000078  dc12              BGT      |L31.160|
00007a  1e60              SUBS     r0,r4,#1              ;770
00007c  4020              ANDS     r0,r0,r4              ;770
00007e  b978              CBNZ     r0,|L31.160|
000080  4620              MOV      r0,r4                 ;772
000082  f7fffffe          BL       convert_from_bytes_to_power_of_two
000086  9003              STR      r0,[sp,#0xc]          ;772
000088  4622              MOV      r2,r4                 ;773
00008a  2101              MOVS     r1,#1                 ;773
00008c  2010              MOVS     r0,#0x10              ;773
00008e  f7fffffe          BL       SDIO_Send_Cmd
000092  2010              MOVS     r0,#0x10              ;774
000094  f7fffffe          BL       CmdResp1Error
000098  4606              MOV      r6,r0                 ;774
00009a  b11e              CBZ      r6,|L31.164|
00009c  4630              MOV      r0,r6                 ;775
00009e  e7c6              B        |L31.46|
                  |L31.160|
0000a0  2026              MOVS     r0,#0x26              ;776
0000a2  e7c4              B        |L31.46|
                  |L31.164|
0000a4  2f01              CMP      r7,#1                 ;777
0000a6  d970              BLS      |L31.394|
0000a8  fb07f004          MUL      r0,r7,r4              ;779
0000ac  f1b07f00          CMP      r0,#0x2000000         ;779
0000b0  d301              BCC      |L31.182|
0000b2  2026              MOVS     r0,#0x26              ;779
0000b4  e7bb              B        |L31.46|
                  |L31.182|
0000b6  48aa              LDR      r0,|L31.864|
0000b8  7800              LDRB     r0,[r0,#0]            ;780  ; CardType
0000ba  b138              CBZ      r0,|L31.204|
0000bc  48a8              LDR      r0,|L31.864|
0000be  7800              LDRB     r0,[r0,#0]            ;780  ; CardType
0000c0  2801              CMP      r0,#1                 ;780
0000c2  d003              BEQ      |L31.204|
0000c4  48a6              LDR      r0,|L31.864|
0000c6  7800              LDRB     r0,[r0,#0]            ;780  ; CardType
0000c8  2802              CMP      r0,#2                 ;780
0000ca  d119              BNE      |L31.256|
                  |L31.204|
0000cc  48a5              LDR      r0,|L31.868|
0000ce  8800              LDRH     r0,[r0,#0]            ;783  ; RCA
0000d0  0402              LSLS     r2,r0,#16             ;783
0000d2  2101              MOVS     r1,#1                 ;783
0000d4  2037              MOVS     r0,#0x37              ;783
0000d6  f7fffffe          BL       SDIO_Send_Cmd
0000da  2037              MOVS     r0,#0x37              ;784
0000dc  f7fffffe          BL       CmdResp1Error
0000e0  4606              MOV      r6,r0                 ;784
0000e2  b10e              CBZ      r6,|L31.232|
0000e4  4630              MOV      r0,r6                 ;785
0000e6  e7a2              B        |L31.46|
                  |L31.232|
0000e8  463a              MOV      r2,r7                 ;786
0000ea  2101              MOVS     r1,#1                 ;786
0000ec  2017              MOVS     r0,#0x17              ;786
0000ee  f7fffffe          BL       SDIO_Send_Cmd
0000f2  2017              MOVS     r0,#0x17              ;787
0000f4  f7fffffe          BL       CmdResp1Error
0000f8  4606              MOV      r6,r0                 ;787
0000fa  b10e              CBZ      r6,|L31.256|
0000fc  4630              MOV      r0,r6                 ;788
0000fe  e796              B        |L31.46|
                  |L31.256|
000100  2101              MOVS     r1,#1                 ;790
000102  2019              MOVS     r0,#0x19              ;790
000104  9a06              LDR      r2,[sp,#0x18]         ;790
000106  f7fffffe          BL       SDIO_Send_Cmd
00010a  2019              MOVS     r0,#0x19              ;791
00010c  f7fffffe          BL       CmdResp1Error
000110  4606              MOV      r6,r0                 ;791
000112  b10e              CBZ      r6,|L31.280|
000114  4630              MOV      r0,r6                 ;792
000116  e78a              B        |L31.46|
                  |L31.280|
000118  fb07f104          MUL      r1,r7,r4              ;793
00011c  2300              MOVS     r3,#0                 ;793
00011e  1e58              SUBS     r0,r3,#1              ;793
000120  9a03              LDR      r2,[sp,#0xc]          ;793
000122  f7fffffe          BL       SDIO_Send_Data_Cfg
000126  4890              LDR      r0,|L31.872|
000128  7800              LDRB     r0,[r0,#0]            ;794  ; DeviceMode
00012a  2800              CMP      r0,#0                 ;794
00012c  d16f              BNE      |L31.526|
00012e  1e45              SUBS     r5,r0,#1              ;796
000130  f7fffffe          BL       INTX_DISABLE
000134  e043              B        |L31.446|
                  |L31.310|
000136  4889              LDR      r0,|L31.860|
000138  3008              ADDS     r0,r0,#8              ;800
00013a  6800              LDR      r0,[r0,#0]            ;800
00013c  f4004080          AND      r0,r0,#0x4000         ;800
000140  b3c0              CBZ      r0,|L31.436|
000142  ebab0008          SUB      r0,r11,r8             ;802
000146  2820              CMP      r0,#0x20              ;802
000148  d220              BCS      |L31.396|
00014a  ebab0008          SUB      r0,r11,r8             ;804
00014e  f0000003          AND      r0,r0,#3              ;804
000152  b918              CBNZ     r0,|L31.348|
000154  ebab0008          SUB      r0,r11,r8             ;804
000158  0880              LSRS     r0,r0,#2              ;804
00015a  e003              B        |L31.356|
                  |L31.348|
00015c  ebab0008          SUB      r0,r11,r8             ;804
000160  0880              LSRS     r0,r0,#2              ;804
000162  1c40              ADDS     r0,r0,#1              ;804
                  |L31.356|
000164  9001              STR      r0,[sp,#4]            ;804
000166  f04f0900          MOV      r9,#0                 ;805
00016a  e00a              B        |L31.386|
                  |L31.364|
00016c  497b              LDR      r1,|L31.860|
00016e  3154              ADDS     r1,r1,#0x54           ;807
000170  f8da0000          LDR      r0,[r10,#0]           ;807
000174  6008              STR      r0,[r1,#0]            ;807
000176  f1090901          ADD      r9,r9,#1              ;805
00017a  f10a0a04          ADD      r10,r10,#4            ;805
00017e  f1080804          ADD      r8,r8,#4              ;805
                  |L31.386|
000182  9801              LDR      r0,[sp,#4]            ;805
000184  4581              CMP      r9,r0                 ;805
000186  d3f1              BCC      |L31.364|
000188  e011              B        |L31.430|
                  |L31.394|
00018a  e0cd              B        |L31.808|
                  |L31.396|
00018c  f04f0900          MOV      r9,#0                 ;811
000190  e006              B        |L31.416|
                  |L31.402|
000192  f85a0029          LDR      r0,[r10,r9,LSL #2]    ;813
000196  4971              LDR      r1,|L31.860|
000198  3154              ADDS     r1,r1,#0x54           ;813
00019a  6008              STR      r0,[r1,#0]            ;813
00019c  f1090901          ADD      r9,r9,#1              ;811
                  |L31.416|
0001a0  f1b90f08          CMP      r9,#8                 ;811
0001a4  d3f5              BCC      |L31.402|
0001a6  f10a0a20          ADD      r10,r10,#0x20         ;815
0001aa  f1080820          ADD      r8,r8,#0x20           ;816
                  |L31.430|
0001ae  f06f4540          MVN      r5,#0xc0000000        ;818
0001b2  e004              B        |L31.446|
                  |L31.436|
0001b4  e7ff              B        |L31.438|
                  |L31.438|
0001b6  b90d              CBNZ     r5,|L31.444|
0001b8  2004              MOVS     r0,#4                 ;821
0001ba  e738              B        |L31.46|
                  |L31.444|
0001bc  1e6d              SUBS     r5,r5,#1              ;822
                  |L31.446|
0001be  4867              LDR      r0,|L31.860|
0001c0  3008              ADDS     r0,r0,#8              ;798
0001c2  6800              LDR      r0,[r0,#0]            ;798
0001c4  f240311a          MOV      r1,#0x31a             ;798
0001c8  4008              ANDS     r0,r0,r1              ;798
0001ca  2800              CMP      r0,#0                 ;798
0001cc  d0b3              BEQ      |L31.310|
0001ce  4863              LDR      r0,|L31.860|
0001d0  3008              ADDS     r0,r0,#8              ;825
0001d2  6800              LDR      r0,[r0,#0]            ;825
0001d4  f0000008          AND      r0,r0,#8              ;825
0001d8  b148              CBZ      r0,|L31.494|
0001da  4860              LDR      r0,|L31.860|
0001dc  300c              ADDS     r0,r0,#0xc            ;827
0001de  6800              LDR      r0,[r0,#0]            ;827
0001e0  f0400008          ORR      r0,r0,#8              ;827
0001e4  495d              LDR      r1,|L31.860|
0001e6  310c              ADDS     r1,r1,#0xc            ;827
0001e8  6008              STR      r0,[r1,#0]            ;827
0001ea  2004              MOVS     r0,#4                 ;828
0001ec  e71f              B        |L31.46|
                  |L31.494|
0001ee  485b              LDR      r0,|L31.860|
0001f0  3008              ADDS     r0,r0,#8              ;829
0001f2  6800              LDR      r0,[r0,#0]            ;829
0001f4  f0000002          AND      r0,r0,#2              ;829
0001f8  b150              CBZ      r0,|L31.528|
0001fa  4858              LDR      r0,|L31.860|
0001fc  300c              ADDS     r0,r0,#0xc            ;831
0001fe  6800              LDR      r0,[r0,#0]            ;831
000200  f0400002          ORR      r0,r0,#2              ;831
000204  4955              LDR      r1,|L31.860|
000206  310c              ADDS     r1,r1,#0xc            ;831
000208  6008              STR      r0,[r1,#0]            ;831
00020a  2002              MOVS     r0,#2                 ;832
00020c  e70f              B        |L31.46|
                  |L31.526|
00020e  e044              B        |L31.666|
                  |L31.528|
000210  4852              LDR      r0,|L31.860|
000212  3008              ADDS     r0,r0,#8              ;833
000214  6800              LDR      r0,[r0,#0]            ;833
000216  f0000010          AND      r0,r0,#0x10           ;833
00021a  b148              CBZ      r0,|L31.560|
00021c  484f              LDR      r0,|L31.860|
00021e  300c              ADDS     r0,r0,#0xc            ;835
000220  6800              LDR      r0,[r0,#0]            ;835
000222  f0400010          ORR      r0,r0,#0x10           ;835
000226  494d              LDR      r1,|L31.860|
000228  310c              ADDS     r1,r1,#0xc            ;835
00022a  6008              STR      r0,[r1,#0]            ;835
00022c  2005              MOVS     r0,#5                 ;836
00022e  e6fe              B        |L31.46|
                  |L31.560|
000230  484a              LDR      r0,|L31.860|
000232  3008              ADDS     r0,r0,#8              ;837
000234  6800              LDR      r0,[r0,#0]            ;837
000236  f4007000          AND      r0,r0,#0x200          ;837
00023a  b148              CBZ      r0,|L31.592|
00023c  4847              LDR      r0,|L31.860|
00023e  300c              ADDS     r0,r0,#0xc            ;839
000240  6800              LDR      r0,[r0,#0]            ;839
000242  f4407000          ORR      r0,r0,#0x200          ;839
000246  4945              LDR      r1,|L31.860|
000248  310c              ADDS     r1,r1,#0xc            ;839
00024a  6008              STR      r0,[r1,#0]            ;839
00024c  2007              MOVS     r0,#7                 ;840
00024e  e6ee              B        |L31.46|
                  |L31.592|
000250  4842              LDR      r0,|L31.860|
000252  3008              ADDS     r0,r0,#8              ;842
000254  6800              LDR      r0,[r0,#0]            ;842
000256  f4007080          AND      r0,r0,#0x100          ;842
00025a  b1b0              CBZ      r0,|L31.650|
00025c  4840              LDR      r0,|L31.864|
00025e  7800              LDRB     r0,[r0,#0]            ;844  ; CardType
000260  b138              CBZ      r0,|L31.626|
000262  483f              LDR      r0,|L31.864|
000264  7800              LDRB     r0,[r0,#0]            ;844  ; CardType
000266  2801              CMP      r0,#1                 ;844
000268  d003              BEQ      |L31.626|
00026a  483d              LDR      r0,|L31.864|
00026c  7800              LDRB     r0,[r0,#0]            ;844  ; CardType
00026e  2802              CMP      r0,#2                 ;844
000270  d10b              BNE      |L31.650|
                  |L31.626|
000272  2200              MOVS     r2,#0                 ;846
000274  2101              MOVS     r1,#1                 ;846
000276  200c              MOVS     r0,#0xc               ;846
000278  f7fffffe          BL       SDIO_Send_Cmd
00027c  200c              MOVS     r0,#0xc               ;847
00027e  f7fffffe          BL       CmdResp1Error
000282  4606              MOV      r6,r0                 ;847
000284  b10e              CBZ      r6,|L31.650|
000286  4630              MOV      r0,r6                 ;848
000288  e6d1              B        |L31.46|
                  |L31.650|
00028a  f7fffffe          BL       INTX_ENABLE
00028e  f24050ff          MOV      r0,#0x5ff             ;852
000292  4932              LDR      r1,|L31.860|
000294  310c              ADDS     r1,r1,#0xc            ;852
000296  6008              STR      r0,[r1,#0]            ;852
000298  e046              B        |L31.808|
                  |L31.666|
00029a  4833              LDR      r0,|L31.872|
00029c  7800              LDRB     r0,[r0,#0]            ;853  ; DeviceMode
00029e  2801              CMP      r0,#1                 ;853
0002a0  d142              BNE      |L31.808|
0002a2  2000              MOVS     r0,#0                 ;855
0002a4  4931              LDR      r1,|L31.876|
0002a6  7008              STRB     r0,[r1,#0]            ;855
0002a8  2001              MOVS     r0,#1                 ;856
0002aa  4931              LDR      r1,|L31.880|
0002ac  7008              STRB     r0,[r1,#0]            ;856
0002ae  2000              MOVS     r0,#0                 ;857
0002b0  4930              LDR      r1,|L31.884|
0002b2  7008              STRB     r0,[r1,#0]            ;857
0002b4  4829              LDR      r0,|L31.860|
0002b6  3010              ADDS     r0,r0,#0x10           ;858
0002b8  6800              LDR      r0,[r0,#0]            ;858
0002ba  f240311a          MOV      r1,#0x31a             ;858
0002be  4308              ORRS     r0,r0,r1              ;858
0002c0  4926              LDR      r1,|L31.860|
0002c2  3110              ADDS     r1,r1,#0x10           ;858
0002c4  6008              STR      r0,[r1,#0]            ;858
0002c6  fb07f104          MUL      r1,r7,r4              ;859
0002ca  2201              MOVS     r2,#1                 ;859
0002cc  9804              LDR      r0,[sp,#0x10]         ;859
0002ce  f7fffffe          BL       SD_DMA_Config
0002d2  4822              LDR      r0,|L31.860|
0002d4  6800              LDR      r0,[r0,#0]            ;860
0002d6  f0400008          ORR      r0,r0,#8              ;860
0002da  4920              LDR      r1,|L31.860|
0002dc  6008              STR      r0,[r1,#0]            ;860
0002de  f04f35ff          MOV      r5,#0xffffffff        ;861
0002e2  e000              B        |L31.742|
                  |L31.740|
0002e4  1e6d              SUBS     r5,r5,#1              ;862
                  |L31.742|
0002e6  4824              LDR      r0,|L31.888|
0002e8  6800              LDR      r0,[r0,#0]            ;862
0002ea  f0006000          AND      r0,r0,#0x8000000      ;862
0002ee  b908              CBNZ     r0,|L31.756|
0002f0  2d00              CMP      r5,#0                 ;862
0002f2  d1f7              BNE      |L31.740|
                  |L31.756|
0002f4  b91d              CBNZ     r5,|L31.766|
0002f6  f7fffffe          BL       SD_Init
0002fa  2004              MOVS     r0,#4                 ;866
0002fc  e697              B        |L31.46|
                  |L31.766|
0002fe  f04f35ff          MOV      r5,#0xffffffff        ;868
000302  e000              B        |L31.774|
                  |L31.772|
000304  1e6d              SUBS     r5,r5,#1              ;869
                  |L31.774|
000306  481b              LDR      r0,|L31.884|
000308  7800              LDRB     r0,[r0,#0]            ;869  ; TransferEnd
00030a  b920              CBNZ     r0,|L31.790|
00030c  4817              LDR      r0,|L31.876|
00030e  7800              LDRB     r0,[r0,#0]            ;869  ; TransferError
000310  b908              CBNZ     r0,|L31.790|
000312  2d00              CMP      r5,#0                 ;869
000314  d1f6              BNE      |L31.772|
                  |L31.790|
000316  b90d              CBNZ     r5,|L31.796|
000318  2004              MOVS     r0,#4                 ;870
00031a  e688              B        |L31.46|
                  |L31.796|
00031c  4813              LDR      r0,|L31.876|
00031e  7800              LDRB     r0,[r0,#0]            ;871  ; TransferError
000320  b110              CBZ      r0,|L31.808|
000322  4812              LDR      r0,|L31.876|
000324  7800              LDRB     r0,[r0,#0]            ;871  ; TransferError
000326  e682              B        |L31.46|
                  |L31.808|
000328  f24050ff          MOV      r0,#0x5ff             ;874
00032c  490b              LDR      r1,|L31.860|
00032e  310c              ADDS     r1,r1,#0xc            ;874
000330  6008              STR      r0,[r1,#0]            ;874
000332  a802              ADD      r0,sp,#8              ;875
000334  f7fffffe          BL       IsCardProgramming
000338  4606              MOV      r6,r0                 ;875
00033a  e003              B        |L31.836|
                  |L31.828|
00033c  a802              ADD      r0,sp,#8              ;878
00033e  f7fffffe          BL       IsCardProgramming
000342  4606              MOV      r6,r0                 ;878
                  |L31.836|
000344  b93e              CBNZ     r6,|L31.854|
000346  f89d0008          LDRB     r0,[sp,#8]            ;876
00034a  2807              CMP      r0,#7                 ;876
00034c  d0f6              BEQ      |L31.828|
00034e  f89d0008          LDRB     r0,[sp,#8]            ;876
000352  2806              CMP      r0,#6                 ;876
000354  d0f2              BEQ      |L31.828|
                  |L31.854|
000356  4630              MOV      r0,r6                 ;880
000358  e669              B        |L31.46|
;;;882    //SDIO中断服务函数		  
                          ENDP

00035a  0000              DCW      0x0000
                  |L31.860|
                          DCD      0x40012c2c
                  |L31.864|
                          DCD      CardType
                  |L31.868|
                          DCD      ||RCA||
                  |L31.872|
                          DCD      DeviceMode
                  |L31.876|
                          DCD      TransferError
                  |L31.880|
                          DCD      StopCondition
                  |L31.884|
                          DCD      TransferEnd
                  |L31.888|
                          DCD      0x40026400

                          AREA ||i.convert_from_bytes_to_power_of_two||, CODE, READONLY, ALIGN=1

                  convert_from_bytes_to_power_of_two PROC
;;;1220   //返回值:以2为底的指数值
;;;1221   u8 convert_from_bytes_to_power_of_two(u16 NumberOfBytes)
000000  4601              MOV      r1,r0
;;;1222   {
;;;1223   	u8 count=0;
000002  2000              MOVS     r0,#0
;;;1224   	while(NumberOfBytes!=1)
000004  e002              B        |L32.12|
                  |L32.6|
;;;1225   	{
;;;1226   		NumberOfBytes>>=1;
000006  1049              ASRS     r1,r1,#1
;;;1227   		count++;
000008  1c42              ADDS     r2,r0,#1
00000a  b2d0              UXTB     r0,r2
                  |L32.12|
00000c  2901              CMP      r1,#1                 ;1224
00000e  d1fa              BNE      |L32.6|
;;;1228   	}
;;;1229   	return count;
;;;1230   } 	 
000010  4770              BX       lr
;;;1231   //配置SDIO DMA  
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  CSD_Tab
                          %        16
                  CID_Tab
                          %        16
                  SDCardInfo
                          %        88
                  SDIO_DATA_BUFFER
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  CardType
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  ||RCA||
                          DCD      0x00000000
                  DeviceMode
000008  01                DCB      0x01
                  StopCondition
000009  00                DCB      0x00
                  TransferError
00000a  00                DCB      0x00
                  TransferEnd
00000b  00                DCB      0x00
                  tempbuff
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "USER\\sdio_sdcard.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_sdio_sdcard_c_4ab284f9____REV16|
#line 388 ".\\CMSIS\\cmsis_armcc.h"
|__asm___13_sdio_sdcard_c_4ab284f9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_sdio_sdcard_c_4ab284f9____REVSH|
#line 402
|__asm___13_sdio_sdcard_c_4ab284f9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_sdio_sdcard_c_4ab284f9____RRX|
#line 587
|__asm___13_sdio_sdcard_c_4ab284f9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
