; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\can.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\can.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\STM_Lib\inc -I.\USER -I.\CMSIS -I.\BoardHardware -I.\FATFS\src -I.\FATFS\exfuns -I.\MALLOC -I.\RTE\_407 -Ie:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Ie:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\can.crf USER\can.c]
                          THUMB

                          AREA ||i.CAN1_Config||, CODE, READONLY, ALIGN=2

                  CAN1_Config PROC
;;;119    } 
;;;120    void CAN1_Config(void)
000000  b500              PUSH     {lr}
;;;121       {
000002  b08b              SUB      sp,sp,#0x2c
;;;122        GPIO_InitTypeDef GPIO_InitStructure;
;;;123        CAN_InitTypeDef        CAN_InitStructure;
;;;124        CAN_FilterInitTypeDef  CAN_FilterInitStructure;
;;;125    	NVIC_InitTypeDef NVIC_InitStructure;
;;;126    
;;;127        /* ��GPIOʱ�ӡ�AFIOʱ�ӣ�CANʱ�� */
;;;128    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;129          RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0648              LSLS     r0,r1,#25
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;130     
;;;131    
;;;132    	/* CAN2 TX PB13 */
;;;133    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_11;
000014  f44f50c0          MOV      r0,#0x1800
000018  9009              STR      r0,[sp,#0x24]
;;;134    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00001a  2002              MOVS     r0,#2
00001c  f88d0028          STRB     r0,[sp,#0x28]
;;;135    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000020  f88d0029          STRB     r0,[sp,#0x29]
;;;136       GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000024  2001              MOVS     r0,#1
000026  f88d002b          STRB     r0,[sp,#0x2b]
;;;137       GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2000              MOVS     r0,#0
00002c  f88d002a          STRB     r0,[sp,#0x2a]
;;;138    	GPIO_Init(GPIOA, &GPIO_InitStructure);								
000030  a909              ADD      r1,sp,#0x24
000032  482f              LDR      r0,|L1.240|
000034  f7fffffe          BL       GPIO_Init
;;;139    
;;;140        GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_CAN1);
000038  2209              MOVS     r2,#9
00003a  210b              MOVS     r1,#0xb
00003c  482c              LDR      r0,|L1.240|
00003e  f7fffffe          BL       GPIO_PinAFConfig
;;;141        GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_CAN1);
000042  2209              MOVS     r2,#9
000044  210c              MOVS     r1,#0xc
000046  482a              LDR      r0,|L1.240|
000048  f7fffffe          BL       GPIO_PinAFConfig
;;;142        /* CAN  BaudRate = RCC_APB1PeriphClock/(CAN_SJW+CAN_BS1+CAN_BS2)/CAN_Prescaler */
;;;143        CAN_InitStructure.CAN_TTCM=DISABLE;
00004c  2000              MOVS     r0,#0
00004e  f88d001e          STRB     r0,[sp,#0x1e]
;;;144        CAN_InitStructure.CAN_ABOM=ENABLE;
000052  2001              MOVS     r0,#1
000054  f88d001f          STRB     r0,[sp,#0x1f]
;;;145        CAN_InitStructure.CAN_AWUM=DISABLE;
000058  2000              MOVS     r0,#0
00005a  f88d0020          STRB     r0,[sp,#0x20]
;;;146        CAN_InitStructure.CAN_NART=ENABLE;
00005e  2001              MOVS     r0,#1
000060  f88d0021          STRB     r0,[sp,#0x21]
;;;147        CAN_InitStructure.CAN_RFLM=DISABLE;
000064  2000              MOVS     r0,#0
000066  f88d0022          STRB     r0,[sp,#0x22]
;;;148        CAN_InitStructure.CAN_TXFP=DISABLE;
00006a  f88d0023          STRB     r0,[sp,#0x23]
;;;149        CAN_InitStructure.CAN_Mode=CAN_Mode_Normal;   
00006e  f88d001a          STRB     r0,[sp,#0x1a]
;;;150        //CAN_InitStructure.CAN_Mode=CAN_Mode_LoopBack;
;;;151        CAN_InitStructure.CAN_SJW=0;
000072  f88d001b          STRB     r0,[sp,#0x1b]
;;;152        CAN_InitStructure.CAN_BS1=6;  
000076  2006              MOVS     r0,#6
000078  f88d001c          STRB     r0,[sp,#0x1c]
;;;153        CAN_InitStructure.CAN_BS2=5;
00007c  2005              MOVS     r0,#5
00007e  f88d001d          STRB     r0,[sp,#0x1d]
;;;154         CAN_InitStructure.CAN_Prescaler=6;
000082  2006              MOVS     r0,#6
000084  f8ad0018          STRH     r0,[sp,#0x18]
;;;155        //if(baudrate == 500000)
;;;156          //CAN_InitStructure.CAN_Prescaler=3;
;;;157       //else if(baudrate == 250000)
;;;158         // CAN_InitStructure.CAN_Prescaler=16;
;;;159       // else if(baudrate == 125000)
;;;160        //  CAN_InitStructure.CAN_Prescaler=32;
;;;161        CAN_Init(CAN1,&CAN_InitStructure);   // CAN2													
000088  a906              ADD      r1,sp,#0x18
00008a  481a              LDR      r0,|L1.244|
00008c  f7fffffe          BL       CAN_Init
;;;162    
;;;163        CAN_FilterInitStructure.CAN_FilterNumber=13;	// 
000090  200d              MOVS     r0,#0xd
000092  f88d0012          STRB     r0,[sp,#0x12]
;;;164        CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdMask;	 // ��ʶ������λģʽ
000096  2000              MOVS     r0,#0
000098  f88d0013          STRB     r0,[sp,#0x13]
;;;165        CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_32bit;   // 32λ������
00009c  2001              MOVS     r0,#1
00009e  f88d0014          STRB     r0,[sp,#0x14]
;;;166        CAN_FilterInitStructure.CAN_FilterIdHigh=0x0000;			// ��������ʶ��
0000a2  2000              MOVS     r0,#0
0000a4  f8ad0008          STRH     r0,[sp,#8]
;;;167        CAN_FilterInitStructure.CAN_FilterIdLow=0x0000;				
0000a8  f8ad000a          STRH     r0,[sp,#0xa]
;;;168        CAN_FilterInitStructure.CAN_FilterMaskIdHigh=0x0000;		// ���������α�ʶ��
0000ac  f8ad000c          STRH     r0,[sp,#0xc]
;;;169        CAN_FilterInitStructure.CAN_FilterMaskIdLow=0x0000;
0000b0  f8ad000e          STRH     r0,[sp,#0xe]
;;;170        CAN_FilterInitStructure.CAN_FilterFIFOAssignment=CAN_FIFO0;	 // FIFO1ָ�������
0000b4  f8ad0010          STRH     r0,[sp,#0x10]
;;;171        CAN_FilterInitStructure.CAN_FilterActivation=ENABLE;
0000b8  2001              MOVS     r0,#1
0000ba  f88d0015          STRB     r0,[sp,#0x15]
;;;172        CAN_FilterInit(&CAN_FilterInitStructure);
0000be  a802              ADD      r0,sp,#8
0000c0  f7fffffe          BL       CAN_FilterInit
;;;173    
;;;174    	CAN_ITConfig(CAN1,CAN_IT_FMP0,ENABLE);  // CAN2
0000c4  2201              MOVS     r2,#1
0000c6  2102              MOVS     r1,#2
0000c8  480a              LDR      r0,|L1.244|
0000ca  f7fffffe          BL       CAN_ITConfig
;;;175    	/* CAN2 Enabling interrupt */								 	  
;;;176        NVIC_InitStructure.NVIC_IRQChannel=CAN1_RX0_IRQn;	// FIFO_1
0000ce  2014              MOVS     r0,#0x14
0000d0  f88d0004          STRB     r0,[sp,#4]
;;;177        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
0000d4  2001              MOVS     r0,#1
0000d6  f88d0005          STRB     r0,[sp,#5]
;;;178        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
0000da  2000              MOVS     r0,#0
0000dc  f88d0006          STRB     r0,[sp,#6]
;;;179        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0000e0  2001              MOVS     r0,#1
0000e2  f88d0007          STRB     r0,[sp,#7]
;;;180        NVIC_Init(&NVIC_InitStructure);		
0000e6  a801              ADD      r0,sp,#4
0000e8  f7fffffe          BL       NVIC_Init
;;;181       }
0000ec  b00b              ADD      sp,sp,#0x2c
0000ee  bd00              POP      {pc}
;;;182    
                          ENDP

                  |L1.240|
                          DCD      0x40020000
                  |L1.244|
                          DCD      0x40006400

                          AREA ||i.CAN1_Receive_Msg||, CODE, READONLY, ALIGN=2

                  CAN1_Receive_Msg PROC
;;;430    }
;;;431    u8 CAN1_Receive_Msg(u8 *buf)
000000  b570              PUSH     {r4-r6,lr}
;;;432    {		   		   
000002  4605              MOV      r5,r0
;;;433     	u32 i;
;;;434        if( CAN_MessagePending(CAN1,CAN_FIFO0)==0)return 0;		//û�н��յ�����,ֱ���˳� 
000004  2100              MOVS     r1,#0
000006  480c              LDR      r0,|L2.56|
000008  f7fffffe          BL       CAN_MessagePending
00000c  b908              CBNZ     r0,|L2.18|
00000e  2000              MOVS     r0,#0
                  |L2.16|
;;;435        CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);//��ȡ����	
;;;436              for(i=0;i<RxMessage.DLC;i++)
;;;437              buf[i]=RxMessage.Data[i];  
;;;438    	return RxMessage.DLC;	
;;;439    }
000010  bd70              POP      {r4-r6,pc}
                  |L2.18|
000012  4a0a              LDR      r2,|L2.60|
000014  2100              MOVS     r1,#0                 ;435
000016  4808              LDR      r0,|L2.56|
000018  f7fffffe          BL       CAN_Receive
00001c  2400              MOVS     r4,#0                 ;436
00001e  e004              B        |L2.42|
                  |L2.32|
000020  4806              LDR      r0,|L2.60|
000022  300b              ADDS     r0,r0,#0xb            ;437
000024  5d00              LDRB     r0,[r0,r4]            ;437
000026  5528              STRB     r0,[r5,r4]            ;437
000028  1c64              ADDS     r4,r4,#1              ;436
                  |L2.42|
00002a  4804              LDR      r0,|L2.60|
00002c  7a80              LDRB     r0,[r0,#0xa]          ;436  ; RxMessage
00002e  42a0              CMP      r0,r4                 ;436
000030  d8f6              BHI      |L2.32|
000032  4802              LDR      r0,|L2.60|
000034  7a80              LDRB     r0,[r0,#0xa]          ;438  ; RxMessage
000036  e7eb              B        |L2.16|
;;;440    u8 CAN2_Receive_Msg(u8 *buf)
                          ENDP

                  |L2.56|
                          DCD      0x40006400
                  |L2.60|
                          DCD      RxMessage

                          AREA ||i.CAN1_Send_Msg||, CODE, READONLY, ALIGN=2

                  CAN1_Send_Msg PROC
;;;404    }
;;;405    u8 CAN1_Send_Msg(u32 can_message_id, u8* msg)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;406    {	
000004  b086              SUB      sp,sp,#0x18
000006  4605              MOV      r5,r0
000008  460f              MOV      r7,r1
;;;407      u8 mbox, CAN_transmit_message_number;
;;;408      u16 i=0;
00000a  2400              MOVS     r4,#0
;;;409      uint8_t requested;
;;;410      CanTxMsg TxMessage;
;;;411      can_message_id1 = can_message_id;
00000c  481e              LDR      r0,|L3.136|
00000e  6005              STR      r5,[r0,#0]  ; can_message_id1
;;;412      requested = 0;
000010  46a0              MOV      r8,r4
;;;413      if ( can_message_id == 0xf5070000)
000012  481e              LDR      r0,|L3.140|
000014  4285              CMP      r5,r0
000016  d101              BNE      |L3.28|
;;;414       can_message_id = 0x7f5;
000018  f24075f5          MOV      r5,#0x7f5
                  |L3.28|
;;;415      requested = 1;
00001c  2001              MOVS     r0,#1
00001e  4680              MOV      r8,r0
;;;416      if( requested == 1)
000020  f1b80f00          CMP      r8,#0
000024  d02e              BEQ      |L3.132|
;;;417      {
;;;418         TxMessage.StdId= can_message_id;	 // ��׼��ʶ��Ϊ0
000026  9501              STR      r5,[sp,#4]
;;;419         TxMessage.IDE=0;		  // ʹ����չ��ʶ��
000028  2000              MOVS     r0,#0
00002a  f88d000c          STRB     r0,[sp,#0xc]
;;;420         TxMessage.RTR=0;		  // ��Ϣ����Ϊ����֡��һ֡8λ
00002e  f88d000d          STRB     r0,[sp,#0xd]
;;;421         TxMessage.DLC=8;							 // ������֡��Ϣ
000032  2008              MOVS     r0,#8
000034  f88d000e          STRB     r0,[sp,#0xe]
;;;422         for(i=0;i<8;i++)
000038  2400              MOVS     r4,#0
00003a  e005              B        |L3.72|
                  |L3.60|
;;;423         TxMessage.Data[i]=msg[i];				 // ��һ֡��Ϣ          
00003c  5d39              LDRB     r1,[r7,r4]
00003e  f10d000f          ADD      r0,sp,#0xf
000042  5501              STRB     r1,[r0,r4]
000044  1c60              ADDS     r0,r4,#1              ;422
000046  b284              UXTH     r4,r0                 ;422
                  |L3.72|
000048  2c08              CMP      r4,#8                 ;422
00004a  dbf7              BLT      |L3.60|
;;;424         mbox= CAN_Transmit(CAN1, &TxMessage);   
00004c  a901              ADD      r1,sp,#4
00004e  4810              LDR      r0,|L3.144|
000050  f7fffffe          BL       CAN_Transmit
000054  4606              MOV      r6,r0
;;;425         i=0;
000056  2400              MOVS     r4,#0
;;;426         while((CAN_TransmitStatus(CAN1, mbox)==CAN_TxStatus_Failed)&&(i<0XFFF))i++;	//�ȴ����ͽ���
000058  e001              B        |L3.94|
                  |L3.90|
00005a  1c60              ADDS     r0,r4,#1
00005c  b284              UXTH     r4,r0
                  |L3.94|
00005e  4631              MOV      r1,r6
000060  480b              LDR      r0,|L3.144|
000062  f7fffffe          BL       CAN_TransmitStatus
000066  b918              CBNZ     r0,|L3.112|
000068  f64070ff          MOV      r0,#0xfff
00006c  4284              CMP      r4,r0
00006e  dbf4              BLT      |L3.90|
                  |L3.112|
;;;427         if(i>=0XFFF)return 1;
000070  f64070ff          MOV      r0,#0xfff
000074  4284              CMP      r4,r0
000076  db03              BLT      |L3.128|
000078  2001              MOVS     r0,#1
                  |L3.122|
;;;428         return 0;		
;;;429       }
;;;430    }
00007a  b006              ADD      sp,sp,#0x18
00007c  e8bd81f0          POP      {r4-r8,pc}
                  |L3.128|
000080  2000              MOVS     r0,#0                 ;428
000082  e7fa              B        |L3.122|
                  |L3.132|
000084  bf00              NOP      
000086  e7f8              B        |L3.122|
;;;431    u8 CAN1_Receive_Msg(u8 *buf)
                          ENDP

                  |L3.136|
                          DCD      can_message_id1
                  |L3.140|
                          DCD      0xf5070000
                  |L3.144|
                          DCD      0x40006400

                          AREA ||i.CAN2_Config||, CODE, READONLY, ALIGN=2

                  CAN2_Config PROC
;;;182    
;;;183    void CAN2_Config(void)
000000  b500              PUSH     {lr}
;;;184    {
000002  b08b              SUB      sp,sp,#0x2c
;;;185        GPIO_InitTypeDef GPIO_InitStructure;
;;;186        CAN_InitTypeDef        CAN_InitStructure;
;;;187        CAN_FilterInitTypeDef  CAN_FilterInitStructure;
;;;188    	NVIC_InitTypeDef NVIC_InitStructure;
;;;189    
;;;190        /* ��GPIOʱ�ӡ�AFIOʱ�ӣ�CANʱ�� */
;;;191    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;192    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0688              LSLS     r0,r1,#26
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;193    
;;;194    	/* CAN2 RX PB12 */
;;;195    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
000014  2020              MOVS     r0,#0x20
000016  9009              STR      r0,[sp,#0x24]
;;;196    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000018  2002              MOVS     r0,#2
00001a  f88d0028          STRB     r0,[sp,#0x28]
;;;197    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001e  f88d0029          STRB     r0,[sp,#0x29]
;;;198       GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000022  2001              MOVS     r0,#1
000024  f88d002b          STRB     r0,[sp,#0x2b]
;;;199    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000028  a909              ADD      r1,sp,#0x24
00002a  4838              LDR      r0,|L4.268|
00002c  f7fffffe          BL       GPIO_Init
;;;200    	/* CAN2 TX PB13 */
;;;201    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
000030  2040              MOVS     r0,#0x40
000032  9009              STR      r0,[sp,#0x24]
;;;202    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000034  2002              MOVS     r0,#2
000036  f88d0028          STRB     r0,[sp,#0x28]
;;;203    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003a  f88d0029          STRB     r0,[sp,#0x29]
;;;204       GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
00003e  2001              MOVS     r0,#1
000040  f88d002b          STRB     r0,[sp,#0x2b]
;;;205    	GPIO_Init(GPIOB, &GPIO_InitStructure);								
000044  a909              ADD      r1,sp,#0x24
000046  4831              LDR      r0,|L4.268|
000048  f7fffffe          BL       GPIO_Init
;;;206        GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_CAN2);
00004c  2209              MOVS     r2,#9
00004e  2105              MOVS     r1,#5
000050  482e              LDR      r0,|L4.268|
000052  f7fffffe          BL       GPIO_PinAFConfig
;;;207        GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_CAN2); 
000056  2209              MOVS     r2,#9
000058  2106              MOVS     r1,#6
00005a  482c              LDR      r0,|L4.268|
00005c  f7fffffe          BL       GPIO_PinAFConfig
;;;208    
;;;209    	/* CAN2 Enabling interrupt */								 	  
;;;210        NVIC_InitStructure.NVIC_IRQChannel=CAN2_RX1_IRQn;	// FIFO_1
000060  2041              MOVS     r0,#0x41
000062  f88d0004          STRB     r0,[sp,#4]
;;;211        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000066  2000              MOVS     r0,#0
000068  f88d0005          STRB     r0,[sp,#5]
;;;212        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
00006c  2001              MOVS     r0,#1
00006e  f88d0006          STRB     r0,[sp,#6]
;;;213        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000072  f88d0007          STRB     r0,[sp,#7]
;;;214        NVIC_Init(&NVIC_InitStructure);								  	
000076  a801              ADD      r0,sp,#4
000078  f7fffffe          BL       NVIC_Init
;;;215    
;;;216        /* CAN  BaudRate = RCC_APB1PeriphClock/(CAN_SJW+CAN_BS1+CAN_BS2)/CAN_Prescaler */
;;;217    	CAN_DeInit(CAN2);
00007c  4824              LDR      r0,|L4.272|
00007e  f7fffffe          BL       CAN_DeInit
;;;218        CAN_StructInit(&CAN_InitStructure);   
000082  a806              ADD      r0,sp,#0x18
000084  f7fffffe          BL       CAN_StructInit
;;;219    
;;;220        CAN_InitStructure.CAN_TTCM=DISABLE;
000088  2000              MOVS     r0,#0
00008a  f88d001e          STRB     r0,[sp,#0x1e]
;;;221        CAN_InitStructure.CAN_ABOM=ENABLE;
00008e  2001              MOVS     r0,#1
000090  f88d001f          STRB     r0,[sp,#0x1f]
;;;222        CAN_InitStructure.CAN_AWUM=DISABLE;
000094  2000              MOVS     r0,#0
000096  f88d0020          STRB     r0,[sp,#0x20]
;;;223        CAN_InitStructure.CAN_NART=DISABLE;
00009a  f88d0021          STRB     r0,[sp,#0x21]
;;;224        CAN_InitStructure.CAN_RFLM=DISABLE;
00009e  f88d0022          STRB     r0,[sp,#0x22]
;;;225        CAN_InitStructure.CAN_TXFP=DISABLE;
0000a2  f88d0023          STRB     r0,[sp,#0x23]
;;;226        CAN_InitStructure.CAN_Mode=CAN_Mode_Normal;   
0000a6  f88d001a          STRB     r0,[sp,#0x1a]
;;;227        //CAN_InitStructure.CAN_Mode=CAN_Mode_LoopBack;
;;;228        CAN_InitStructure.CAN_SJW=0;
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
;;;229        CAN_InitStructure.CAN_BS1=6;  
0000ae  2006              MOVS     r0,#6
0000b0  f88d001c          STRB     r0,[sp,#0x1c]
;;;230        CAN_InitStructure.CAN_BS2=5;
0000b4  2005              MOVS     r0,#5
0000b6  f88d001d          STRB     r0,[sp,#0x1d]
;;;231         CAN_InitStructure.CAN_Prescaler=6;
0000ba  2006              MOVS     r0,#6
0000bc  f8ad0018          STRH     r0,[sp,#0x18]
;;;232        //if(baudrate == 500000)
;;;233          //CAN_InitStructure.CAN_Prescaler=3;
;;;234       //else if(baudrate == 250000)
;;;235         // CAN_InitStructure.CAN_Prescaler=16;
;;;236       // else if(baudrate == 125000)
;;;237        //  CAN_InitStructure.CAN_Prescaler=32;
;;;238        CAN_Init(CAN2,&CAN_InitStructure);   // CAN2													
0000c0  a906              ADD      r1,sp,#0x18
0000c2  4813              LDR      r0,|L4.272|
0000c4  f7fffffe          BL       CAN_Init
;;;239    
;;;240        CAN_FilterInitStructure.CAN_FilterNumber=14;	// 
0000c8  200e              MOVS     r0,#0xe
0000ca  f88d0012          STRB     r0,[sp,#0x12]
;;;241        CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdMask;	 // ��ʶ������λģʽ
0000ce  2000              MOVS     r0,#0
0000d0  f88d0013          STRB     r0,[sp,#0x13]
;;;242        CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_32bit;   // 32λ������
0000d4  2001              MOVS     r0,#1
0000d6  f88d0014          STRB     r0,[sp,#0x14]
;;;243        CAN_FilterInitStructure.CAN_FilterIdHigh=0x0000;			// ��������ʶ��
0000da  2000              MOVS     r0,#0
0000dc  f8ad0008          STRH     r0,[sp,#8]
;;;244        CAN_FilterInitStructure.CAN_FilterIdLow=0x0000;				
0000e0  f8ad000a          STRH     r0,[sp,#0xa]
;;;245        CAN_FilterInitStructure.CAN_FilterMaskIdHigh=0x0000;		// ���������α�ʶ��
0000e4  f8ad000c          STRH     r0,[sp,#0xc]
;;;246        CAN_FilterInitStructure.CAN_FilterMaskIdLow=0x0000;
0000e8  f8ad000e          STRH     r0,[sp,#0xe]
;;;247        CAN_FilterInitStructure.CAN_FilterFIFOAssignment=CAN_FIFO1;	 // FIFO1ָ�������
0000ec  2001              MOVS     r0,#1
0000ee  f8ad0010          STRH     r0,[sp,#0x10]
;;;248        CAN_FilterInitStructure.CAN_FilterActivation=ENABLE;
0000f2  f88d0015          STRB     r0,[sp,#0x15]
;;;249        CAN_FilterInit(&CAN_FilterInitStructure);
0000f6  a802              ADD      r0,sp,#8
0000f8  f7fffffe          BL       CAN_FilterInit
;;;250    
;;;251    	CAN_ITConfig(CAN2,CAN_IT_FMP1,ENABLE);  // CAN2
0000fc  2201              MOVS     r2,#1
0000fe  2110              MOVS     r1,#0x10
000100  4803              LDR      r0,|L4.272|
000102  f7fffffe          BL       CAN_ITConfig
;;;252    }
000106  b00b              ADD      sp,sp,#0x2c
000108  bd00              POP      {pc}
;;;253    void CAN_SendData(CAN_TypeDef* CANx,CanTxMsg* CanData)
                          ENDP

00010a  0000              DCW      0x0000
                  |L4.268|
                          DCD      0x40020400
                  |L4.272|
                          DCD      0x40006800

                          AREA ||i.CAN2_Mode_Init||, CODE, READONLY, ALIGN=2

                  CAN2_Mode_Init PROC
;;;53     #endif
;;;54     u8 CAN2_Mode_Init(u8 tsjw,u8 tbs2,u8 tbs1,u16 brp,u8 mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;55     {
000004  b08a              SUB      sp,sp,#0x28
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  f8dd8040          LDR      r8,[sp,#0x40]
;;;56     
;;;57       	GPIO_InitTypeDef GPIO_InitStructure; 
;;;58     	  CAN_InitTypeDef        CAN_InitStructure;
;;;59       	CAN_FilterInitTypeDef  CAN_FilterInitStructure;
;;;60     #if CAN2_RX0_INT_ENABLE 
;;;61        	NVIC_InitTypeDef  NVIC_InitStructure;
;;;62     #endif
;;;63         //Ê¹ÄÜÏà¹ØÊ±ÖÓ
;;;64     	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);//Ê¹ÄÜPORTAÊ±ÖÓ	                   											 
000012  2101              MOVS     r1,#1
000014  2002              MOVS     r0,#2
000016  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;65     
;;;66       	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1|RCC_APB1Periph_CAN2, ENABLE); //Ê¹ÓÃCAN2µÄÊ±ºòÒ²ÒªÊ¹ÄÜCAN1Ê±ÖÓ	
00001a  2101              MOVS     r1,#1
00001c  f04f60c0          MOV      r0,#0x6000000
000020  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;67     	
;;;68         //³õÊ¼»¯GPIO
;;;69     	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12| GPIO_Pin_13;
000024  f44f5040          MOV      r0,#0x3000
000028  9008              STR      r0,[sp,#0x20]
;;;70         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//¸´ÓÃ¹¦ÄÜ
00002a  2002              MOVS     r0,#2
00002c  f88d0024          STRB     r0,[sp,#0x24]
;;;71         GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//ÍÆÍìÊä³ö
000030  2000              MOVS     r0,#0
000032  f88d0026          STRB     r0,[sp,#0x26]
;;;72         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
000036  2003              MOVS     r0,#3
000038  f88d0025          STRB     r0,[sp,#0x25]
;;;73         GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//ÉÏÀ­
00003c  2001              MOVS     r0,#1
00003e  f88d0027          STRB     r0,[sp,#0x27]
;;;74         GPIO_Init(GPIOB, &GPIO_InitStructure);//³õÊ¼»¯PA11,PA12
000042  a908              ADD      r1,sp,#0x20
000044  4823              LDR      r0,|L5.212|
000046  f7fffffe          BL       GPIO_Init
;;;75     	
;;;76     	  //Òý½Å¸´ÓÃÓ³ÉäÅäÖÃ
;;;77     	  GPIO_PinAFConfig(GPIOB,GPIO_PinSource12,GPIO_AF_CAN2); //GPIOA11¸´ÓÃÎªCAN1
00004a  2209              MOVS     r2,#9
00004c  210c              MOVS     r1,#0xc
00004e  4821              LDR      r0,|L5.212|
000050  f7fffffe          BL       GPIO_PinAFConfig
;;;78     	  GPIO_PinAFConfig(GPIOB,GPIO_PinSource13,GPIO_AF_CAN2); //GPIOA12¸´ÓÃÎªCAN1
000054  2209              MOVS     r2,#9
000056  210d              MOVS     r1,#0xd
000058  481e              LDR      r0,|L5.212|
00005a  f7fffffe          BL       GPIO_PinAFConfig
;;;79     	  
;;;80     //			CAN_DeInit(CAN2);
;;;81     //			CAN_StructInit(&CAN_InitStructure);
;;;82       	//CANµ¥ÔªÉèÖÃ
;;;83        	CAN_InitStructure.CAN_TTCM=DISABLE;	//·ÇÊ±¼ä´¥·¢Í¨ÐÅÄ£Ê½   
00005e  2000              MOVS     r0,#0
000060  f88d001a          STRB     r0,[sp,#0x1a]
;;;84       	CAN_InitStructure.CAN_ABOM=DISABLE;	//Èí¼þ×Ô¶¯ÀëÏß¹ÜÀí	  
000064  f88d001b          STRB     r0,[sp,#0x1b]
;;;85       	CAN_InitStructure.CAN_AWUM=DISABLE;//Ë¯ÃßÄ£Ê½Í¨¹ýÈí¼þ»½ÐÑ(Çå³ýCAN->MCRµÄSLEEPÎ»)
000068  f88d001c          STRB     r0,[sp,#0x1c]
;;;86       	CAN_InitStructure.CAN_NART=ENABLE;	//½ûÖ¹±¨ÎÄ×Ô¶¯´«ËÍ 
00006c  2001              MOVS     r0,#1
00006e  f88d001d          STRB     r0,[sp,#0x1d]
;;;87       	CAN_InitStructure.CAN_RFLM=DISABLE;	//±¨ÎÄ²»Ëø¶¨,ÐÂµÄ¸²¸Ç¾ÉµÄ  
000072  2000              MOVS     r0,#0
000074  f88d001e          STRB     r0,[sp,#0x1e]
;;;88       	CAN_InitStructure.CAN_TXFP=DISABLE;	//ÓÅÏÈ¼¶ÓÉ±¨ÎÄ±êÊ¶·û¾ö¶¨ 
000078  f88d001f          STRB     r0,[sp,#0x1f]
;;;89       	CAN_InitStructure.CAN_Mode= mode;	 //Ä£Ê½ÉèÖÃ 
00007c  f88d8016          STRB     r8,[sp,#0x16]
;;;90       	CAN_InitStructure.CAN_SJW=tsjw;	//ÖØÐÂÍ¬²½ÌøÔ¾¿í¶È(Tsjw)Îªtsjw+1¸öÊ±¼äµ¥Î» CAN_SJW_1tq~CAN_SJW_4tq
000080  f88d4017          STRB     r4,[sp,#0x17]
;;;91       	CAN_InitStructure.CAN_BS1=tbs1; //Tbs1·¶Î§CAN_BS1_1tq ~CAN_BS1_16tq
000084  f88d6018          STRB     r6,[sp,#0x18]
;;;92       	CAN_InitStructure.CAN_BS2=tbs2;//Tbs2·¶Î§CAN_BS2_1tq ~	CAN_BS2_8tq
000088  f88d5019          STRB     r5,[sp,#0x19]
;;;93       	CAN_InitStructure.CAN_Prescaler=brp;  //·ÖÆµÏµÊý(Fdiv)Îªbrp+1	
00008c  f8ad7014          STRH     r7,[sp,#0x14]
;;;94       	CAN_Init(CAN2, &CAN_InitStructure);   // ³õÊ¼»¯CAN1 
000090  a905              ADD      r1,sp,#0x14
000092  4811              LDR      r0,|L5.216|
000094  f7fffffe          BL       CAN_Init
;;;95         
;;;96     		//ÅäÖÃ¹ýÂËÆ÷
;;;97      	  CAN_FilterInitStructure.CAN_FilterNumber=14;	  //¹ýÂËÆ÷0
000098  200e              MOVS     r0,#0xe
00009a  f88d000e          STRB     r0,[sp,#0xe]
;;;98       	CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdMask; 
00009e  2000              MOVS     r0,#0
0000a0  f88d000f          STRB     r0,[sp,#0xf]
;;;99       	CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_32bit; //32Î» 
0000a4  2001              MOVS     r0,#1
0000a6  f88d0010          STRB     r0,[sp,#0x10]
;;;100      	CAN_FilterInitStructure.CAN_FilterIdHigh=0x0000;////32Î»ID
0000aa  2000              MOVS     r0,#0
0000ac  f8ad0004          STRH     r0,[sp,#4]
;;;101      	CAN_FilterInitStructure.CAN_FilterIdLow=0x0000;
0000b0  f8ad0006          STRH     r0,[sp,#6]
;;;102      	CAN_FilterInitStructure.CAN_FilterMaskIdHigh=0x0000;//32Î»MASK
0000b4  f8ad0008          STRH     r0,[sp,#8]
;;;103      	CAN_FilterInitStructure.CAN_FilterMaskIdLow=0x0000;
0000b8  f8ad000a          STRH     r0,[sp,#0xa]
;;;104       	CAN_FilterInitStructure.CAN_FilterFIFOAssignment=CAN_Filter_FIFO0;//¹ýÂËÆ÷0¹ØÁªµ½FIFO0
0000bc  f8ad000c          STRH     r0,[sp,#0xc]
;;;105      	CAN_FilterInitStructure.CAN_FilterActivation=ENABLE; //¼¤»î¹ýÂËÆ÷0
0000c0  2001              MOVS     r0,#1
0000c2  f88d0011          STRB     r0,[sp,#0x11]
;;;106      	CAN_FilterInit(&CAN_FilterInitStructure);//ÂË²¨Æ÷³õÊ¼»¯
0000c6  a801              ADD      r0,sp,#4
0000c8  f7fffffe          BL       CAN_FilterInit
;;;107    		
;;;108    #if true
;;;109    	
;;;110    	  CAN_ITConfig(CAN2,CAN_IT_FMP0,ENABLE);//FIFO0ÏûÏ¢¹ÒºÅÖÐ¶ÏÔÊÐí.		    
;;;111      
;;;112      	NVIC_InitStructure.NVIC_IRQChannel = CAN2_RX0_IRQn;
;;;113      	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;     // Ö÷ÓÅÏÈ¼¶Îª1
;;;114      	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;            // ´ÎÓÅÏÈ¼¶Îª0
;;;115      	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;116      	NVIC_Init(&NVIC_InitStructure);
;;;117    #endif
;;;118    	return 0;
0000cc  2000              MOVS     r0,#0
;;;119    } 
0000ce  b00a              ADD      sp,sp,#0x28
0000d0  e8bd81f0          POP      {r4-r8,pc}
;;;120    void CAN1_Config(void)
                          ENDP

                  |L5.212|
                          DCD      0x40020400
                  |L5.216|
                          DCD      0x40006800

                          AREA ||i.CAN2_Receive_Msg||, CODE, READONLY, ALIGN=2

                  CAN2_Receive_Msg PROC
;;;439    }
;;;440    u8 CAN2_Receive_Msg(u8 *buf)
000000  b570              PUSH     {r4-r6,lr}
;;;441    {		   		   
000002  4605              MOV      r5,r0
;;;442     	u32 i;
;;;443        if( CAN_MessagePending(CAN2,CAN_FIFO0)==0)return 0;		//û�н��յ�����,ֱ���˳� 
000004  2100              MOVS     r1,#0
000006  480c              LDR      r0,|L6.56|
000008  f7fffffe          BL       CAN_MessagePending
00000c  b908              CBNZ     r0,|L6.18|
00000e  2000              MOVS     r0,#0
                  |L6.16|
;;;444        CAN_Receive(CAN2, CAN_FIFO0, &RxMessage);//��ȡ����	
;;;445              for(i=0;i<RxMessage.DLC;i++)
;;;446              buf[i]=RxMessage.Data[i];  
;;;447    	return RxMessage.DLC;	
;;;448    }
000010  bd70              POP      {r4-r6,pc}
                  |L6.18|
000012  4a0a              LDR      r2,|L6.60|
000014  2100              MOVS     r1,#0                 ;444
000016  4808              LDR      r0,|L6.56|
000018  f7fffffe          BL       CAN_Receive
00001c  2400              MOVS     r4,#0                 ;445
00001e  e004              B        |L6.42|
                  |L6.32|
000020  4806              LDR      r0,|L6.60|
000022  300b              ADDS     r0,r0,#0xb            ;446
000024  5d00              LDRB     r0,[r0,r4]            ;446
000026  5528              STRB     r0,[r5,r4]            ;446
000028  1c64              ADDS     r4,r4,#1              ;445
                  |L6.42|
00002a  4804              LDR      r0,|L6.60|
00002c  7a80              LDRB     r0,[r0,#0xa]          ;445  ; RxMessage
00002e  42a0              CMP      r0,r4                 ;445
000030  d8f6              BHI      |L6.32|
000032  4802              LDR      r0,|L6.60|
000034  7a80              LDRB     r0,[r0,#0xa]          ;447  ; RxMessage
000036  e7eb              B        |L6.16|
;;;449    
                          ENDP

                  |L6.56|
                          DCD      0x40006800
                  |L6.60|
                          DCD      RxMessage

                          AREA ||i.CAN_Interrupt||, CODE, READONLY, ALIGN=2

                  CAN_Interrupt PROC
;;;371    
;;;372    TestStatus CAN_Interrupt(void)
000000  b510              PUSH     {r4,lr}
;;;373    {
;;;374      uint32_t i = 0;
000002  2400              MOVS     r4,#0
;;;375    
;;;376      /* transmit 1 message */
;;;377      TxMessage.StdId = 0;
000004  2000              MOVS     r0,#0
000006  4916              LDR      r1,|L7.96|
000008  6008              STR      r0,[r1,#0]  ; TxMessage
;;;378      TxMessage.IDE = CAN_ID_STD;
00000a  7208              STRB     r0,[r1,#8]
;;;379      TxMessage.RTR = CAN_RTR_DATA;
00000c  7248              STRB     r0,[r1,#9]
;;;380      TxMessage.DLC = 2;
00000e  2002              MOVS     r0,#2
000010  7288              STRB     r0,[r1,#0xa]
;;;381      TxMessage.Data[0] = 0xDE;
000012  20de              MOVS     r0,#0xde
000014  72c8              STRB     r0,[r1,#0xb]
;;;382      TxMessage.Data[1] = 0xCA;
000016  21ca              MOVS     r1,#0xca
000018  4811              LDR      r0,|L7.96|
00001a  7301              STRB     r1,[r0,#0xc]
;;;383      CAN_Transmit(CAN1, &TxMessage);
00001c  4601              MOV      r1,r0
00001e  4811              LDR      r0,|L7.100|
000020  f7fffffe          BL       CAN_Transmit
;;;384    
;;;385      /* initialize the value that will be returned */
;;;386      ret = 0xFF;
000024  20ff              MOVS     r0,#0xff
000026  4910              LDR      r1,|L7.104|
000028  6008              STR      r0,[r1,#0]  ; ret
;;;387           
;;;388      /* Receive message with interrupt handling */
;;;389      i = 0;
00002a  bf00              NOP      
;;;390      while((ret ==  0xFF) && (i < 0xFFF))
00002c  e000              B        |L7.48|
                  |L7.46|
;;;391      {
;;;392        i++;
00002e  1c64              ADDS     r4,r4,#1
                  |L7.48|
000030  480d              LDR      r0,|L7.104|
000032  6800              LDR      r0,[r0,#0]            ;390  ; ret
000034  28ff              CMP      r0,#0xff              ;390
000036  d103              BNE      |L7.64|
000038  f64070ff          MOV      r0,#0xfff             ;390
00003c  4284              CMP      r4,r0                 ;390
00003e  d3f6              BCC      |L7.46|
                  |L7.64|
;;;393      }
;;;394      
;;;395      if (i ==  0xFFF)
000040  f64070ff          MOV      r0,#0xfff
000044  4284              CMP      r4,r0
000046  d102              BNE      |L7.78|
;;;396      {
;;;397        ret = 0;  
000048  2000              MOVS     r0,#0
00004a  4907              LDR      r1,|L7.104|
00004c  6008              STR      r0,[r1,#0]  ; ret
                  |L7.78|
;;;398      }
;;;399    
;;;400      /* disable interrupt handling */
;;;401      CAN_ITConfig(CAN1, CAN_IT_FMP0, DISABLE);
00004e  2200              MOVS     r2,#0
000050  2102              MOVS     r1,#2
000052  4804              LDR      r0,|L7.100|
000054  f7fffffe          BL       CAN_ITConfig
;;;402    
;;;403      return (TestStatus)ret;
000058  4803              LDR      r0,|L7.104|
00005a  7800              LDRB     r0,[r0,#0]  ; ret
;;;404    }
00005c  bd10              POP      {r4,pc}
;;;405    u8 CAN1_Send_Msg(u32 can_message_id, u8* msg)
                          ENDP

00005e  0000              DCW      0x0000
                  |L7.96|
                          DCD      TxMessage
                  |L7.100|
                          DCD      0x40006400
                  |L7.104|
                          DCD      ||ret||

                          AREA ||i.CAN_Polling||, CODE, READONLY, ALIGN=2

                  CAN_Polling PROC
;;;325    
;;;326    TestStatus CAN_Polling(void)
000000  b570              PUSH     {r4-r6,lr}
;;;327    {
;;;328    
;;;329      uint8_t TransmitMailbox = 0;
000002  2500              MOVS     r5,#0
;;;330            int i=0;
000004  2400              MOVS     r4,#0
;;;331    
;;;332      TransmitMailbox = CAN_Transmit(CAN1, &TxMessage);
000006  491f              LDR      r1,|L8.132|
000008  481f              LDR      r0,|L8.136|
00000a  f7fffffe          BL       CAN_Transmit
00000e  4605              MOV      r5,r0
;;;333      i = 0;
000010  bf00              NOP      
;;;334      while((CAN_TransmitStatus(CAN1, TransmitMailbox)  !=  CANTXOK) && (i  !=  0xFFFF))
000012  e000              B        |L8.22|
                  |L8.20|
;;;335      {
;;;336        i++;
000014  1c64              ADDS     r4,r4,#1
                  |L8.22|
000016  4629              MOV      r1,r5                 ;334
000018  481b              LDR      r0,|L8.136|
00001a  f7fffffe          BL       CAN_TransmitStatus
00001e  2801              CMP      r0,#1                 ;334
000020  d003              BEQ      |L8.42|
000022  f64f70ff          MOV      r0,#0xffff            ;334
000026  4284              CMP      r4,r0                 ;334
000028  d1f4              BNE      |L8.20|
                  |L8.42|
;;;337      }
;;;338    
;;;339      i = 0;
00002a  2400              MOVS     r4,#0
;;;340      while((CAN_MessagePending(CAN1, CAN_FIFO0) < 1) && (i  !=  0xFFFF))
00002c  e000              B        |L8.48|
                  |L8.46|
;;;341      {
;;;342        i++;
00002e  1c64              ADDS     r4,r4,#1
                  |L8.48|
000030  2100              MOVS     r1,#0                 ;340
000032  4815              LDR      r0,|L8.136|
000034  f7fffffe          BL       CAN_MessagePending
000038  2801              CMP      r0,#1                 ;340
00003a  da03              BGE      |L8.68|
00003c  f64f70ff          MOV      r0,#0xffff            ;340
000040  4284              CMP      r4,r0                 ;340
000042  d1f4              BNE      |L8.46|
                  |L8.68|
;;;343      }
;;;344    
;;;345      /* receive */
;;;346      RxMessage0.StdId = 0x00;
000044  2000              MOVS     r0,#0
000046  4911              LDR      r1,|L8.140|
000048  6008              STR      r0,[r1,#0]  ; RxMessage0
;;;347      RxMessage0.IDE = CAN_ID_STD;
00004a  7208              STRB     r0,[r1,#8]
;;;348      RxMessage0.DLC = 0;
00004c  7288              STRB     r0,[r1,#0xa]
;;;349      RxMessage0.Data[0] = 0x00;
00004e  72c8              STRB     r0,[r1,#0xb]
;;;350      RxMessage0.Data[1] = 0x00;
000050  2100              MOVS     r1,#0
000052  480e              LDR      r0,|L8.140|
000054  7301              STRB     r1,[r0,#0xc]
;;;351      CAN_Receive(CAN1, CAN_FIFO0, &RxMessage0);
000056  4602              MOV      r2,r0
000058  480b              LDR      r0,|L8.136|
00005a  f7fffffe          BL       CAN_Receive
;;;352    
;;;353      if (RxMessage0.StdId != 0x01)
00005e  480b              LDR      r0,|L8.140|
000060  6800              LDR      r0,[r0,#0]  ; RxMessage0
000062  2801              CMP      r0,#1
000064  d001              BEQ      |L8.106|
;;;354      {
;;;355        return FAILED;  
000066  2000              MOVS     r0,#0
                  |L8.104|
;;;356      }
;;;357    
;;;358      if (RxMessage0.IDE != CAN_ID_STD)
;;;359      {
;;;360        return FAILED;
;;;361      }
;;;362    
;;;363      if (RxMessage0.DLC != 8)
;;;364      {
;;;365        return FAILED;  
;;;366      }
;;;367    
;;;368      
;;;369      return PASSED; /* Test Passed */
;;;370    }
000068  bd70              POP      {r4-r6,pc}
                  |L8.106|
00006a  4808              LDR      r0,|L8.140|
00006c  7a00              LDRB     r0,[r0,#8]            ;358  ; RxMessage0
00006e  b108              CBZ      r0,|L8.116|
000070  2000              MOVS     r0,#0                 ;360
000072  e7f9              B        |L8.104|
                  |L8.116|
000074  4805              LDR      r0,|L8.140|
000076  7a80              LDRB     r0,[r0,#0xa]          ;363  ; RxMessage0
000078  2808              CMP      r0,#8                 ;363
00007a  d001              BEQ      |L8.128|
00007c  2000              MOVS     r0,#0                 ;365
00007e  e7f3              B        |L8.104|
                  |L8.128|
000080  2001              MOVS     r0,#1                 ;369
000082  e7f1              B        |L8.104|
;;;371    
                          ENDP

                  |L8.132|
                          DCD      TxMessage
                  |L8.136|
                          DCD      0x40006400
                  |L8.140|
                          DCD      RxMessage0

                          AREA ||i.CAN_SendData||, CODE, READONLY, ALIGN=1

                  CAN_SendData PROC
;;;252    }
;;;253    void CAN_SendData(CAN_TypeDef* CANx,CanTxMsg* CanData)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;254    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;255        uint8_t retrys=0;
000008  2400              MOVS     r4,#0
;;;256        uint8_t mailbox=0;
00000a  2700              MOVS     r7,#0
;;;257    
;;;258        do
00000c  bf00              NOP      
                  |L9.14|
;;;259    	{
;;;260    	    mailbox=CAN_Transmit(CANx,CanData);
00000e  4631              MOV      r1,r6
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       CAN_Transmit
000016  4607              MOV      r7,r0
;;;261    		retrys++;
000018  1c60              ADDS     r0,r4,#1
00001a  b2c4              UXTB     r4,r0
;;;262    	}
;;;263    	while((mailbox==CAN_TxStatus_NoMailBox)&&(retrys<0xFE));
00001c  2f04              CMP      r7,#4
00001e  d101              BNE      |L9.36|
000020  2cfe              CMP      r4,#0xfe
000022  dbf4              BLT      |L9.14|
                  |L9.36|
;;;264    	retrys=0;
000024  2400              MOVS     r4,#0
;;;265    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;266    
                          ENDP


                          AREA ||i.calcrc||, CODE, READONLY, ALIGN=2

                  calcrc PROC
;;;291    
;;;292    void calcrc(uint8_t *crcbuf,uint8_t size,uint8_t count)
000000  b5f0              PUSH     {r4-r7,lr}
;;;293    {
000002  4603              MOV      r3,r0
;;;294            uint8_t bit=0;
000004  2500              MOVS     r5,#0
;;;295            uint8_t i=0;
000006  2400              MOVS     r4,#0
;;;296            uint8_t pos=0;
000008  2000              MOVS     r0,#0
;;;297            if(size-count<2)
00000a  1a8e              SUBS     r6,r1,r2
00000c  2e02              CMP      r6,#2
00000e  da01              BGE      |L10.20|
;;;298                    while(1);
000010  bf00              NOP      
                  |L10.18|
000012  e7fe              B        |L10.18|
                  |L10.20|
;;;299            
;;;300            while(pos<count)
000014  e027              B        |L10.102|
                  |L10.22|
;;;301            {
;;;302                    crc ^= crcbuf[pos];
000016  5c1e              LDRB     r6,[r3,r0]
000018  4f1a              LDR      r7,|L10.132|
00001a  883f              LDRH     r7,[r7,#0]  ; crc
00001c  407e              EORS     r6,r6,r7
00001e  4f19              LDR      r7,|L10.132|
000020  803e              STRH     r6,[r7,#0]
;;;303                    for(i=0; i<8; i++)
000022  2400              MOVS     r4,#0
000024  e01b              B        |L10.94|
                  |L10.38|
;;;304                    {
;;;305            
;;;306                            bit = crc&0x1;
000026  4e17              LDR      r6,|L10.132|
000028  7836              LDRB     r6,[r6,#0]  ; crc
00002a  f0060501          AND      r5,r6,#1
;;;307                            crc >>= 1;
00002e  4e15              LDR      r6,|L10.132|
000030  8836              LDRH     r6,[r6,#0]  ; crc
000032  1076              ASRS     r6,r6,#1
000034  4f13              LDR      r7,|L10.132|
000036  803e              STRH     r6,[r7,#0]
;;;308                            crc=crc & 0x7fff;
000038  463e              MOV      r6,r7
00003a  8836              LDRH     r6,[r6,#0]  ; crc
00003c  f3c6060e          UBFX     r6,r6,#0,#15
000040  803e              STRH     r6,[r7,#0]
;;;309                            if(1==bit)
000042  b135              CBZ      r5,|L10.82|
;;;310                            {
;;;311                                    crc ^= 0xa001;
000044  463e              MOV      r6,r7
000046  8836              LDRH     r6,[r6,#0]  ; crc
000048  f24a0701          MOV      r7,#0xa001
00004c  407e              EORS     r6,r6,r7
00004e  4f0d              LDR      r7,|L10.132|
000050  803e              STRH     r6,[r7,#0]
                  |L10.82|
;;;312                            }
;;;313                            crc=crc &0xffff;
000052  4e0c              LDR      r6,|L10.132|
000054  8836              LDRH     r6,[r6,#0]  ; crc
000056  4f0b              LDR      r7,|L10.132|
000058  803e              STRH     r6,[r7,#0]
00005a  1c66              ADDS     r6,r4,#1              ;303
00005c  b2f4              UXTB     r4,r6                 ;303
                  |L10.94|
00005e  2c08              CMP      r4,#8                 ;303
000060  dbe1              BLT      |L10.38|
;;;314                    }
;;;315                    pos++;
000062  1c46              ADDS     r6,r0,#1
000064  b2f0              UXTB     r0,r6
                  |L10.102|
000066  4290              CMP      r0,r2                 ;300
000068  dbd5              BLT      |L10.22|
;;;316            }
;;;317            crcbuf[pos++]=crc & 0x00ff;
00006a  4e06              LDR      r6,|L10.132|
00006c  f896c000          LDRB     r12,[r6,#0]  ; crc
000070  4606              MOV      r6,r0
000072  1c47              ADDS     r7,r0,#1
000074  b2f8              UXTB     r0,r7
000076  f803c006          STRB     r12,[r3,r6]
;;;318            crcbuf[pos]=crc & 0xff00;
00007a  4e02              LDR      r6,|L10.132|
00007c  7836              LDRB     r6,[r6,#0]  ; crc
00007e  2600              MOVS     r6,#0
000080  541e              STRB     r6,[r3,r0]
;;;319    }
000082  bdf0              POP      {r4-r7,pc}
;;;320    
                          ENDP

                  |L10.132|
                          DCD      ||crc||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  RxMessage
                          %        20
                  TxMessage
                          %        20
                  TxMessage1
                          %        20
                  RxMessage0
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  ||crc||
000000  ffff              DCW      0xffff
                  status
000002  0000              DCB      0x00,0x00
                  ||ret||
                          DCD      0x00000000
                  can_message_id1
                          DCD      0x00000000
                  temp_float
                          DCD      0x00000000
                  Rxmessage10
                          %        8
                  RxMessage1
                          %        8

;*** Start embedded assembler ***

#line 1 "USER\\can.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_can_c_crc____REV16|
#line 388 ".\\CMSIS\\cmsis_armcc.h"
|__asm___5_can_c_crc____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_can_c_crc____REVSH|
#line 402
|__asm___5_can_c_crc____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_can_c_crc____RRX|
#line 587
|__asm___5_can_c_crc____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
